include "Tlbx AVFoundation.incl"#plist CFBundleIdentifier @"com.fbdemo.RecordingWithdBIndicator"#plist NSMicrophoneUsageDescription @"We need access to your microphone to measure sound levels."_window = 1begin enum 1_levelMeter_txtFld_startRecordingBtn_playRecordingBtnend enumvoid local fn BuildWindowCGRect r = fn CGRectMake( 0, 0, 460, 260 )window _window, @"Audio Recording with dB Indicator", r, NSWindowStyleMaskTitled + NSWindowStyleMaskClosable + NSWindowStyleMaskMiniaturizabler = fn CGRectMake( 20, 220, 420, 32 )levelindicator _levelMeter, YES, -50.0, r, -50.0, 0.0, -20.0, -10.0, YES, YES, _windowr = fn CGRectMake( 20, 60, 420, 160 )textfield _txtFld, YES, , rTextFieldSetEditable( _txtFld, NO )TextFieldSetSelectable( _txtFld, NO )TextFieldSetBordered( _txtFld, YES )r = fn CGRectMake( 320, 13, 125, 32 )button _startRecordingBtn,,, @"Start Recording", rr = fn CGRectMake( 15, 13, 130, 32 )button _playRecordingBtn,,, @"Play Recording", rend fnvoid local fn SetupAudioRecorder( url as CFURLRef )ErrorRef err = NULLCFDictionaryRef recordSettings // Define audio record settings : NOTE: These only work with C codeBeginCCoderecordSettings = (CFDictionaryRef)@{AVFormatIDKey: @(kAudioFormatMPEG4AAC),AVSampleRateKey: @44100.0f,AVNumberOfChannelsKey: @1,AVEncoderAudioQualityKey: @(AVAudioQualityHigh)};EndCAVAudioRecorderRef audioRecorder = fn AVAudioRecorderWithSettings( url, recordSettings, @err ) // Initialize the audio recorderif ( err ) then alert 1, NSAlertStyleWarning, @"Error initializing audio recorder", fn ErrorLocalizedDescription( err ), @[@"Okay"], YESAppPropertySet( @"audioRecorder", audioRecorder )       // Store audiorRecorder referenceAVAudioRecorderSetMeteringEnabled( audioRecorder, YES ) // Enable meteringend fnlocal fn CurrentDecibelLevel as floatAVAudioRecorderRef audioRecorder = (AVAudioRecorderRef)fn AppProperty( @"audioRecorder" )AVAudioRecorderUpdateMeters( audioRecorder )                            // Update the metersfloat averagePower = fn AVAudioRecorderAveragePower( audioRecorder, 0 ) // Get average powerlevelindicator _levelMeter,, averagePowerend fn = averagePower // dB value (not scaled)local fn StartRecordingCFURLRef desktopURL = fn FileManagerURLForDirectory( NSDesktopDirectory, NSUserDomainMask )CFURLRef        url = fn URLByAppendingPathComponent( desktopURL, @"tempRecording.mp4" )AppPropertySet( @"url", url )if ( fn FileManagerFileExistsAtURL( url ) ) then fn FileManagerRemoveItemAtURL( url )fn SetupAudioRecorder( url )AVAudioRecorderRef audioRecorder = (AVAudioRecorderRef)fn AppProperty( @"audioRecorder" )BOOL preparing = fn AVAudioRecorderPrepareToRecord( audioRecorder )if ( preparing == NO ) then ControlSetStringValue( _txtFld, @"Audio recorder preparation failed." )BOOL recording = fn AVAudioRecorderRecord( audioRecorder ) // Start the recordingif ( recording == NO )ControlSetStringValue( _txtFld, @"Audio recording failed." ) : exit fnelseControlSetStringValue( _txtFld, fn StringWithFormat( @"Audio recording underway. File being saved to:\n\n\t%@", url ) )end ifTimerRef timertimer = timerbegin ,0.05, YES // Poll fn CurrentDecibelLevel every 0.05 seconds for indicator levelfn CurrentDecibelLeveltimerendAppPropertySet( @"timer", timer )end fnvoid local fn RecordingFinishedHandler( ref as AVAudioRecorderRef, successfully as BOOL, userData as ptr )TimerRef timer = (TimerRef)fn AppProperty( @"timer" )TimerInvalidate( timer )levelindicator _levelMeter,, -50.0ControlSetStringValue( _txtFld, @"Recording session ended." )end fnlocal fn StopRecordingAVAudioRecorderRef audioRecorder = (AVAudioRecorderRef)fn AppProperty( @"audioRecorder" )if ( fn AVAudioRecorderIsRecording( audioRecorder ) == YES )AVAudioRecorderStop( audioRecorder )end ifAVAudioRecorderSetDidFinishRecordingHandler( audioRecorder, @fn RecordingFinishedHandler, NULL )end fnlocal fn PlayRecordingCFURLRef url = fn AppProperty( @"url" )fn WorkspaceOpenURL( url )end fnvoid local fn DoDialog( ev as long, tag as long, wnd as long, obj as CFTypeRef )select ( ev )case _viewDrawRectcase _btnClickselect ( tag )case _startRecordingBtnif ( fn StringIsEqual( fn ButtonTitle(tag), @"Start Recording" ) )fn StartRecordingButtonSetTitle(tag, @"Stop Recording" )elsefn StopRecordingButtonSetTitle(tag, @"Start Recording" )end ifcase _playRecordingBtn  : fn PlayRecordingend selectcase _windowWillClose : endend selectend fnon dialog fn DoDialogfn BuildWindowHandleEvents