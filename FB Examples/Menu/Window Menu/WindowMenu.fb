// menus_mApplication = 0begin enum 1_iSeparator_iPreferencesend enum_mFile = 1begin enum_iNew_iOpen_// separator_iCloseend enum_mEdit = 2_mWindow = 3// windows_window1 = 1_window2 = 2_prefsWindow = 3local fn BuildMenu// applicationmenu _mApplication, _iSeparatormenu _mApplication, _iPreferences,, @"Preferences…", @","// filemenu _mFile, -1,, @"File"menu _mFile, _iNew,, @"New…", @"n"menu _mFile, _iOpen,, @"Open…", @"o"menu _mFile, _iClose,, @"Close", @"w"MenuItemSetAction( _mFile, _iClose, @"performClose:" )// editeditmenu _mEdit// windowwindowmenu _mWindowend fnlocal fn BuildWindowswindow _window1, @"Window 1", (0,0,550,400)window _window2, @"Window 2", (50,400,480,270)window -_prefsWindow, @"Preferences", (400,200,300,200)end fnvoid local fn DoMenu( menuID as long, itemID as long )select ( menuID )case _mApplicationselect ( itemID )case _iPreferenceswindow _prefsWindowend selectcase _mFilewindow _prefsWindowend selectend fnvoid local fn DoDialog( ev as long, tag as long, wnd as long )select ( ev )case _windowShouldCloseselect ( tag )case _prefsWindowDialogEventSetBool(NO)// we only want to hide the prefs windowwindow -_prefsWindowend selectend selectend fnfn BuildMenufn BuildWindowson menu fn DoMenuon dialog fn DoDialogHandleEvents