/*  Demonstrates a scrollview containing eight subviews  with graphics. Views paginate correctly when printed.  Written by S.Van Voorst     {20180207}  Revised to print to pdf   {20180219}  Second revision using a modification of Ken's code  to autopaginate pdf    {20180220}*/_window = 1_wndW = 635_wndH = 780_rows = 8begin enum 1_view1_view2_view3_view4_view5_view6_view7_view8_scrlView_embedder_saveBtn_printBtn_quitBtnend enumvoid local fn SaveAsPDF( tag as long )PrintInfoRef printInfo = fn PrintInfoSharedCFMutableDictionaryRef printInfoDict = fn PrintInfoDictionary( printInfo )CFURLRef fileURL = fn URLFileURLWithPath( fn StringByExpandingTildeInPath(@"~/Desktop/PDFPagination.pdf") )MutableDictionarySetObjectForKey( printInfoDict, fileURL, NSPrintJobSavingURL )//DictionarySetObject( printInfoDict, NSPrintSaveJob, NSPrintJobDisposition )PrintInfoSetJobDisposition( printInfo, NSPrintSaveJob )PrintInfoSetHorizontallyCentered( printInfo, YES )PrintInfoSetVerticallyCentered( printInfo, YES )PrintInfoSetTopMargin( printInfo, 0.0 )PrintInfoSetBottomMargin( printInfo, 0.0 )PrintInfoSetLeftMargin( printInfo, 0.0 )PrintInfoSetRightMargin( printInfo, 0.0 )PrintInfoSetHorizontalPagination( printInfo, NSPrintingPaginationModeFit )PrintInfoSetVerticalPagination( printInfo, NSPrintingPaginationModeAutomatic )PrintInfoSetOrientation( printInfo, NSPaperOrientationPortrait )PrintOperationRef printOp = fn PrintOperationWithViewPrintInfo( tag, printInfo )PrintOperationSetShowsPrintPanel( printOp, NO )PrintOperationSetShowsProgressPanel( printOp, NO )fn PrintOperationRun( printOp )end fnvoid local fn PrintView( tag as long )PrintInfoRef printInfo = fn PrintInfoSharedPrintInfoSetHorizontallyCentered( printInfo, YES )PrintInfoSetVerticallyCentered( printInfo, NO )PrintInfoSetTopMargin( printInfo, 10.0 )PrintInfoSetBottomMargin( printInfo, 10.0 )PrintInfoSetLeftMargin( printInfo, 5.0 )PrintInfoSetRightMargin( printInfo, 5.0 )PrintInfoSetVerticalPagination( printInfo, NSPrintingPaginationModeAutomatic )PrintInfoSetOrientation( printInfo, NSPaperOrientationPortrait )PrintOperationRef printOp = fn PrintOperationWithViewPrintInfo( tag, printInfo )//fn PrintOperationRun( printOp )PrintOperationRunModal( printOp, _window, NULL, NULL )// sheet dialogend fnvoid local fn ViewBackgroundAndFrame( tag as long)CGRect r = fn ViewBounds( tag )BezierPathStrokeFillRect( r, 4.0, fn ColorBlack, fn ColorWhite )CGPoint pt = { r.size.width - 20, 10 }CFStringRef pgNum = fn StringWithFormat( @"%d",tag )StringDrawAtPoint( pgNum, pt, NULL )end fnvoid local fn BuildWindowNSInteger wndStyleMaskwndStyleMask = NSWindowStyleMaskTitledwndStyleMask += NSWindowStyleMaskClosablewndStyleMask += NSWindowStyleMaskMiniaturizable// **** Window **** //window _window, @"Print Multiple Views", ( 0, 0, _wndW, _wndH ), wndStyleMask// **** Scroll View With Embedder View **** //CGRect r = ( 20, 60, _wndW - 40, _wndH - 80 )scrollview _scrlView, rsubclass view _embedder, ( 0, 0, _wndW-40, 5870 )ViewSetFlipped(_embedder, YES)ScrollViewSetDocumentView( _scrlView, _embedder )ViewAddSubview(_windowContentViewTag, _scrlView)// **** Eight Subviews Added To Embedder **** //short kshort l, t, w, h, hg, lft, topSInt16 idl = 0t = 0w = 575h = 732hg = 2 // horizontal gutterid = _view1 // starting btnIDfor k = 0 to _rows -1lft = ltop  = t + k*(h + hg)r = fn CGRectMake( lft, top, w, h )subclassview id, rViewAddSubview(_embedder, id)ViewSetFlipped(id,YES)inc(id)next// **** Save To PDF Btn **** //button _saveBtn, , , @"SaveToPDF", (240, 15, 150, 24),, NSBezelStyleRoundedViewSetAutoresizingMask( _saveBtn, NSViewMinXMargin + NSViewMaxYMargin )// **** Print Btn **** //button _printBtn, , , @"Print", (_wndW - 170, 15, 105, 24),, NSBezelStyleRoundedViewSetAutoresizingMask( _printBtn, NSViewMinXMargin + NSViewMaxYMargin )// **** Quit Btn **** //button _quitBtn, , , @"Q", (_wndW - 50, 10, 40, 40),, NSBezelStyleCircularViewSetAutoresizingMask( _quitBtn, NSViewMinXMargin + NSViewMaxYMargin )ControlSetAction( _quitBtn, @"terminate:" )end fnvoid local fn DoDialog( ev as long, tag as long )select ( ev )case _btnClickselect ( tag )case _printBtn : fn PrintView(_embedder)case _saveBtn : fn SaveAsPDF(_embedder)end selectcase _viewDrawRectselect ( tag )case 1,2,3,4,5,6,7,8 : fn ViewBackgroundAndFrame(tag)end selectend selectend fnfn BuildWindowon dialog fn DoDialogHandleEvents