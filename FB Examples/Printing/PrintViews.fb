_pages = 8_pageWidth = 560_pageHeight = 619_pageMargin = 20_window = 1begin enum 1_scrlView_embedder_printBtnend enum_viewTagOffset = 100_textViewTagOffset = 200void local fn PrintView( tag as long )PrintInfoRef printInfo = fn PrintInfoSharedPrintInfoSetHorizontallyCentered( printInfo, YES )PrintInfoSetVerticallyCentered( printInfo, NO )PrintInfoSetTopMargin( printInfo, 10.0 )PrintInfoSetBottomMargin( printInfo, 10.0 )PrintInfoSetLeftMargin( printInfo, 5.0 )PrintInfoSetRightMargin( printInfo, 5.0 )PrintInfoSetVerticalPagination( printInfo, NSPrintingPaginationModeAutomatic )PrintInfoSetOrientation( printInfo, NSPaperOrientationPortrait )PrintOperationRef printOp = fn PrintOperationWithViewPrintInfo( tag, printInfo )//fn PrintOperationRun( printOp )PrintOperationRunModal( printOp, _window, NULL, NULL )// sheet dialogend fnvoid local fn BuildWindowlong   wndStyleMask, p, vTag, tvTagwndStyleMask = NSWindowStyleMaskTitledwndStyleMask += NSWindowStyleMaskClosablewndStyleMask += NSWindowStyleMaskMiniaturizablewindow _window, @"Print Multiple Views", (0,0,_pageWidth+40,_pageHeight+81), wndStyleMaskCGRect r = ( 20, 61, _pageWidth, _pageHeight )scrollview _scrlView, rScrollViewSetDrawsBackground( _scrlView, NO )subclass view _embedder, (0,0,_pageWidth,_pages * (_pageHeight + _pageMargin))ViewSetFlipped( _embedder, YES )ScrollViewSetDocumentView( _scrlView, _embedder )r = fn CGRectMake(0,0,_pageWidth,_pageHeight)for p = 1 to _pagesvTag = p + _viewTagOffsetview vTag, rViewAddSubview( _embedder, vTag )tvTag = p + _textViewTagOffsettextview tvTag, fn CGRectMake(0,0,r.size.width,r.size.height)TextSetString(tvTag, fn StringWithFormat(@"Page %ld",p))ViewAddSubview( vTag, tvTag )r.origin.y += ( _pageHeight + _pageMargin )nextbutton _printBtn,,, @"Printâ€¦", (14, 13, 79, 32)end fnvoid local fn DoDialog( ev as long, tag as long )select ( ev )case _btnClickselect ( tag )case _printBtn : fn PrintView(_embedder)end selectend selectend fnfn BuildWindowon dialog fn DoDialogHandleEvents