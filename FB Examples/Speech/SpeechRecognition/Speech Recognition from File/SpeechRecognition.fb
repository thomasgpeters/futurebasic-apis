include "NSLog.incl"include "Tlbx Speech.incl"output "SpeechDemo"include resources "speech.m4a"#plist CFBundleIdentifier @"com.futurebasic.SpeechDemo"#plist NSSpeechRecognitionUsageDescription @"Enable speech recognition."_window = 1begin enum 1_speakBtnend enumvoid local fn BuildWindowwindow _window, @"Speech Demo", (0,0,480,270)button _speakBtn,,, @"Speak"end fnvoid local fn MyRecognitionTaskHandler( ref as SFSpeechRecognizerRef, result as SFSpeechRecognitionResultRef, err as ErrorRef, userData as ptr )SFTranscriptionRef transcription = fn SFSpeechRecognitionResultBestTranscription( result )if ( err )NSLog(@"error")elseif ( fn SFSpeechRecognitionResultIsFinal( result ) )NSLog(@"%@",fn SFTranscriptionFormattedString( transcription ))end ifend ifend fnvoid local fn MyRequestAuthorization( status as SFSpeechRecognizerAuthorizationStatus, userData as ptr )SFSpeechRecognizerRef            recognizerCFURLRef                         urlSoundRef                         sndSFSpeechURLRecognitionRequestRef requestselect ( status )case SFSpeechRecognizerAuthorizationStatusNotDetermined : NSLog(@"Authorization not determined")case SFSpeechRecognizerAuthorizationStatusDenied        : NSLog(@"Authorization denied")case SFSpeechRecognizerAuthorizationStatusRestricted    : NSLog(@"Authorization restricted")case SFSpeechRecognizerAuthorizationStatusAuthorizedrecognizer = fn SFSpeechRecognizerInitif ( fn SFSpeechRecognizerIsAvailable( recognizer ) )url = fn BundleURLForResource( fn BundleMain, @"speech", @"m4a", NULL )if ( url )snd = fn SoundWithContentsOfURL( url, YES )SoundSetVolume( snd, 0.25 )fn SoundPlay( snd )request = fn SFSpeechURLRecognitionRequestWithURL( url )SFSpeechRecognizerSetSupportsOnDeviceRecognition( recognizer, YES )fn SFSpeechRecognizerRecognitionTaskWithResultHandler( recognizer, request, @fn MyRecognitionTaskHandler, NULL )end ifelseNSLog(@"Speech recognizer not available")end ifend selectend fnvoid local fn RecognizeSpeechSFSpeechRecognizerRequestAuthorization( @fn MyRequestAuthorization, NULL )end fnvoid local fn DoDialog( ev as long, tag as long )select ( ev )case _btnClickselect ( tag )case _speakBtn : fn RecognizeSpeechend selectend selectend fnfn BuildWindowon dialog fn DoDialogHandleEvents