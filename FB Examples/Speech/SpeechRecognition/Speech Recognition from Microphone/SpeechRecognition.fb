/*  SpeechRecognition  Ken Shmidheiser and Bernie Wylde  20220412*/include "NSLog.incl"include "Tlbx AVFoundation.incl"include "Tlbx Speech.incl"#plist NSMicrophoneUsageDescription        @"Your microphone will be used to record your speech."#plist NSSpeechRecognitionUsageDescription @"Speech recognition will be used to determine which words you speak into this device's microphone."#define AUDIO_ENGINE_KEY        @"audioEngine"#define RECOGNITION_REQUEST_KEY @"recognitionRequest"#define RECOGNITION_TASK_KEY    @"recognitionTask"#define SPEECH_RECOGNIZER_KEY   @"speechRecognizer"_window = 1begin enum 1_listenBtnend enumvoid def fn ListenActionvoid local fn ResetPropertiesAVAudioEngineRef                         engineSFSpeechAudioBufferRecognitionRequestRef recognitionRequestSFSpeechRecognitionTaskRef               recognitionTaskengine = fn AppProperty( AUDIO_ENGINE_KEY )AVAudioEngineStop( engine )recognitionRequest = fn AppProperty( RECOGNITION_REQUEST_KEY )if ( recognitionRequest ) then SFSpeechAudioBufferRecognitionRequestEndAudio( recognitionRequest )recognitionTask = fn AppProperty( RECOGNITION_TASK_KEY )if ( recognitionTask )  then SFSpeechRecognitionTaskCancel( recognitionTask )AppPropertyRemoveAllend fnvoid local fn MySpeechRecognizerDelegateCallback( ev as long, ref as SFSpeechRecognizerRef, availabilityDidChange as BOOL, userData as ptr )NSLog(@"Availability:%d",availabilityDidChange)end fnvoid local fn MyRequestAuthorizationCallback( status as SFSpeechRecognizerAuthorizationStatus, userData as ptr )select ( status )case SFSpeechRecognizerAuthorizationStatusAuthorized//    : NSLog(@"Authorized")case SFSpeechRecognizerAuthorizationStatusDenied        : NSLog(@"Denied")case SFSpeechRecognizerAuthorizationStatusNotDetermined : NSLog(@"Not Determined")case SFSpeechRecognizerAuthorizationStatusRestricted    : NSLog(@"Restricted")end selectend fnvoid local fn InitializeSpeechRecognizerSFSpeechRecognizerRef speechRecognizer = fn SFSpeechRecognizerInitAppPropertySet( SPEECH_RECOGNIZER_KEY, speechRecognizer )SFSpeechRecognizerSetDelegateCallback( speechRecognizer, @fn MySpeechRecognizerDelegateCallback, NULL )SFSpeechRecognizerRequestAuthorization( @fn MyRequestAuthorizationCallback, NULL )end fnvoid local fn BuildWindowwindow _window, @"Speech Recognition", (0,0,480,270)button _listenBtn,,, @"Start Listening", (13,13,123,32)end fnvoid local fn MyRecognitionHandler( ref as SFSpeechRecognizerRef, result as SFSpeechRecognitionResultRef, err as ErrorRef, userData as ptr )SFTranscriptionRef transcriptionCFArrayRef segmentsNSInteger countCFStringRef s1, s2if ( result )transcription = fn ArrayFirstObject( fn SFSpeechRecognitionResultTranscriptions( result ) )segments = fn SFTranscriptionSegments( transcription )count = fn ArrayCount( segments )if ( count > 1 )s1 = fn SFTranscriptionSegmentSubstring( fn ArrayObjectAtIndex( segments, count-2 ) )s2 = fn SFTranscriptionSegmentSubstring( fn ArrayObjectAtIndex( segments, count-1 ) )if ( fn StringCaseInsensitiveCompare( s1, @"stop" ) == NSOrderedSame && fn StringCaseInsensitiveCompare( s2, @"listening" ) == NSOrderedSame )fn ListenActionend ifend ifNSLogClearNSLog(@"%@",fn SFTranscriptionFormattedString( fn SFSpeechRecognitionResultBestTranscription( result ) ) )end ifif ( error )NSLog(@"error")fn ResetPropertiesend ifend fnvoid local fn MyInstallTapOnBusHandler( ref as AVAudioNodeRef, buffer as AVAudioPCMBufferRef, when as AVAudioTimeRef, userData as ptr )SFSpeechAudioBufferRecognitionRequestAppendAudioPCMBuffer( userData, buffer )// userData is SFSpeechAudioBufferRecognitionRequestRefend fnvoid local fn StartListeningSFSpeechRecognizerRef                    speechRecognizerAVAudioEngineRef                         engineSFSpeechRecognitionTaskRef               recognitionTaskErrorRef                                 errAVCaptureSessionRef                      captureSessionAVCaptureDeviceRef                       audioDeviceAVCaptureDeviceInputRef                  audioInputSFSpeechAudioBufferRecognitionRequestRef recognitionRequestAVAudioInputNodeRef                      inputNodeAVAudioFormatRef                         recordingFormatbutton _listenBtn,,, @"Stop Listening"// initialize the SFSpeechRecognizerfn InitializeSpeechRecognizer// initialize the AVAudioEngineengine = fn AVAudioEngineInitAppPropertySet( AUDIO_ENGINE_KEY, engine )// retain// start an AVCapture SessioncaptureSession = fn AVCaptureSessionInitaudioDevice = fn AVCaptureDeviceDefaultWithType( AVCaptureDeviceTypeBuiltInMicrophone, AVMediaTypeAudio, AVCaptureDevicePositionUnspecified )audioInput = fn AVCaptureDeviceInputWithDevice( audioDevice, @err )if ( audioInput )if ( fn AVCaptureSessionCanAddInput( captureSession, audioInput ) )AVCaptureSessionAddInput( captureSession, audioInput )recognitionRequest = fn SFSpeechAudioBufferRecognitionRequestInitSFSpeechRecognitionRequestSetShouldReportPartialResults( recognitionRequest, YES )AppPropertySet( RECOGNITION_REQUEST_KEY, recognitionRequest )speechRecognizer = fn AppProperty( SPEECH_RECOGNIZER_KEY )recognitionTask = fn SFSpeechRecognizerRecognitionTaskWithResultHandler( speechRecognizer, recognitionRequest, @fn MyRecognitionHandler, NULL )AppPropertySet( RECOGNITION_TASK_KEY, recognitionTask )inputNode = fn AVAudioEngineInputNode( engine )recordingFormat = fn AVAudioNodeOutputFormatForBus( inputNode, 0 )AVAudioNodeInstallTapOnBus( inputNode, 0, 1024, recordingFormat, @fn MyInstallTapOnBusHandler, recognitionRequest )AVAudioEnginePrepare( engine )fn AVAudioEngineStart( engine, @err )NSLog(@"Say Something, I'm listening")end ifend ifend fnvoid local fn ListenActionAVAudioEngineRef engineengine = fn AppProperty( AUDIO_ENGINE_KEY )if ( engine )if ( fn AVAudioEngineIsRunning( engine ) )fn ResetPropertiesend ifbutton _listenBtn,,, @"Start Listening"elsefn StartListeningend ifend fnvoid local fn DoDialog( ev as long, tag as long )select ( ev )case _btnClickselect ( tag )case _listenBtn : fn ListenActionend selectend selectend fnfn BuildWindowon dialog fn DoDialogHandleEvents