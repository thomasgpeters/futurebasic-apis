/*  DateUtils  Translation of NSDate+Utilities by Brian Stevens*/CFDateRef local fn DateUtils_CleanseDate( dt as CFDateRef )DateFormatterRef formatter = fn DateFormatterInitDateFormatterSetDateFormat( formatter, @"yyyy-MM-dd" )end fn = fn DateFormatterDateFromString( formatter, fn DateFormatterStringFromDate( formatter, dt ) )CFStringRef local fn DateUtils_ComponentStringUsingFormatter( dt as CFDateRef, formatter as DateFormatterRef )end fn = fn DateFormatterStringFromDate( formatter, dt )CFStringRef local fn DateUtils_YearString( dt as CFDateRef )DateFormatterRef formatter = fn DateFormatterInitDateFormatterSetDateFormat( formatter, @"yyyy" )end fn = fn DateUtils_ComponentStringUsingFormatter( dt, formatter )CFStringRef local fn DateUtils_MonthString( dt as CFDateRef )DateFormatterRef formatter = fn DateFormatterInitDateFormatterSetDateFormat( formatter, @"MM" )end fn = fn DateUtils_ComponentStringUsingFormatter( dt, formatter )CFStringRef local fn DateUtils_DayString( dt as CFDateRef )DateFormatterRef formatter = fn DateFormatterInitDateFormatterSetDateFormat( formatter, @"d" )end fn = fn DateUtils_ComponentStringUsingFormatter( dt, formatter )void local fn DateUtils_GetYearMonthDay( dt as CFDateRef, y as ^NSInteger, m as ^NSInteger, d as ^NSInteger )CFCalendarRef cal = fn CalendarCurrent*y = fn CalendarComponentFromDate( cal, NSCalendarUnitYear, dt )*m = fn CalendarComponentFromDate( cal, NSCalendarUnitMonth, dt )*d = fn CalendarComponentFromDate( cal, NSCalendarUnitDay, dt )end fnCFStringRef local fn DateUtils_CurrentYearStringend fn = fn DateUtils_YearString( fn DateInit )CFStringRef local fn DateUtils_CurrentMonthStringend fn = fn DateUtils_MonthString( fn DateInit )CFStringRef local fn DateUtils_CurrentDayStringend fn = fn DateUtils_DayString( fn DateInit )CFDateRef local fn DateUtils_DateWithYearMonthDay( y as NSInteger, m as NSInteger, d as NSInteger )DateComponentsRef comps = fn DateComponentsInitDateComponentsSetYear( comps, y )DateComponentsSetMonth( comps, m )DateComponentsSetDay( comps, d )DateComponentsSetHour( comps, 0 )DateComponentsSetMinute( comps, 0 )DateComponentsSetSecond( comps, 0 )end fn = fn CalendarDateFromComponents( fn CalendarCurrent, comps )CFDateRef local fn DateUtils_DateByAddingDaysMonthsYears( dt as CFDateRef, days as NSInteger, months as NSInteger, years as NSInteger )DateComponentsRef comps = fn DateComponentsInitDateComponentsSetYear( comps, years )DateComponentsSetMonth( comps, months )DateComponentsSetDay( comps, days )end fn = fn CalendarDateByAddingComponents( fn CalendarCurrent, comps, dt, 0 )CFDateRef local fn DateUtils_JanFirstThisYearend fn = fn DateUtils_DateWithYearMonthDay( intval(fn DateUtils_CurrentYearString), 1, 1 )NSInteger local fn DateUtils_DaysBetweenDates( inFromDate as CFDateRef, inToDate as CFDateRef )CFDateRef fromDate, toDateCFCalendarRef cal = fn CalendarCurrentfn CalendarRangeOfUnit( cal, NSCalendarUnitDay, @fromDate, NULL, inFromDate )fn CalendarRangeOfUnit( cal, NSCalendarUnitDay, @toDate, NULL, inToDate )DateComponentsRef comps = fn CalendarComponentsFromDateToDate( cal, NSCalendarUnitDay, fromDate, toDate, 0 )end fn = fn DateComponentsDay( comps )CFStringRef local fn DateUtils_YYMMDDString( dt as CFDateRef )CFStringRef monthFormat, dayFormatCFCalendarRef cal = fn CalendarCurrentNSInteger year = fn CalendarComponentFromDate( cal, NSCalendarUnitYear, dt )NSInteger month = fn CalendarComponentFromDate( cal, NSCalendarUnitMonth, dt )NSInteger day = fn CalendarComponentFromDate( cal, NSCalendarUnitDay, dt )if ( month > 9 ) then monthFormat = @"%ld" else monthFormat = @"0%ld"if ( day > 9 ) then dayFormat = @"%ld" else dayFormat = @"0%ld"CFStringRef formatString = fn StringWithFormat( @"%@%@%@",@"%ld", monthFormat, dayFormat )end fn = fn StringWithFormat( formatString, year, month, day )CFDateRef local fn DateUtils_DateFromYYMMDDString( string as CFStringRef )DateComponentsRef comps = fn DateComponentsInitDateComponentsSetYear( comps, intval(left(string,4)) )DateComponentsSetMonth( comps, intval(mid(string,4,2)) )DateComponentsSetDay( comps, intval(right(string,2)) )end fn = fn CalendarDateFromComponents( fn CalendarCurrent, comps )DateComponentsRef local fn DateUtils_DiffComponents( dt1 as CFDateRef, dt2 as CFDateRef, units as NSCalendarUnit )end fn = fn CalendarComponentsFromDateToDate( fn CalendarCurrent, units, dt1, dt2, 0 )CFStringRef local fn DateUtils_DateComponentStringUsingFormatter( dt as CFDateRef, formatter as DateFormatterRef )end fn = fn DateFormatterStringFromDate( formatter, dt )CFStringRef local fn DateUtils_ShortStyleDateString( dt as CFDateRef )DateFormatterRef formatter = fn DateFormatterInitDateFormatterSetDateStyle( formatter, NSDateFormatterShortStyle )DateFormatterSetTimeStyle( formatter, NSDateFormatterNoStyle )end fn = fn DateUtils_DateComponentStringUsingFormatter( dt, formatter )CFStringRef local fn DateUtils_MediumStyleDateString( dt as CFDateRef )DateFormatterRef formatter = fn DateFormatterInitDateFormatterSetDateStyle( formatter, NSDateFormatterMediumStyle )DateFormatterSetTimeStyle( formatter, NSDateFormatterNoStyle )end fn = fn DateUtils_DateComponentStringUsingFormatter( dt, formatter )CFStringRef local fn DateUtils_LongStyleDateString( dt as CFDateRef )DateFormatterRef formatter = fn DateFormatterInitDateFormatterSetDateStyle( formatter, NSDateFormatterLongStyle )DateFormatterSetTimeStyle( formatter, NSDateFormatterNoStyle )end fn = fn DateUtils_DateComponentStringUsingFormatter( dt, formatter )CFStringRef local fn DateUtils_DayName( dt as CFDateRef )DateFormatterRef formatter = fn DateFormatterInitDateFormatterSetDateFormat( formatter, @"EEEE" )end fn = fn DateUtils_DateComponentStringUsingFormatter( dt, formatter )CFStringRef local fn DateUtils_MonthName( dt as CFDateRef )DateFormatterRef formatter = fn DateFormatterInitDateFormatterSetDateFormat( formatter, @"MMMM" )end fn = fn DateFormatterStringFromDate( formatter, dt )NSInteger local fn DateUtils_WeekDayNumberFromDate( dt as CFDateRef )CFCalendarRef gregCal = fn CalendarWithIdentifier( NSCalendarIdentifierGregorian )DateComponentsRef comps = fn CalendarComponentsFromDate( gregCal, NSCalendarUnitWeekday, dt )end fn = fn DateComponentsWeekday( comps )NSInteger local fn DateUtils_MonthNumberFromDate( dt as CFDateRef )CFCalendarRef gregCal = fn CalendarWithIdentifier( NSCalendarIdentifierGregorian )DateComponentsRef comps = fn CalendarComponentsFromDate( gregCal, NSCalendarUnitMonth, dt )end fn = fn DateComponentsMonth( comps )NSInteger local fn DateUtils_MonthNumberFromName( name as CFStringRef )DateFormatterRef formatter = fn DateFormatterInitend fn = fn ArrayIndexOfObject( fn DateFormatterMonthSymbols( formatter ), name ) + 1CFStringRef local fn DateUtils_MonthNameFromNumber( monthNum as NSInteger )if ( monthNum >= 1 && monthNum <= 12 )DateFormatterRef formatter = fn DateFormatterInitreturn fn ArrayObjectAtIndex( fn DateFormatterMonthSymbols( formatter ), monthNum - 1 )end ifend fn = NULLNSInteger local fn DateUtils_DayNumberFromName( name as CFStringRef )DateFormatterRef formatter = fn DateFormatterInitend fn = fn ArrayIndexOfObject( fn DateFormatterWeekdaySymbols( formatter ), name )NSInteger local fn DateUtils_DaysInMonth( dt as CFDateRef )CFRange range = fn CalendarRangeOfUnitInUnit( fn CalendarCurrent, NSCalendarUnitDay, NSCalendarUnitMonth, dt )end fn = range.lengthBOOL local fn DateUtils_EqualDates( dt1 as CFDateRef, dt2 as CFDateRef )CFCalendarRef cal = fn CalendarCurrentNSCalendarUnit units = NSCalendarUnitYear | NSCalendarUnitMonth |  NSCalendarUnitDayDateComponentsRef comps1 = fn CalendarComponentsFromDate( cal, units, dt1 )DateComponentsRef comps2 = fn CalendarComponentsFromDate( cal, units, dt2 )NSInteger d1 = fn DateComponentsDay(comps1), d2 = fn DateComponentsDay(comps2)NSInteger m1 = fn DateComponentsMonth(comps1), m2 = fn DateComponentsMonth(comps2)NSInteger y1 = fn DateComponentsYear(comps1), y2 = fn DateComponentsYear(comps2)end fn = ( (d1 == d2) && (m1 == m2) && (y1 == y2) )