include "Tlbx EventKit.incl"#plist NSCalendarsUsageDescription @"This app needs access to your calendar events."// event store key#define EVENT_STORE_KEY @"EventStore"// table column keys#define TABLE_DATE_KEY @"Date"#define TABLE_TITLE_KEY @"Title"_window = 1begin enum 1_fromPicker_toPicker_showBtn_tableViewend enumvoid local fn BuildWindowCFDateRef fromDate, toDatenibwindow _window, @"Window"fromDate = fn CalendarStartOfDayForDate( fn CalendarCurrent, fn DateInit )toDate   = fn DateWithTimeIntervalSinceDate( (24 * 60 * 60), fromDate )datepicker _fromPicker,, fromDatedatepicker _toPicker,, toDateend fnvoid local fn ShowEventsCFDateRef         startDate, endDateCFArrayRef        calendarsEKEventRef        eventEKCalendarRef     calendarEKEventStoreRef   storeCFMutableArrayRef tableDataCFStringRef       dateStringstore     = fn AppProperty( EVENT_STORE_KEY )calendars = fn EKEventStoreCalendarsForEntityType( store, EKEntityTypeEvent )startDate = fn DatePickerDateValue( _fromPicker )endDate   = fn DatePickerDateValue( _toPicker )tableData = fn TableViewData( _tableView )MutableArrayRemoveAllObjects( tableData )for calendar in calendarsPredicateRef predicate = fn EKEventStorePredicateForEvents( store, startDate, endDate, @[calendar] )CFArrayRef eventsArray = fn EKEventStoreEventsMatchingPredicate( store, predicate )eventsArray = fn ArraySortedArrayUsingSelector( eventsArray, @"compareStartDateWithEvent:" )for event in eventsArraydateString = fn DateStringWithFormat( fn EKEventStartDate(event), @"dd MMM yyyy, hh:mm" )MutableArrayAddObject( tableData, @{TABLE_DATE_KEY:dateString,TABLE_TITLE_KEY:fn EKCalendarItemTitle(event)} )nextnextTableViewReloadData( _tableView )end fnvoid local fn EventStoreRequestAccess( ref as EKEVentStoreRef, granted as BOOL, err as ErrorRef, userData as ptr )dispatchmain// must do UI configuration on the main queueif ( granted == NO )alert 1,, @"Access to Calendar has been denied.", @"This application must now terminate.", @"Quit"endelsefn BuildWindowfn ShowEventsend ifdispatchendend fnvoid local fn RequestCalendarAccessEKEventStoreRef store = fn EKEventStoreInitAppPropertySet( EVENT_STORE_KEY, store )EKEventStoreRequestAccessToEntityType( store, EKEntityTypeEvent, @fn EventStoreRequestAccess, NULL )end fnvoid local fn DoAppEvent( ev as long )select ( ev )case _appWillFinishLaunching                  : fn RequestCalendarAccesscase _appShouldTerminateAfterLastWindowClosed : AppEventSetBool(YES)end selectend fnvoid local fn DoDialog( ev as long, tag as long, wnd as long, obj as CFTypeRef )select ( ev )case _btnClickselect ( tag )case _showBtn : fn ShowEventsend selectend selectend fnon appevent fn DoAppEventon dialog fn DoDialogHandleEvents