/*  LinguisticTagger  Bernie Wylde 20180608*/_window = 1begin enum 1_textView_tableView_analyzeBtnend enumvoid local fn TableDataAddRow( tableData as CFMutableArrayRef, string1 as CFStringRef, string2 as CFStringRef )CFDictionaryRef dict = @{@"Word":string1,@"Tag":string2}MutableArrayAddObject( tableData, dict )end fnvoid local fn LinguisticTaggerCallback( ref as LinguisticTaggerRef, tag as CFStringRef, tokenRange as CFRange, sentenceRange as CFRange, stp as ^BOOL, userData as ptr )CFStringRef         string, tokenCFMutableArrayRef   tableDatastring = fn LinguisticTaggerString( ref )token = fn StringSubstringWithRange( string, tokenRange )tableData = fn TableViewData( _tableView )fn TableDataAddRow( tableData, token, tag )TableViewReloadData( _tableView )// *stp = YES // stop enumerationend fnvoid local fn AnalyzeNSLinguisticTaggerOptions   optionsLinguisticTaggerRef         refCFStringRef                 stringCFRange                     rangeCFMutableArrayRef           tableData// clear tableviewtableData = fn TableViewData( _tableView )MutableArrayRemoveAllObjects( tableData )TableViewReloadData( _tableView )// init linguistic taggeroptions = NSLinguisticTaggerJoinNames + NSLinguisticTaggerOmitWhitespaceref = fn LinguisticTaggerWithTagSchemes( fn LinguisticTaggerAvailableTagSchemesForLanguage( @"en" ), options )string = fn TextString( _textView )LinguisticTaggerSetString( ref, string  )range = fn CFRangeMake( 0, fn StringLength( string ) )LinguisticTaggerEnumerateTagsForScheme( ref, range, NSLinguisticTagSchemeNameTypeOrLexicalClass, options, @fn LinguisticTaggerCallback, NULL )end fnvoid local fn BuildWindowNibWindow 1, @"Window"end fnvoid local fn DoAppEvent( ev as long )select ( ev )case _appShouldTerminateAfterLastWindowClosedAppEventSetBool( YES )end selectend fnvoid local fn DoDialog( ev as long, id as long )select ( ev )case _btnClickselect ( id )case _analyzeBtn : fn Analyzeend selectend selectend fneditmenu 1fn BuildWindowon appevent fn DoAppEventon dialog fn DoDialogHandleEvents