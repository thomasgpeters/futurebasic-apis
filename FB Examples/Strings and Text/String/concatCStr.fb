local fn DoItchar s1(3)  = 'abc'   // initialize a CStr ( which is a character array )char s2(3)  = 'def'char s3(3)  = 'hij' // could put up to 700 but sizes to whatever is providedchar s4(10) = ''byte b1(5)concatCStr( s4(0), s1(0), s2(0), s3(0) )printf @"s4 contains: %s",@s4(0) // print abcdefhijend fnlocal fn CStringsPassedToMe( cStr1(3) as char, cStr2(3) as char, returnedStr(10) as char )concatCStr( returnedStr(0), cStr1(0), cStr2(0) )printf @"s4 within CStringsPassedToMe is: %s",@returnedStr(0) // print abcdefhijend fnfn DoItchar s1(3)  = 'abc'   // initialize a CStr ( which is a character array )char s2(3)  = 'def'char s3(3)  = 'hij' // could put up to 700 but sizes to whatever is providedchar s4(10) = ''fn CStringsPassedToMe( s1(0), s2(0), s4(0) )printf @"s4 after returning from CStringsPassedToMe is: %s",@s4(0) // print abcdefhij// Initializers have unlimited length but they can't be combined with the line continuation character { Â¬ ) yet.// Workaround: use concatCStrchar s5(100)  = '0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789'char s6(100)  = '0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789'char s7(100)  = 'abcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghij'char big(300)concatCStr( big(0), s5(0), s6(0), s7(0) )long sizesize = fn strlen( @big(0) )print sizeprintf @"big is:\n%s",@big(0) // prints 300 character string.HandleEvents