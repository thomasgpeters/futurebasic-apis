include "Tlbx XML.incl"_mFile = 1begin enum_iOpenend enum_window = 1_openPanel = 101void local fn BuildMenumenu _mFile,,, @"File"menu _mFile, _iOpen,, @"Openâ€¦", @"o"end fnvoid local fn BuildWindowwindow _window, @"Parse XML", (0,0,600,650)WindowSetBackgroundColor( _window, fn ColorWhite )end fnvoid local fn PrintString( string as CFStringRef, indent as long, col as ColorRef )CFStringRef pad = @""if ( indent > 0 ) then pad = fn StringByPaddingToLength( @"", indent, @"\t", 0 )text ,, colprint pad;stringend fnvoid local fn MyParserDelegateCallback( ev as long, parser as XMLParserRef, userData as ptr )static long               indentstatic CFMutableStringRef charactersCFStringRef               string, keyCFDictionaryRef           attributesCFArrayRef                keysselect ( ev )case _xmlParserDidStartDocumentfn PrintString( @"start document", indent, fn ColorLightGray )indent++case _xmlParserDidStartElementstring = fn XMLParserDelegateElementName(parser)fn PrintString( string, indent, fn ColorBlue )indent++attributes = fn XMLParserDelegateAttributes(parser)keys = fn DictionaryAllKeys( attributes )for key in keysstring = fn StringWithFormat(@"%@: %@",key,attributes[key])fn PrintString( string, indent, fn ColorMagenta )nextcase _xmlParserFoundCharactersstring = fn XMLParserDelegateFoundCharacters(parser)if ( fn StringHasPrefix( string, @"\n" ) == NO )if ( characters == NULL ) then characters = fn MutableStringNewMutableStringAppendString( characters, string )end ifcase _xmlParserDidEndElementif ( characters )fn PrintString( characters, indent, fn ColorRed )characters = NULLend ifindent--string = fn XMLParserDelegateElementName(parser)fn PrintString( string, indent, fn ColorBlue )case _xmlParserDidEndDocumentindent--fn PrintString( @"end document", indent, fn ColorLightGray )end selectend fnvoid local fn OpenActionCFURLRef url = openpanel _openPanel, @"Open an xml file", @"xml;plist"if ( url )clsXMLParserRef parser = fn XMLParserWithContentsOfURL( url )XMLParserSetDelegateCallback( parser, @fn MyParserDelegateCallback, NULL )fn XMLParserParse( parser )end ifend fnvoid local fn DoAppEvent( ev as long )select ( ev )case _appDidFinishLaunchingfn BuildMenufn BuildWindowfn OpenActionend selectend fnvoid local fn DoMenu( menuID as long, itemID as long )select ( menuID )case _mFileselect ( itemID )case _iOpen : fn OpenActionend selectend selectend fnon appevent fn DoAppEventon menu fn DoMenuHandleEvents