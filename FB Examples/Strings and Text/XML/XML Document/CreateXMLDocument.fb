include "Tlbx XML.incl"_window = 1begin enum 1_scrollView_textView_createXMLBtn_saveBtnend enumvoid local fn CreateXMLDocument// root (data)XMLElementRef rootElem = fn XMLNodeElementWithName( @"data" )XMLNodeRef typeNode = fn XMLNodeAttributeWithName( @"type", @"TEPS_Package" )XMLNodeRef versionNode = fn XMLNodeAttributeWithName( @"version", @"1.0" )XMLNodeRef nameNode = fn XMLNodeAttributeWithName( @"name", @"[4x6] (1) 4x6" )XMLNodeRef plucodeNode = fn XMLNodeAttributeWithName( @"plucode", @"4x646PRINT" )XMLElementSetAttributes( rootElem, @[typeNode,versionNode,nameNode,plucodeNode] )// docXMLDocumentRef xmlDoc = fn XMLDocumentWithRootElement( rootElem )XMLDocumentSetVersion( xmlDoc, @"1.0" )XMLDocumentSetCharacterEncoding( xmlDoc, @"UTF-8" )XMLDocumentSetStandalone( xmlDoc, YES )// packageXMLElementRef packageElem = fn XMLNodeElementWithName( @"package" )typeNode = fn XMLNodeAttributeWithName( @"type", @"inline" )XMLNodeRef idNode = fn XMLNodeAttributeWithName( @"id", @"[4x6] (1) 4x6" )plucodeNode = fn XMLNodeAttributeWithName( @"plucode", @"4x646PRINT" )XMLElementSetAttributes( packageElem, @[typeNode,idNode,plucodeNode] )XMLElementAddChild( rootElem, packageElem )// outputXMLElementRef outputElem = fn XMLNodeElementWithName( @"output" )nameNode = fn XMLNodeAttributeWithName( @"name", @"DS40 [4x6] (1) 4x6" )XMLNodeRef urlNode = fn XMLNodeAttributeWithName( @"url", @"/Users/Shared/Triprism/TEPS/Outputs/DS40 [4x6] (1) 4x6.xml" )XMLElementSetAttributes( outputElem, @[nameNode,urlNode] )XMLElementAddChild( packageElem, outputElem )// templateXMLElementRef templateElem = fn XMLNodeElementWithName( @"template" )idNode = fn XMLNodeAttributeWithName( @"id", @"layout" )XMLElementAddAttribute( templateElem, idNode )XMLElementAddChild( outputElem, templateElem )// filepathXMLElementRef filepathElem = fn XMLElementWithNameStringValue( @"filepath", @"[4x6] (1) 4x6.xml" )XMLElementAddChild( templateElem, filepathElem )// layoutXMLElementRef layoutElem = fn XMLNodeElementWithName( @"layout" )typeNode = fn XMLNodeAttributeWithName( @"type", @"node" )XMLElementAddAttribute( layoutElem, typeNode )XMLElementAddChild( outputElem, layoutElem )// whattoprintXMLElementRef whattoprintElem = fn XMLElementWithNameStringValue( @"whattoprint", @"current" )XMLElementAddChild( outputElem, whattoprintElem )// photoeffectXMLElementRef photoeffectElem = fn XMLElementWithNameStringValue( @"photoeffect", @"none" )XMLElementAddChild( outputElem, photoeffectElem )// destinationXMLElementRef destinationElem = fn XMLNodeElementWithName( @"destination" )typeNode = fn XMLNodeAttributeWithName( @"type", @"printer" )XMLElementAddAttribute( destinationElem, typeNode )XMLElementAddChild( outputElem, destinationElem )// modelXMLElementRef modelElem = fn XMLElementWithNameStringValue( @"model", @"DNP DS40" )XMLElementAddChild( destinationElem, modelElem )// gravityXMLElementRef gravityElem = fn XMLElementWithNameStringValue( @"gravity", @"resizeAspectFill" )XMLElementAddChild( destinationElem, gravityElem )// papersizeXMLElementRef papersizeElem = fn XMLElementWithNameStringValue( @"papersize", @"6 x 4" )XMLElementAddChild( destinationElem, papersizeElem )if ( fn XMLDocumentValidate( xmlDoc, NULL ) )// function name corrected in FB 7.0.22CFDataRef xmlData = fn XMLDocumentXMLDataWithOptions( xmlDoc, NSXMLNodePrettyPrint )CFStringRef string = fn StringWithData( xmlData, NSUTF8StringEncoding )TextSetString( _textView, string )AppPropertySet( @"xmlData", xmlData )else// bad xml!end ifend fnvoid local fn BuildWindowwindow _window, @"Create XML Document", (0,0,900,500)WindowSetContentMinSize( _window, fn CGSizeMake(240,140) )scrollview _scrollView, (20,60,860,420), NSBezelBorderViewSetAutoresizingMask( _scrollView, NSViewWidthSizable + NSViewHeightSizable )textview _textView,, _scrollViewTextSetFont( _textView, fn FontWithName( @"Menlo", 13 ) )button _saveBtn,,, @"Saveâ€¦", (813,13,74,32)ViewSetAutoresizingMask( _saveBtn, NSViewMinXMargin + NSViewMaxYMargin )end fnvoid local fn SaveActionCFDataRef xmlData = fn AppProperty( @"xmlData" )if ( xmlData )CFURLRef url = savepanel 1,, @"xml", @"MyXMLFile"if ( url )if ( fn DataWriteToURL( xmlData, url, NSDataWritingAtomic, NULL ) == NO )// write error!end ifend ifend ifend fnvoid local fn DoDialog( ev as long, tag as long )select ( ev )case _btnClickselect ( tag )case _saveBtn : fn SaveActionend selectend selectend fnfn BuildWindowfn CreateXMLDocumenton dialog fn DoDialogHandleEvents