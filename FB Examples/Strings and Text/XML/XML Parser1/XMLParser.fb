/*  XMLParser  Tutorial - https://www.youtube.com/watch?v=j2ocsvrenuw  Project  - https://github.com/josh--newman/ParserDemo*/include "Tlbx XML.incl"// requiredinclude resources "menu.xml"// keys#define FOOD_ARRAY_KEY   @"FoodArray"#define ELEMENT_NAME_KEY @"ElementName"#define FOOD_KEY         @"food"#define NAME_KEY         @"name"#define PRICE_KEY        @"price"#define DESCRIPTION_KEY  @"description"#define CALORIES_KEY     @"calories"_window = 1begin enum 1_scrollView_textViewend enumvoid local fn ShowMenuCFArrayRef                   arrayCFDictionaryRef              dictCFMutableAttributedStringRef tsCFStringRef                  name, description, calories, priceCGRect                       r = (0,0,640,590)window _window, @"Breakfast Menu", r, NSWindowStyleMaskTitledscrollview _scrollView, rViewSetAutoresizingMask( _scrollView, NSViewWidthSizable + NSViewHeightSizable )textview _textView,, _scrollViewTextSetAlignment( _textView, NSTextAlignmentCenter )TextViewSetBackgroundColor( _textView, fn ColorWithRGB(1.0,1.0,0.0,0.65) )TextViewSetSelectable( _textView, NO )TextSetString( _textView, @"\n" )ts = fn TextViewMutableAttributedString( _textView )array = fn AppProperty( FOOD_ARRAY_KEY )for dict in arrayname        = fn StringWithFormat( @"%@\n", fn DictionaryObjectForKey( dict, NAME_KEY ) )description = fn StringWithFormat( @"%@\n", fn DictionaryObjectForKey( dict, DESCRIPTION_KEY ) )calories    = fn StringWithFormat( @"(%@ calories)\n", fn DictionaryObjectForKey( dict, CALORIES_KEY ) )price       = fn StringWithFormat( @"$%@\n\n", fn DictionaryObjectForKey( dict, PRICE_KEY ) )MutableAttributedStringAppendAttributedString( ts, fn AttributedStringWithAttributes(name, @{NSFontAttributeName:fn FontWithName(@"Times-Bold",24)} ) )MutableAttributedStringAppendAttributedString( ts, fn AttributedStringWithAttributes(description, @{NSFontAttributeName:fn FontWithName(@"Times-Italic",18)} ) )MutableAttributedStringAppendAttributedString( ts, fn AttributedStringWithAttributes(calories, @{NSFontAttributeName:fn FontWithName(@"Times",15)} ) )MutableAttributedStringAppendAttributedString( ts, fn AttributedStringWithAttributes(price, @{NSFontAttributeName:fn FontWithName(@"Times",18)} ) )nextend fnvoid local fn MyParserDelegateCallback( ev as long, parser as XMLParserRef, userData as ptr )CFDictionaryRef   dictCFMutableArrayRef arrayCFStringRef       stringselect ( ev )case _xmlParserDidStartElementAppPropertySet( ELEMENT_NAME_KEY, fn XMLParserDelegateElementName(parser) )case _xmlParserFoundCharactersstring = fn XMLParserDelegateFoundCharacters(parser)if ( fn StringHasPrefix( string, @"\n" ) == NO )// <--- !?AppPropertySet( fn AppProperty( ELEMENT_NAME_KEY ), string )end ifcase _xmlParserDidEndElementif ( fn StringIsEqual( fn XMLParserDelegateElementName(parser), FOOD_KEY ) )dict = @{NAME_KEY:fn AppProperty(NAME_KEY),PRICE_KEY:fn AppProperty(PRICE_KEY),DESCRIPTION_KEY:fn AppProperty(DESCRIPTION_KEY),CALORIES_KEY:fn AppProperty(CALORIES_KEY)}array = (CFMutableArrayRef)fn AppProperty( FOOD_ARRAY_KEY )MutableArrayAddObject( array, dict )AppPropertyRemove( ELEMENT_NAME_KEY )end ifcase _xmlParserDidEndDocumentfn ShowMenuend selectend fnvoid local fn ParseXMLFileAppPropertySet( FOOD_ARRAY_KEY, fn MutableArrayWithCapacity(0) )CFURLRef url = fn BundleURLForResource( fn BundleMain, @"menu", @"xml", NULL )XMLParserRef parser = fn XMLParserWithContentsOfURL( url )XMLParserSetDelegateCallback( parser, @fn MyParserDelegateCallback, NULL )fn XMLParserParse( parser )end fnfn ParseXMLFileHandleEvents