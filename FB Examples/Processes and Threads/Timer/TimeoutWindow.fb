/*  TimeoutWindow*/_mainWnd = 1begin enum 1_showTimeoutWndBtnend enum_timeoutWnd = 2begin enum 1_timeoutLabel_closeTimeoutWndBtnend enumvoid local fn CloseTimeoutWindow( abort as Boolean )TimerRef t = (TimerRef)fn WindowProperty( _timeoutWnd, @"Timer" )TimerInvalidate( t )if ( abort )AppAbortModalelseAppStopModalend ifWindowClose( _timeoutWnd )end fnvoid local fn TimerFired( t as TimerRef )CFMutableDictionaryRef userInfo = (CFMutableDictionaryRef)fn TimerUserInfo( t )long seconds = fn NumberLongValue( fn DictionaryObjectForKey( userInfo, @"Seconds" ) ) - 1if ( seconds == 0 )fn CloseTimeoutWindow( YES )elsetextlabel _timeoutLabel, fn StringWithFormat(@"Window will timeout in %ld seconds.",seconds),, _timeoutWndMutableDictionarySetObjectForKey( userInfo, @(seconds), @"Seconds" )end ifend fnvoid local fn ShowTimeoutWindowwindow _timeoutWnd, @"Timeout Window", (0,0,300,120)WindowSetReleasedWhenClosed( _timeoutWnd, YES )textlabel _timeoutLabel, @"Window will timeout in 7 seconds.", (18,83,264,17)ControlSetAlignment( _timeoutLabel, NSTextAlignmentCenter )button _closeTimeoutWndBtn,,, @"Close", (113,13,75,32)ButtonSetKeyEquivalent( _closeTimeoutWndBtn, @"\r" )CFMutableDictionaryRef userInfo = fn MutableDictionaryWithCapacity(0)MutableDictionarySetObjectForKey( userInfo, @7, @"Seconds" )TimerRef t = fn TimerWithInterval( 1.0, @fn TimerFired, userInfo, YES )WindowPropertySet( _timeoutWnd, @"Timer", t )RunLoopAddTimer( fn RunLoopCurrent, t, NSModalPanelRunLoopMode )fn AppRunModal(_timeoutWnd)end fnvoid local fn BuildMainWindowwindow _mainWnd, @"Main Window", (0,0,480,360), NSWindowStyleMaskTitledbutton _showTimeoutWndBtn,,, @"Show Timeout Window", (151,13,179,32)end fnvoid local fn DoDialog( ev as long, tag as long, wnd as long )select ( ev )case _btnClickselect ( wnd )case _mainWnd    : fn ShowTimeoutWindowcase _timeoutWnd : fn CloseTimeoutWindow( NO )end selectend selectend fnfn BuildMainWindowon dialog fn DoDialogHandleEvents