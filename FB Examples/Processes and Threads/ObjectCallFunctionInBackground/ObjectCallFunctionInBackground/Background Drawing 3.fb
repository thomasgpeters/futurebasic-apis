/*  Background Drawing 3  Bernie Wylde 20180712*/_drawingWnd = 1_controlPanel = 2begin enum 1_drawBtnend enumbegin globalsCFMutableArrayRef gPathsend globalsvoid local fn ViewDrawCFArrayRef      pathsBezierPathRef   pathwindow output _drawingWndif ( gPaths )// fast enumerate a 'copy' of gPaths because gPaths may still be changingpaths = fn ObjectCopy(gPaths)for path in pathsBezierPathStroke( path )nextend ifend fnvoid local fn Finishedbutton _drawBtn, YES,,,,,, _controlPanelend fnvoid local fn TriggerRedrawif ( fn WindowExists(_drawingWnd) )window output _drawingWndViewSetNeedsDisplay( _windowContentViewTag )end ifend fnvoid local fn AddPath( array as CFMutableArrayRef )CGPoint pt1 = {rnd(600),rnd(600)}CGPoint pt2 = {rnd(600),rnd(600)}CGFloat stroke = rnd(3)BezierPathRef path = fn BezierPathInitBezierPathMoveToPoint( path, pt1 )BezierPathLineToPoint( path, pt2 )BezierPathSetLineWidth( path, stroke )MutableArrayAddObject( array, path )end fnvoid local fn BackgroundFunction( array as CFMutableArrayRef )long   ifor i = 0 to 200delay 15// slow things down a bit so we can see it workingfn AddPath( array )ObjectCallFunctionOnMainThread( @fn TriggerRedraw, NULL, YES )next iObjectCallFunctionOnMainThread( @fn Finished, NULL, YES )end fnvoid local fn StartDrawingbutton _drawBtn, NOgPaths = fn CFArrayCreateMutable( _kCFAllocatorDefault, 0, @kCFTypeArrayCallBacks )ObjectCallFunctionInBackground( @fn BackgroundFunction, gPaths )end fnvoid local fn BuildWindowswindow _drawingWnd, @"Background Drawing", (0,0,600,600)WindowSubclassContentView(_drawingWnd)ViewSetFlipped( _windowContentViewTag, YES )CGRect r = fn WindowContentRectForFrameRect( _drawingWnd, fn WindowFrame( _drawingWnd ) )r = fn CGRectMake(r.origin.x-170,r.origin.y+r.size.height-150,150,150)panel _controlPanel, @"Control", r, NSWindowStyleMaskTitled + NSWindowStyleMaskUtilityWindowbutton _drawBtn,,, @"Draw", (40,60,70,28)ControlSetSize( _drawBtn, NSControlSizeSmall )WindowAddChildWindow( _drawingWnd, _controlPanel, NSWindowAbove )end fnvoid local fn DoDialog( ev as long, tag as long, wnd as long )select ( ev )case _btnClickselect ( wnd )case _controlPanelselect ( tag )case _drawBtn : fn StartDrawingend selectend selectcase _viewDrawRect : fn ViewDrawend selectend fnfn BuildWindowson dialog fn DoDialogHandleEvents