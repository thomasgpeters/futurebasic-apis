/*  Simple Background Thread 3  Bernie Wylde 20180306*/include "NSLog.incl"_doSomethingPanel = 1_progBar = 1_mainWindow = 2_beepBtn = 1void local fn FinishedDoingSomethingWindowClose(_doSomethingPanel)NSLog(@"Finished doing something")beepend fnvoid local fn UpdateProgIndicatorif ( fn WindowExists(_doSomethingPanel) )// in case the user has closed the windowwindow output _doSomethingPanel// ensure calls go to the correct widget windowProgressIndicatorIncrementBy( _progBar, 1.0 )end ifend fnvoid local fn DoSomethinglong ifor i = 0 to 100delay 20ObjectCallFunctionOnMainThread( @fn UpdateProgIndicator, NULL, YES )// UI elements should be manipulated on main threadnext iObjectCallFunctionOnMainThread( @fn FinishedDoingSomething, NULL, YES )end fnvoid local fn BuildDoSomethingPanelpanel _doSomethingPanel, @"Doing something in background", (0,0,400,58)progressbar _progBar,, (20,19,360,20)ObjectCallFunctionInBackground( @fn DoSomething, NULL )end fnvoid local fn BuildMainWindowwindow _mainWindow, @"Main Window", (0,0,550,400)button _beepBtn,,, @"Beep"end fnvoid local fn DoAppEvent( ev as long )select ( ev )case _appWillFinishLaunchingfn BuildDoSomethingPanelfn BuildMainWindowend selectend fnvoid local fn DoDialog( ev as long, tag as long )select ( ev )case _btnClickselect ( tag )case _beepBtn : beepend selectend selectend fnon AppEvent fn DoAppEventon dialog fn DoDialogHandleEvents