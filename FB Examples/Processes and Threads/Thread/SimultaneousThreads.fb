/*  Ken Shmidheiser  20231216*/output file "Simultaneous Threads"include "NSLog.incl"_window = 1begin enum 1_label1_label2_label3_startBtnend enumvoid local fn BuildWindowCGRect r = fn CGRectMake( 0, 0, 480, 160 )window _window, @"Simultaneous Threads", r, NSWindowStyleMaskTitled + NSWindowStyleMaskClosable + NSWindowStyleMaskMiniaturizableWindowSetBackgroundColor( _window, fn ColorWithRGB( 0.166, 0.166, 0.166, 1.0 ) )r = fn CGRectMake( 20, 90, 200, 36 )textlabel _label1,, r,_windowControlSetFontWithName( _label1, @"Menlo", 16.0 )TextFieldSetTextColor( _label1, fn ColorRed )r = fn CGRectMake( 240, 90, 200, 36 )textlabel _label2,, r, _windowControlSetFontWithName( _label2, @"Menlo", 16.0 )TextFieldSetTextColor( _label2, fn ColorYellow )r = fn CGRectMake( 20, 50, 200, 36 )textlabel _label3,, r, _windowControlSetFontWithName( _label3, @"Menlo", 16.0 )TextFieldSetTextColor( _label3, fn ColorWhite)r = fn CGRectMake( 340, 13, 120, 32 )button _startBtn,,, @"Start threads", rend fnlocal fn CounterOneThreadlong ifor i = 2 to 60 step 2dispatchmainControlSetStringValue( _label1, fn StringWithFormat( @"Thread One: %ld", i ) )dispatchenddelay 1000nextend fnvoid local fn CounterTwoThreadlong ifor i = 1 to 20dispatchmainControlSetStringValue( _label2,  fn StringWithFormat( @"Thread Two: %ld", i ) )dispatchenddelay 1000nextend fnvoid local fn CounterThreeThreadlong ifor i = 1 to 10dispatchmainControlSetStringValue( _label3,  fn StringWithFormat( @"Thread Three: %ld", i ) )dispatchenddelay 1000nextend fnvoid local fn ThreadNotification( ref as NotificationRef )static BOOL threadOneFinished = NO, threadTwoFinished = NOif ( fn StringIsEqual( fn NotificationName( ref ), NSThreadWillExitNotification ) )ThreadRef thread = fn NotificationObject( ref )if ( fn StringIsEqual( fn ThreadName( thread ), @"Thread 1" ) )NSLog( @"%@ has finished executing", fn ThreadName( thread ) )threadOneFinished = YESend ifif ( fn StringIsEqual( fn ThreadName( thread ), @"Thread 2" ) )NSLog( @"%@ has finished executing", fn ThreadName( thread ) )threadTwoFinished = YESend ifif ( fn StringIsEqual( fn ThreadName( thread ), @"Thread 3" ) )NSLog( @"%@ has finished executing", fn ThreadName( thread ) )button _startBtn, YESend ifif threadOneFinished == YES & threadTwoFinished = YESThreadStart( fn AppProperty( @"Thread3" ) )threadOneFinished = NO : threadTwoFinished = NOend ifend ifend fnvoid local fn ResetNotificationCenterRemoveObserver( @fn ThreadNotification, NSThreadWillExitNotification )NSLogClearControlSetStringValue( _label1, @"" )ControlSetStringValue( _label2, @"" )ControlSetStringValue( _label3, @"" )button _startBtn, NOend fnvoid local fn StartThreadsfn ResetThreadRef threadOne = fn ThreadWithCallback( @fn CounterOneThread, NULL )ThreadSetName( threadOne, @"Thread 1" )ThreadRef threadTwo = fn ThreadWithCallback( @fn CounterTwoThread, NULL )ThreadSetName( threadTwo, @"Thread 2" )ThreadRef threadThree = fn ThreadWithCallback( @fn CounterThreeThread, NULL )ThreadSetName( threadThree, @"Thread 3" )AppPropertySet( @"Thread3", threadThree )NotificationCenterAddObserver( @fn ThreadNotification, NSThreadWillExitNotification, NULL )ThreadStart( threadOne )ThreadStart( threadTwo )end fnvoid local fn DoDialog( ev as long, tag as long, wnd as long )select ( ev )case _btnClickselect ( tag )case _startBtn    : fn StartThreadsend selectcase _windowWillClose : endend selectend fnon dialog fn DoDialogfn BuildWindowHandleEvents