/*  OperationQueue2  Bernie Wylde 20180306*/include "NSLog.incl"_readDataWindow = 1_progBar = 1_mainWindow = 2_beepBtn = 1void local fn FinishedReadingDataNSLog(@"Finished reading data")WindowClose(_readDataWindow)end fnvoid local fn UpdateProgBarif ( fn WindowExists(_readDataWindow) )// in case the user has closed the windowwindow output _readDataWindow// ensure calls go to the correct widgetProgressIndicatorIncrementBy( _progBar, 1.0 )end ifend fnvoid local fn ReadDataFromDisklong ifor i = 0 to 100delay 50OperationQueueAddOperationWithCallback( fn OperationQueueMain, @fn UpdateProgBar, NULL )next iOperationQueueAddOperationWithCallback( fn OperationQueueMain, @fn FinishedReadingData, NULL )end fnvoid local fn BuildReadDataWindowwindow _readDataWindow, @"Loading Data", (0,0,400,58)progressbar _progBar,, (20,19,360,20)ptr queue = fn OperationQueueInitOperationQueueAddOperationWithCallback( queue, @fn ReadDataFromDisk, NULL )end fnvoid local fn BuildMainWindowwindow _mainWindow, @"Main Window", (0,400,550,400)button _beepBtn,,, @"Beep"end fnvoid local fn DoAppEvent( ev as long )select ( ev )case _appWillFinishLaunchingfn BuildMainWindowfn BuildReadDataWindowend selectend fnvoid local fn DoDialog( ev as long, tag as long )select ( ev )case _btnClickselect ( tag )case _beepBtn : NSLog(@"beep!")end selectend selectend fnon AppEvent fn DoAppEventon dialog fn DoDialogHandleEvents