void local fn DoActivityAlong ifor i = 1 to 10print idelay 200nextprint @"Activity A finished"printend fnvoid local fn DoActivityBlong ifor i = 10 to 0 step -1print idelay 200nextprint @"Activity B finished"printend fnvoid local fn DoActivityClong ifor i = 2 to 20 step 2print idelay 200nextprint @"Activity C finished"print @"\nAll done"end fnvoid local fn DoItwindow 1,, (0,0,400,650)print @"Running...\n"BlockOperationRef a = fn BlockOperationWithCallback( @fn DoActivityA, NULL )  // Create operations using callback functionsBlockOperationRef b = fn BlockOperationWithCallback( @fn DoActivityB, NULL )BlockOperationRef c = fn BlockOperationWithCallback( @fn DoActivityC, NULL )OperationQueueRef q = fn OperationQueueInit           // Initialize queue to hold multiple operationsOperationQueueSetMaxConcurrentOperationCount( q, 1 )  // Setting maximum concurrency to 1 will cause the operations to run sequentiallyOperationQueueAddOperations( q, @[a,b,c], NO )        // Queue up an array of operations, and run them.end fnfn DoItHandleEvents