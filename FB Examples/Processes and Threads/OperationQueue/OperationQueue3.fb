/*  OperationQueue3  Bernie Wylde 20180817*/include "NSLog.incl"_window = 1begin enum 1_progBar_infoLabel_segCtrlend enumbegin enum_playSeg_pauseSeg_stopSegend enumbegin globalsOperationQueueRef   gQend globalsvoid local fn Finished( queue as OperationQueueRef, obj as CFTypeRef )textlabel _infoLabel, objSegmentedControlSetSegmentEnabled( _segCtrl, _playSeg, YES )SegmentedControlSetSegmentEnabled( _segCtrl, _pauseSeg, NO )SegmentedControlSetSegmentEnabled( _segCtrl, _stopSeg, NO )gQ = NULLend fnvoid local fn UpdateProgBarif ( fn WindowExists( _window ) )window output _windowProgressIndicatorIncrementBy( _progBar, 1.0 )end ifend fnvoid local fn BackgroundFunctionBOOL          suspended, cancelledCFStringRef   messagemessage = @"Finished"OperationQueueRef q = fn OperationQueueCurrentCFArrayRef operations = fn OperationQueueOperations( q )OperationRef op = fn ArrayObjectAtIndex( operations, 0 )long i = 0while ( i <= 100 )suspended = fn OperationQueueIsSuspended( q )cancelled = fn OperationIsCancelled( op )if ( cancelled )message = @"Stopped"exit whileend ifif ( suspended == NO )delay 50OperationQueueAddOperationWithCallback( fn OperationQueueMain, @fn UpdateProgBar, NULL )i++end ifwendOperationQueueAddOperationWithCallback( fn OperationQueueMain, @fn Finished, message )end fnvoid local fn SegmentedControlActionBOOL           pausedCFArrayRef     operationsOperationRef   opselect ( fn SegmentedControlSelectedSegment( _segCtrl ) )case _playSegtextlabel _infoLabel, @""SegmentedControlSetSegmentEnabled( _segCtrl, _playSeg, NO )SegmentedControlSetSegmentEnabled( _segCtrl, _pauseSeg, YES )SegmentedControlSetSegmentEnabled( _segCtrl, _stopSeg, YES )progressbar _progBar,0gQ = fn OperationQueueInitOperationQueueAddOperationWithCallback( gQ, @fn BackgroundFunction, NULL )case _pauseSegpaused = ( fn OperationQueueIsSuspended(gQ) == NO )if ( paused )textlabel _infoLabel, @"Paused"elsetextlabel _infoLabel, @"Resumed"end ifOperationQueueSetSuspended( gQ, paused )case _stopSegoperations = fn OperationQueueOperations( gQ )op = fn ArrayObjectAtIndex( operations, 0 )OperationCancel( op )end selectend fnvoid local fn BuildMainWindowwindow _window, @"OperationQueue pause/stop", (0,0,400,116), NSWindowStyleMaskTitledprogressbar _progBar,, (20,77,360,20)ProgressIndicatorSetUsesThreadedAnimation( _progBar, NO )// fix cosmetic on Big Sur and abovetextlabel _infoLabel, @"", (20,53,362,17)ControlSetAlignment( _infoLabel, NSTextAlignmentCenter )segmentedcontrol _segCtrl,,, (149,18,103,24), 3SegmentedControlSetTrackingMode( _segCtrl, NSSegmentSwitchTrackingMomentary )SegmentedControlSetSegment( _segCtrl, _playSeg, YES, NULL, fn ImageNamed(@"NSTouchBarPlayTemplate"), 0, 32 )SegmentedControlSetSegment( _segCtrl, _pauseSeg, NO, NULL, fn ImageNamed(@"NSTouchBarPauseTemplate"), 0, 32 )SegmentedControlSetSegment( _segCtrl, _stopSeg, NO, NULL, fn ImageNamed(@"NSTouchBarRecordStopTemplate"), 0, 32 )ControlSetActionCallback( _segCtrl, @fn SegmentedControlAction, NULL )ViewSetToolTip( _segCtrl, @"Start, pause, resume, stop thread" )SegmentedControlSetSegmentToolTip( _segCtrl, _playSeg, @"Start thread" )// macOS 10.13+SegmentedControlSetSegmentToolTip( _segCtrl, _pauseSeg, @"Pause/Resume thread" )// macOS 10.13+SegmentedControlSetSegmentToolTip( _segCtrl, _stopSeg, @"Stop thread" )// macOS 10.13+end fnfn BuildMainWindowHandleEvents