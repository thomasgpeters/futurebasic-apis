/*  ApplePressAndHoldEnable  1. Stores the original state at app launch  2. Set new desired state (e.g. NO to disable press-and-hold)  3. Restore original state on app terminate or resign active*/_mEdit = 1_window = 1begin enum 1_scrollView_textViewend enumvoid local fn ApplePressAndHoldEnable( enable as BOOL )// store original stateCFStringRef yn = ( intval(unix @"defaults read -g ApplePressAndHoldEnabled") == 1 ) ? @"YES" : @"NO"AppPropertySet( @"ApplePressAndHold", yn )// set stateyn = ( enable == YES ) ? @"YES" : @"NO"unix fn StringWithFormat( @"defaults write -g ApplePressAndHoldEnabled -bool %@",yn )end fnvoid local fn ApplePressAndHoldRestorestatic BOOL restored// restore state only needs to be called once during the life of this appif ( !restored ) then unix fn StringWithFormat( @"defaults write -g ApplePressAndHoldEnabled -bool %@",fn AppProperty( @"ApplePressAndHold" ) )restored = YESend fnvoid local fn BuildUIeditmenu _mEditwindow _window, @"ApplePressAndHoldEnable", (0,0,550,400), NSWindowStyleMaskTitled | NSWindowStyleMaskClosablescrollview _scrollView, (0,0,550,400)textview _textView,, _scrollViewTextSetString( _textView, @"TextView" )WindowMakeFirstResponder( _window, _textView )end fnvoid local fn DoAppEvent( ev as long )select ( ev )case _appWillFinishLaunchingfn ApplePressAndHoldEnable( NO )fn BuildUIcase _appWillTerminate, _appWillResignActive  : fn ApplePressAndHoldRestorecase _appShouldTerminateAfterLastWindowClosed : AppEventSetBool( YES )end selectend fnon appevent fn DoAppEventHandleEvents