/*  Taken from 'Button Demo' by Ken Shmidheiser, January 17, 2008*/_mApplication = 0begin enum 2_iPreferencesend enum_mColor = 2begin enum_iBlack_iBrown_iRed_iOrange_iYellow_iGreen_iBlue_iViolet_iGray_iWhiteend enum_window = 1begin enum 1_popupBtn_colorWell_textFld_blackPush = 11_brownPush_redPush_orangePush_yellowPush_greenPush_bluePush_violetPush_grayPush_whitePush_blackRadio = 21_brownRadio_redRadio_orangeRadio_yellowRadio_greenRadio_blueRadio_violetRadio_grayRadio_whiteRadioend enumvoid local fn SetColorWellColor( index as NSInteger )CGFloat   r = 0.0, g = 0.0, b = 0.0select ( index )case 1 : r = 153.0/255 : g = 102.0/255 : b = 51.0/255case 2 : r = 1.0case 3 : r = 1.0 : g = 0.5case 4 : r = 1.0 : g = 1.0case 5 : g = 1.0case 6 : b = 1.0case 7 : r = 238.0/255 : g = 130.0/255 : b = 238.0/255case 8 : r = 0.5 : g = 0.5 : b = 0.5case 9 : r = 1.0 : g = 1.0 : b = 1.0case elseend selectColorRef col = fn ColorWithRGB( r, g, b, 1.0 )colorwell _colorWell,, colend fnvoid local fn SetButtonsAndMenu( index as NSInteger )popupbutton _popupBtn,, indexbutton _blackRadio + index,, NSControlStateValueOnfn SetColorWellColor( index )textfield _textFld,, fn PopUpButtonTitleOfSelectedItem( _popupBtn )MenuSelectItem( _mColor, index )end fnvoid local fn LoadNibnibmenu @"MainMenu"nibwindow 1, @"MainMenu", @"Window"// restore previously selected colorNSInteger index = fn UserDefaultsInteger( @"ColorIndex" )ButtonPerformClick( _blackPush + index )end fnvoid local fn DoAppEvent( ev as long )select (ev)case _appDidFinishLaunchingfn LoadNibcase _appShouldTerminateAfterLastWindowClosedAppEventSetBool(YES)end selectend fnvoid local fn DoMenu( menuID as long, itemID as long )select (menuID)case _mApplicationselect (itemID)case _iPreferencesalert 1,, @"Preferences", @"There are no preferences for this app."end selectcase _mColorButtonPerformClick( itemID + _blackPush )end selectend fnvoid local fn DoDialog( ev as long, tag as long )select ( ev )case _btnClickselect ( tag )case _popupBtnButtonPerformClick( _blackPush + fn PopUpButtonIndexOfSelectedItem( tag ) )case _blackPush, _brownPush, _redPush, _orangePush, _yellowPush, _greenPush, _bluePush, _violetPush, _grayPush, _whitePushfn SetButtonsAndMenu( tag - _blackPush )case _blackRadio, _brownRadio, _redRadio, _orangeRadio, _yellowRadio, _greenRadio, _blueRadio, _violetRadio, _grayRadio, _whiteRadioButtonPerformClick( _blackPush + (tag - _blackRadio) )end selectcase _windowWillCloseUserDefaultsSetInteger( @"ColorIndex", fn PopUpButtonIndexOfSelectedItem(_popupBtn) )end selectend fnon AppEvent fn DoAppEventon menu fn DoMenuon dialog fn DoDialogHandleEvents