// FutureBasic 7 Customer Information Appinclude "NSLog.incl"// Window ID_mainWindow = 1// Control IDs using enumbegin enum 1_nameLabel_nameField_addressLabel_addressField_cityLabel_cityField_stateLabel_stateField_zipLabel_zipField_accountLabel_accountField_saveButton_clearButtonend enum// Menu IDsbegin enum_mApplication_mFile_mEdit_mCustomersend enum// Application menu itemsbegin enum_iAbout_iSeparator_iPreferencesend enum// File menu itemsbegin enum_iNew_iOpen_iSave_iSeparator2_iCloseend enum// Customer menu itemsbegin enum_iSearch_iAdd_iDeleteend enumvoid local fn BuildMenu// Application menumenu _mApplication, _iAbout,, @"About Customer Info App"menu _mApplication, _iSeparatormenu _mApplication, _iPreferences,, @"Preferences…", @","// File menumenu _mFile, -1,, @"File"menu _mFile, _iNew,, @"New", @"n"menu _mFile, _iOpen,, @"Open…", @"o"menu _mFile, _iSave,, @"Save", @"s"menu _mFile, _iSeparator2menu _mFile, _iClose,, @"Close", @"w"MenuItemSetAction(_mFile, _iClose, @"performClose:")// Edit menueditmenu _mEdit// Customers menumenu _mCustomers, -1,, @"Customers"menu _mCustomers, _iSearch,, @"Search Customer", @"f"menu _mCustomers, _iAdd,, @"Add New Customer", @"+"menu _mCustomers, _iDelete,, @"Delete Customer", @"-"end fnvoid local fn BuildWindow// Main windowCGRect r = (0, 0, 450, 300)window _mainWindow, @"Customer Information", r, NSWindowStyleMaskTitled + NSWindowStyleMaskClosable + NSWindowStyleMaskMiniaturizableWindowSetFrameUsingName(_mainWindow, @"CustomerInfoWindow")// Y-coordinate for starting layout from topCGFloat y = 260CGFloat labelWidth = 100CGFloat fieldWidth = 280CGFloat fieldHeight = 22CGFloat verticalGap = 36// Name fieldsr = fn CGRectMake(20, y, labelWidth, fieldHeight)textlabel _nameLabel, @"Name:", rr = fn CGRectMake(130, y, fieldWidth, fieldHeight)textfield _nameField,,, ry -= verticalGap// Address fieldsr = fn CGRectMake(20, y, labelWidth, fieldHeight)textlabel _addressLabel, @"Address:", rr = fn CGRectMake(130, y, fieldWidth, fieldHeight)textfield _addressField,,, ry -= verticalGap// City fieldsr = fn CGRectMake(20, y, labelWidth, fieldHeight)textlabel _cityLabel, @"City:", rr = fn CGRectMake(130, y, fieldWidth, fieldHeight)textfield _cityField,,, ry -= verticalGap// State fieldsr = fn CGRectMake(20, y, labelWidth, fieldHeight)textlabel _stateLabel, @"State:", rr = fn CGRectMake(130, y, 60, fieldHeight)textfield _stateField,,, r// Zip fields (on same line as State)r = fn CGRectMake(230, y, 60, fieldHeight)textlabel _zipLabel, @"Zip:", rr = fn CGRectMake(290, y, 120, fieldHeight)textfield _zipField,,, ry -= verticalGap// Account Number fieldsr = fn CGRectMake(20, y, labelWidth, fieldHeight)textlabel _accountLabel, @"Account #:", rr = fn CGRectMake(130, y, fieldWidth, fieldHeight)textfield _accountField,,, ry -= 60// Buttons at the bottomr = fn CGRectMake(130, y, 100, 30)button _saveButton,,, @"Save", rr = fn CGRectMake(250, y, 100, 30)button _clearButton,,, @"Clear", rend fnvoid local fn ClearFieldstextfield _nameField,, @""textfield _addressField,, @""textfield _cityField,, @""textfield _stateField,, @""textfield _zipField,, @""textfield _accountField,, @""end fnvoid local fn SaveCustomerInfo// In a real app, this would store the data// For now, just show feedback in a dialogCFStringRef name = fn ControlStringValue(_nameField)CFStringRef account = fn ControlStringValue(_accountField)CFStringRef message = fn StringWithFormat(@"Customer information for %@ (Account: %@) has been saved.", name, account)alert _mainWindow,, @"Information Saved", messageend fnvoid local fn DoDialog(ev as long, tag as long, wnd as long)select case (ev)case _btnClickselect case (tag)case _saveButtonfn SaveCustomerInfocase _clearButtonfn ClearFieldsend selectcase _windowWillClose// Could save state or confirm close here if neededend selectend fnvoid local fn DoMenu(menuID as long, itemID as long)select case (menuID)case _mApplicationselect case (itemID)case _iAboutalert _mainWindow,, @"About Customer Info App", @"Customer Information App v1.0\nCreated with FutureBasic 7"case _iPreferencesalert _mainWindow,, @"Preferences", @"Preferences are not implemented in this demo."end selectcase _mFileselect case (itemID)case _iNewfn ClearFieldscase _iOpenalert _mainWindow,, @"Open Customer", @"Open functionality is not implemented in this demo."case _iSavefn SaveCustomerInfocase _iClose// Window will handle close via performClose actionend selectcase _mCustomersselect case (itemID)case _iSearchalert _mainWindow,, @"Search", @"Search functionality is not implemented in this demo."case _iAddfn ClearFieldsalert _mainWindow,, @"New Customer", @"Enter information for the new customer."case _iDeletealert _mainWindow,, @"Delete Customer", @"Delete functionality is not implemented in this demo."end selectend selectend fnvoid local fn DoAppEvent(ev as long)select case (ev)case _appWillFinishLaunchingNSLog(@"_appWillFinishLaunching")fn BuildMenufn BuildWindowcase _appShouldTerminateAfterLastWindowClosedAppEventSetBool(YES)end selectend fn// Just to ensure the window opens, also call these directlyfn BuildMenufn BuildWindow// Register event handlerson appevent fn DoAppEventon menu fn DoMenuon dialog fn DoDialog// Start event handlingHandleEvents