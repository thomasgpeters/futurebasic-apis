/*  TextViewFontResizer  Ken Shmidheiser*/_window = 1begin enum output 1_scrollView_textview_sizeSlider_sizeLabelend enumvoid local fn ResizeFont( aString as CFMutableAttributedStringRef, value as FontRef, range as CFRange, stp as ^BOOL, userData as ptr )FontRef   fontfont = fn FontManagerConvertFontToSize( value, fn NumberLongValue(userData) )if ( font )MutableAttributedStringAddAttributeInRange( aString, NSFontAttributeName, font, range )end ifend fnvoid local fn ChangeTextViewFontSize( tag as NSInteger, newFontSize as long )CFMutableAttributedStringRef   aStringCFRange                        rangeaString = fn TextViewMutableAttributedString( tag )MutableAttributedStringBeginEditing( aString )range = fn CFRangeMake( 0, fn AttributedStringLength( aString ) )AttributedStringEnumerateAttributeInRange( aString, NSFontAttributeName, range, 0, @fn ResizeFont, (ptr)@(newFontSize) )MutableAttributedStringEndEditing( aString )end fnvoid local fn MakeTextCFMutableAttributedStringRef   aStringaString = fn TextViewMutableAttributedString( _textView )MutableAttributedStringSetString( aString, @"You can change the font size of this text string with the slider below." )MutableAttributedStringBeginEditing( aString )MutableAttributedStringSetFontWithNameInRange( aString, @"Arial", 20.0, fn CFRangeMake( 0, fn AttributedStringLength( aString ) ) )MutableAttributedStringSetFontWithNameInRange( aString, @"Times Bold", 20.0, fn CFRangeMake( 0, 4 ) )MutableAttributedStringSetForegroundColorInRange( aString, fn ColorRed,     fn CFRangeMake(  0,  4 ) )MutableAttributedStringSetFontWithNameInRange( aString, @"Georgia", 20.0, fn CFRangeMake( 4, 3 ) )MutableAttributedStringSetForegroundColorInRange( aString, fn ColorGreen,   fn CFRangeMake(  4,  3 ) )MutableAttributedStringSetFontWithNameInRange( aString, @"Helvetica", 20.0, fn CFRangeMake( 8, 6 ) )MutableAttributedStringSetForegroundColorInRange( aString, fn ColorBlue,    fn CFRangeMake(  8,  6 ) )MutableAttributedStringSetFontWithNameInRange( aString, @"Arial Black", 20.0, fn CFRangeMake( 15, 8 ) )MutableAttributedStringSetForegroundColorInRange( aString, fn ColorOrange,  fn CFRangeMake( 15,  8 ) )MutableAttributedStringSetFontWithNameInRange( aString, @"Times Italic", 20.0, fn CFRangeMake( 23, 9 ) )MutableAttributedStringSetForegroundColorInRange( aString, fn ColorPurple,  fn CFRangeMake( 23,  9 ) )MutableAttributedStringSetFontWithNameInRange( aString, @"Courier", 20.0, fn CFRangeMake( 32, 9 ) )MutableAttributedStringSetForegroundColorInRange( aString, fn ColorBrown,   fn CFRangeMake( 32,  9 ) )MutableAttributedStringSetFontWithNameInRange( aString, @"Arial Italic", 20.0, fn CFRangeMake( 42, 11 ) )MutableAttributedStringSetForegroundColorInRange( aString, fn ColorCyan,    fn CFRangeMake( 42, 11 ) )MutableAttributedStringSetFontWithNameInRange( aString, @"Times Bold", 20.0, fn CFRangeMake( 54, 10 ) )MutableAttributedStringSetForegroundColorInRange( aString, fn ColorMagenta, fn CFRangeMake( 54, 10 ) )MutableAttributedStringEndEditing( aString )end fnvoid local fn BuildWindowNSInteger   wndStyleMaskCGRect      rwndStyleMask  = NSWindowStyleMaskTitledwndStyleMask += NSWindowStyleMaskClosablewndStyleMask += NSWindowStyleMaskMiniaturizabler = fn CGRectMake( 0, 0, 366, 471 )window _window, @"TextView Font Size", r, wndStyleMaskr = fn CGRectMake( 20, 67, 326, 384 )scrollview _scrollView, r, NSBezelBordertextview _textView,, _scrollViewTextViewSetTextContainerInset( _textView, fn CGSizeMake( 8, 8 ) )fn MakeTextr = fn CGRectMake( 18, 38, 330, 19 )slider _sizeSlider,, 20, r, 6, 48ControlSetContinuous( _sizeSlider, YES )r = fn CGRectMake( 165, 20, 36, 16 )textlabel _sizeLabel, @"20", rControlSetAlignment( _sizeLabel, NSTextAlignmentCenter )WindowMakeFirstResponder( _window, _textView )end fnvoid local fn DoDialog( ev as long, tag as long )long   sizeselect (ev)case _btnClickselect (tag)case _sizeSlidersize = fn ControlIntegerValue( tag )ControlSetStringValue( _sizeLabel, fn StringWithFormat( @"%ld", size ) )fn ChangeTextViewFontSize( _textView, size )end selectcase _windowWillClose : endend selectend fnon dialog fn DoDialogeditmenu 1fn BuildWindowHandleEvents