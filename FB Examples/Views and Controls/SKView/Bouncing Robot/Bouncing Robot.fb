/*  Bouncing Robot SpriteKit Demo  Demonstrates some basic SpriteKit concepts in CocoaUI, including chaining actions.  The SpriteKit function is heavily commented to help you follow the logic.  Note: PNG image must have transparent background.      A 150x246 image Robot.png accompanies this demo.  Ken Shmidheiser  16 March 2020  macOS 10.12+*/include "Tlbx SpriteKit.incl"include resources "Robot.png"_window = 1begin enum output 1_skView_playBtnend enumvoid local fn BuildWindowlong   wndStyleMaskCGRect rwndStyleMask  = NSWindowStyleMaskTitledwndStyleMask += NSWindowStyleMaskClosablewndStyleMask += NSWindowStyleMaskMiniaturizabler = fn CGRectMake( 0, 0, 600, 500 )window _window, @"SpriteKit Demo", r, wndStyleMaskWindowSetBackgroundColor( _window, fn ColorBlack )r = fn CGRectMake( 0, 50, 600, 450 )skview _skView, r, _windowSKViewSetShowsDrawCount( _skView, YES )SKViewSetShowsFPS( _skView, YES )SKViewSetShowsNodeCount( _skView, YES )r = fn CGRectMake( 485, 15, 100, 24 )button _playBtn, YES, , @"Play again", r, NSButtonTypeMomentaryLight, NSBezelStyleSmallSquare, _windowButtonSetBordered( _playBtn, NO )ButtonSetBackgroundColor( _playBtn, fn ColorDarkGray )ButtonSetTitleColor( _playBtn, fn ColorWhite )end fnvoid local fn ShowPlayButtonOnCompletionbutton _playBtn, YESend fnvoid local fn RunRobotSKSceneRef       sceneSKSpriteNodeRef  spriteSKActionRef      action, reverse, fade, combined// Create scene size of _skViewscene = fn SKSceneWithSize( fn CGSizeMake( 600, 450 ) )// Create sprite from PNG image named "Robot.png" with transparent backgroundsprite = fn SKSpriteNodeWithImageNamed( @"Robot" )// Set Robot image positon on sceneSKNodeSetPosition( sprite, fn CGPointMake( 80, 320 ) )// First action is to move Robot image by x/y coordinates in four stepsaction = fn SKActionMoveByXY( 220.0, -82.0, 2 )// Scale everything to fitSKSceneSetScaleMode( scene, SKSceneScaleModeAspectFit )// Load scene into _skViewSKViewPresentScene( _skView, scene )// Second action is to reverse, or run the first action backwardsreverse = fn SKActionReverseAction( action )// Third action is to fade out Robot sprite at end of actionfade = fn SKActionFadeOut( 2 )// Fourth action is to create an array using first, second and third actions and chain them together as a combined actioncombined = fn SKActionSequence( @[action, reverse, action, reverse, fade] )// Disable the play buttonbutton _playBtn, NO// Run the combined action twiceSKNodeRunAction( sprite, fn SKActionRepeatAction( combined, 1 ) )// Add sprite to the sceneSKNodeAddChild( scene, sprite )// When action is complete, call function to enable play buttonSKNodeRunActionCompletion( sprite, combined, @fn ShowPlayButtonOnCompletion, NULL )end fnvoid local fn DoDialog( ev as long, tag as long, wnd as long )select (ev)case _btnClickselect (tag)case _playBtn : fn RunRobotend selectcase _windowWillClose : endend selectend fnon dialog fn DoDialogfn BuildWindowfn RunRobotHandleEvents