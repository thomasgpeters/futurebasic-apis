/*  SpriteKit Animation Demo  Demonstrates basic SpriteKit animation concepts in CocoaUI:  -- Sequencing actions  -- In and out fades  -- Applying image to node as texture  -- Using callback functions at end of operations  Dependency:  Acompanying JPG image of flowers  Ken Shmidheiser  18 March 2020  macOS 10.12+*/output file "SpriteKit Animation"include "Tlbx SpriteKit.incl"include resources "flowers.jpg"_window = 1begin enum output 1_skView_playBtn_quitBtnend enumvoid local fn BuildWindowlong   wndStyleMaskCGRect rwndStyleMask  = NSWindowStyleMaskTitledwndStyleMask += NSWindowStyleMaskClosablewndStyleMask += NSWindowStyleMaskMiniaturizabler = fn CGRectMake( 0, 0, 600, 500 )window _window, @"SpriteKit Animation", r, wndStyleMaskWindowSetBackgroundColor( _window, fn ColorBlack )r = fn CGRectMake( 0, 50, 600, 450 )skview _skView, r, _windowSKViewSetShowsDrawCount( _skView, YES )SKViewSetShowsFPS( _skView, YES )SKViewSetShowsNodeCount( _skView, YES )r = fn CGRectMake( 400, 15, 90, 24 )button _playBtn, YES,, @"Replay", r, NSButtonTypeMomentaryLight, NSBezelStyleSmallSquare, _windowButtonSetBordered( _playBtn, NO )ButtonSetBackgroundColor( _playBtn, fn ColorDarkGray )ButtonSetTitleColor( _playBtn, fn ColorWhite )r = fn CGRectMake( 498, 15, 90, 24 )button _quitBtn, YES,, @"Quit", r, NSButtonTypeMomentaryLight, NSBezelStyleSmallSquare, _windowButtonSetBordered( _quitBtn, NO )ButtonSetBackgroundColor( _quitBtn, fn ColorDarkGray )ButtonSetTitleColor( _quitBtn, fn ColorWhite )end fnlocal fn CreateScene as SKSceneRefSKSceneRef   scenefloat        sceneWidth, sceneHeightsceneWidth  = 600.0sceneHeight = 400.0scene = fn SKSceneWithSize( fn CGSizeMake( sceneWidth, sceneHeight ) )SKSceneSetBackgroundColor( scene, fn ColorBlack )SKSceneSetScaleMode( scene, SKSceneScaleModeAspectFit )SKViewPresentScene( _skView, scene )end fn = scenevoid local fn FadeOut( node as SKNodeRef, action as SKActionRef, userData as ptr )SKActionRef fadeAction, actionSequencefadeAction = fn SKActionFadeAlphaTo( 0.0, 6.0 )actionSequence  = fn SKActionSequence( @[action, fadeAction] )SKNodeRunAction( node, actionSequence )end fnvoid local fn ImageFadeInfloat           sceneWidth, sceneHeightSKShapeNodeRef  nodeSKTextureRef    textureNSUInteger      iSKActionRef     delayAction, scaleUpAction, waitAction, actionSequencesceneWidth  = 600.0sceneHeight = 400.0node = fn SKShapeNodeWithRectOfSize( fn CGSizeMake( 8, 5.5 ) )/*IMPORTANT NOTE:Default fill color for an SKShapeNodeRef is NULL. The shapemust be filled with a color before being filled with a texturecontaining an image. Set color to white to have the imagedisplayed normally. Setting any other color will tint theimage to that color.*/SKShapeNodeSetFillColor( node, fn ColorWhite )SKNodeSetPosition( node, fn CGPointMake( sceneWidth / 2, sceneHeight / 2 ) )texture = fn SKTextureWithImageNamed( @"flowers" )SKShapeNodeSetFillTexture( node, texture )SKShapeNodeSetStrokeColor( node, fn ColorClear )SKNodeAddChild( fn CreateScene, node )// Perform animationfor i = 0 to 22delayAction    = fn SKActionWaitForDuration( i * 0.4 )scaleUpAction  = fn SKActionScaleBy( 1.2, 1.3 )waitAction     = fn SKActionWaitForDuration( 6.0 )actionSequence = fn SKActionSequence( @[delayAction, scaleUpAction, waitAction] )SKNodeRunAction( node, actionSequence )next// Fade out to end animationwaitAction = fn SKActionWaitForDuration( 5.0 )SKNodeRunActionCompletion( node, waitAction, @fn FadeOut, NULL )end fnvoid local fn Terminate( node as SKNodeRef, action as SKActionRef, userData as ptr )endend fnvoid local fn FinishProgramSKLabelNodeRef  nodefloat           sceneWidth, sceneHeightNSUInteger      iSKActionRef     delayAction, scaleDownAction, waitAction, actionSequencesceneWidth  = 600.0sceneHeight = 400.0node = fn SKLabelNodeWithFontNamed( @"Times" )SKLabelNodeSetText( node, @"Thanks for watching!" )SKLabelNodeSetFontSize( node, 62.0 )SKLabelNodeSetFontColor( node, fn ColorYellow )SKNodeSetPosition( node, fn CGPointMake( sceneWidth / 2, sceneHeight / 2 ) )SKNodeAddChild( fn CreateScene, node )for i = 1 to 8delayAction     = fn SKActionWaitForDuration( i * 0.8 )scaleDownAction = fn SKActionScaleBy( -0.3, 1.8 )waitAction      = fn SKActionWaitForDuration( 6.0 )actionSequence  = fn SKActionSequence( @[delayAction, scaleDownAction, waitAction] )SKNodeRunAction( node, actionSequence )nextwaitAction = fn SKActionWaitForDuration( 4.0 )SKNodeRunActionCompletion( node, waitAction, @fn Terminate, NULL )end fnvoid local fn DoDialog( ev as long, tag as long, wnd as long )select (ev)case _btnClickselect (tag)case _playBtn  : fn ImageFadeIncase _quitBtn  : fn FinishProgramend selectcase _windowShouldClose : DialogEventSetBool( NO ) : fn FinishProgramend selectend fnon dialog fn DoDialogfn BuildWindowfn ImageFadeInHandleEvents