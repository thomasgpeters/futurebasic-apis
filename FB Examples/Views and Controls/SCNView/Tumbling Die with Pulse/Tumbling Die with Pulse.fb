/*  Tumbling Die with Pulse  Ken Shmidheiser  October 2022*/include "Tlbx SceneKit.incl"include resources "dice1.png"include resources "dice2.png"include resources "dice3.png"include resources "dice4.png"include resources "dice5.png"include resources "dice6.png"_window = 1begin enum output 1_sceneViewend enumlocal fn Scene as SCNSceneRefSCNSceneRef   scene = fn SCNSceneInitSCNNodeRef rootNode = fn SCNSceneRootNode( scene )SCNCameraRef camera = fn SCNCameraInitSCNNodeRef cameraNode = fn SCNNodeInitSCNNodeSetCamera( cameraNode, camera )SCNNodeAddChildNode( rootNode, cameraNode )SCNVector3 cameraPos = {0.0, 0.0, 15.0}SCNNodeSetPosition( cameraNode, cameraPos )SCNNodeRef lightNode = fn SCNNodeInitSCNLightRef    light = fn SCNLightInitSCNLightSetType( light, SCNLightTypeOmni )SCNNodeSetPosition( lightNode, fn SCNVector3Make( 0.0, 10.0, 10.0 ) )SCNNodeAddChildNode( rootNode, lightNode )SCNNodeRef    ambientLightNode = fn SCNNodeInitSCNLightRef       ambientLight = fn SCNLightInitSCNLightSetType(  ambientLight, SCNLightTypeAmbient )SCNLightSetColor( ambientLight, fn ColorGray )SCNNodeSetLight( ambientLightNode, ambientLight )SCNNodeAddChildNode( rootNode, ambientLightNode )SCNBoxRef  boxGeometry = fn SCNBoxInit( 4.0, 4.0, 4.0, 0.5 )SCNNodeRef boxNode = fn SCNNodeWithGeometry( boxGeometry )SCNMaterialRef dice1 = fn SCNMaterialInitSCNMaterialRef dice2 = fn SCNMaterialInitSCNMaterialRef dice3 = fn SCNMaterialInitSCNMaterialRef dice4 = fn SCNMaterialInitSCNMaterialRef dice5 = fn SCNMaterialInitSCNMaterialRef dice6 = fn SCNMaterialInitSCNMaterialPropertySetContents( fn SCNMaterialMultiply( dice1 ), fn ImageNamed( @"dice1" ) )SCNMaterialPropertySetContents( fn SCNMaterialMultiply( dice2 ), fn ImageNamed( @"dice2" ) )SCNMaterialPropertySetContents( fn SCNMaterialMultiply( dice3 ), fn ImageNamed( @"dice3" ) )SCNMaterialPropertySetContents( fn SCNMaterialMultiply( dice4 ), fn ImageNamed( @"dice4" ) )SCNMaterialPropertySetContents( fn SCNMaterialMultiply( dice5 ), fn ImageNamed( @"dice5" ) )SCNMaterialPropertySetContents( fn SCNMaterialMultiply( dice6 ), fn ImageNamed( @"dice6" ) )SCNGeometrySetMaterials( boxGeometry, @[dice1,dice2,dice6,dice5,dice3,dice4] )SCNNodeAddChildNode( rootNode, boxNode )CGFloat pulseSize = 14.0SCNPlaneRef           pulsePlane = fn SCNPlaneInit( pulseSize, pulseSize )SCNMaterialRef grayPulseMaterial = fn SCNMaterialInitSCNMaterialSetDoubleSided( grayPulseMaterial, YES )SCNMaterialPropertySetContents( fn SCNMaterialDiffuse( grayPulseMaterial ), fn ColorLightGray)SCNMaterialSetTransparency( grayPulseMaterial, 1.0 )SCNGeometrySetMaterials( pulsePlane, @[grayPulseMaterial] )SCNNodeRef pulseNode = fn SCNNodeWithGeometry( pulsePlane )// https://thebookofshaders.com/// https://thebookofshaders.com/glossary/CFArrayRef array = @[@"#pragma transparent;",@"vec4 originalColour = _surface.diffuse;",@"vec4 transformed_position = u_inverseModelTransform * u_inverseViewTransform * vec4(_surface.position, 1.0);",@"vec2 xy = vec2(transformed_position.x, transformed_position.y);",@"float xyLength = length(xy);",fn StringWithFormat(@"float xyLengthNormalised = xyLength/%f;",pulseSize/2.0),@"float speedFactor = 1.5;",@"float maxDist = fmod(u_time, speedFactor) / speedFactor;",@"float distbasedalpha = step(maxDist, xyLengthNormalised);",@"distbasedalpha = max(distbasedalpha, maxDist);",@"_surface.diffuse = mix(originalColour, vec4(0.0), distbasedalpha);"]CFStringRef pulseShaderModifier = fn ArrayComponentsJoinedByString( array, @"\n" )CFDictionaryRef smdict = fn DictionaryWithObject( pulseShaderModifier, SCNShaderModifierEntryPointSurface )SCNShadableSetShaderModifiers( grayPulseMaterial, smdict )SCNNodeAddChildNode( boxNode, pulseNode )SCNLookAtConstraintRef pulseNodeConstraint = fn SCNLookAtConstraintInit( cameraNode )CFArrayRef constraints = fn ArrayWithObject( pulseNodeConstraint )SCNNodeSetConstraints( pulseNode, constraints )SCNActionRef boxAnimation = fn SCNActionRotateByXYZ( 3.0, 2.0, 2.0, 2.5 )boxAnimation = fn SCNActionRepeatActionForever( boxAnimation )SCNActionableRunAction( boxNode, boxAnimation )end fn = scenevoid local fn BuildWindowwindow _window, @"Tumbling Die with Pulse", ( 0, 0, 600, 600 )scnview _sceneView, fn Scene, ( 0, 0, 600, 600 )SCNViewSetBackgroundColor( _sceneView, fn ColorBlack )SCNViewSetAllowsCameraControl( _sceneView, YES )end fnvoid local fn DoDialog( ev as long, tag as long, wnd as long )select (ev)case _windowWillClose : endend selectend fnon dialog fn DoDialogfn BuildWindowHandleEvents