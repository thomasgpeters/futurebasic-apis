/*  3D Earth & Moon Orbiting Sun  SceneKit programming with FutureBasic  Demonstrates:  1. Application of a flat map projection onto spherical SceneKit shape.  2. Rotating an object on its axis.  3. Synchronically orbiting a satellite object around the axis of another object.  Ken Shmidheiser  15 October 2022*/include "Tlbx SceneKit.incl"include resources "night_sky.jpg"include resources "sun.jpg"include resources "earth.jpg"include resources "moon2.jpg"_window = 1begin enum output 1_sceneViewend enumlocal fn InitScene as SCNSceneRefSCNSceneRef   scene = fn SCNSceneInitSCNNodeRef rootNode = fn SCNSceneRootNode( scene )SCNMaterialPropertySetContents( fn SCNSceneBackground( scene ), fn ImageNamed( (CFStringRef)@"night_sky.jpg" ) ) // Set sceneview background image// Create and add a camera to the sceneSCNCameraRef   camera = fn SCNCameraInitSCNNodeRef cameraNode = fn SCNNodeInitSCNNodeSetCamera( cameraNode, camera )SCNNodeAddChildNode( rootNode, cameraNode )// Place the cameraSCNNodeSetPosition( cameraNode, fn SCNVector3Make( 0, 3, 18 ) )SCNCameraSetZFar( camera, 100.0 )SCNVector4 rotation = fn SCNVector4Make( 1, 0, 0, -M_PI_4/4 )SCNNodeSetRotation( cameraNode, rotation )// Build the SunSCNSphereRef sun = fn SCNSphereInit( 3.0 )SCNMaterialRef sunMaterial = fn SCNMaterialInitSCNMaterialPropertySetContents( fn SCNMaterialDiffuse( sunMaterial ), fn ImageNamed( @"sun.jpg" ) )SCNMaterialSetShininess( sunMaterial, 0.1 )SCNGeometrySetMaterials( sun, @[sunMaterial] )SCNNodeRef sunNode = fn SCNNodeWithGeometry( sun )SCNNodeSetPosition( sunNode, fn SCNVector3Make( 0, 4, 0 ) )SCNActionableRunAction( sunNode, fn SCNActionRepeatActionForever( fn SCNActionRotateByAngle( M_PI, fn SCNVector3Make( 0.0, 25.0, 5.0 ), 4.0 ) ) )SCNNodeAddChildNode( rootNode, sunNode )// Build the EarthSCNSphereRef   earth = fn SCNSphereInit( 0.4 )SCNNodeRef earthNode = fn SCNNodeWithGeometry( earth )SCNNodeSetPosition( earthNode, fn SCNVector3Make( 13.5, 4, 0 ) )SCNActionableRunAction( earthNode, fn SCNActionRepeatActionForever( fn SCNActionRotateByAngle( M_PI, fn SCNVector3Make( 0.0, 25.0, 5.0 ), 1.0 ) ) )SCNMaterialRef earthMaterial = fn SCNMaterialInitSCNMaterialPropertySetContents( fn SCNMaterialDiffuse( earthMaterial ), fn ImageNamed( @"earth.jpg" ) )SCNMaterialSetLocksAmbientWithDiffuse( earthMaterial, YES )SCNGeometrySetMaterials( earth, @[earthMaterial] )SCNNodeAddChildNode( rootNode, earthNode )// Build the MoonSCNSphereRef   moon = fn SCNSphereInit( 0.12 )SCNNodeRef moonNode = fn SCNNodeWithGeometry( moon )SCNNodeSetPosition( moonNode, fn SCNVector3Make( 1.5, 0, 0 ) )SCNActionableRunAction( moonNode, fn SCNActionRepeatActionForever( fn SCNActionRotateByAngle( M_PI, fn SCNVector3Make( 0.0, 25.0, 5.0 ), 1.0 ) ) )SCNMaterialRef moonMaterial = fn SCNMaterialInitSCNMaterialPropertySetContents( fn SCNMaterialDiffuse( moonMaterial ), fn ImageNamed( @"moon2.jpg" ) )SCNMaterialSetLocksAmbientWithDiffuse( moonMaterial, YES )SCNGeometrySetMaterials( moon, @[moonMaterial] )SCNNodeAddChildNode( earthNode, moonNode )// Earth-rotation (center of rotation of the Earth around the Sun)SCNNodeRef earthRotationNode = fn SCNNodeInitSCNNodeAddChildNode( earthRotationNode, earthNode )SCNActionableRunAction( earthRotationNode, fn SCNActionRepeatActionForever( fn SCNActionRotateByAngle( M_PI, fn SCNVector3Make( 0.0, 25.0, 5.0 ), 6.0 ) ) ) // Moon orbitSCNNodeAddChildNode( rootNode, earthRotationNode )end fn = scenevoid local fn BuildWindowwindow _window, @"3D Earth & Moon Orbiting Sun", ( 0, 0, 1200, 500 )scnview _sceneView, fn InitScene, ( 0, 0, 1200, 500 )SCNViewSetBackgroundColor( 1, fn ColorBlack )SCNViewSetAllowsCameraControl( 1, YES )end fnvoid local fn DoDialog( ev as long, tag as long, wnd as long )select (ev)case _windowWillClose : endend selectend fnon dialog fn DoDialogfn BuildWindowHandleEvents