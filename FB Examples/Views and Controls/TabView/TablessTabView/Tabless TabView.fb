/*   Tabless TabView*/_window = 1begin enum 100_tabView_tableView1_tableView2end enum_toolbar = 1begin enum 1_toolbarTable1Item_toolbarTable2Itemend enumvoid local fn CreateTable1DataCFMutableArrayRef tableData = fn TableViewData( _tableView1 )MutableArrayAddObject( tableData, @"Alpha" )MutableArrayAddObject( tableData, @"Bravo" )MutableArrayAddObject( tableData, @"Charlie" )MutableArrayAddObject( tableData, @"Delta" )MutableArrayAddObject( tableData, @"Echo" )MutableArrayAddObject( tableData, @"Foxtrot" )MutableArrayAddObject( tableData, @"Golf" )MutableArrayAddObject( tableData, @"Hotel" )MutableArrayAddObject( tableData, @"India" )MutableArrayAddObject( tableData, @"Juliet" )MutableArrayAddObject( tableData, @"Kilo" )MutableArrayAddObject( tableData, @"Lima" )MutableArrayAddObject( tableData, @"Mike" )TableViewReloadData( _tableView1 )end fnvoid local fn CreateTable2DataCFMutableArrayRef tableData = fn TableViewData( _tableView2 )MutableArrayAddObject( tableData, @"November" )MutableArrayAddObject( tableData, @"Oscar" )MutableArrayAddObject( tableData, @"Papa" )MutableArrayAddObject( tableData, @"Quebec" )MutableArrayAddObject( tableData, @"Romeo" )MutableArrayAddObject( tableData, @"Sierra" )MutableArrayAddObject( tableData, @"Tango" )MutableArrayAddObject( tableData, @"Uniform" )MutableArrayAddObject( tableData, @"Victor" )MutableArrayAddObject( tableData, @"Whisky" )MutableArrayAddObject( tableData, @"Xray" )MutableArrayAddObject( tableData, @"Yankee" )MutableArrayAddObject( tableData, @"Zulu" )TableViewReloadData( _tableView2 )end fnvoid local fn BuildWindownibwindow _window, @"Window"nibtoolbar _toolbar, @"Toolbar"WindowSetToolbar( _window, _toolbar )ToolbarSetSelectedItem( _toolbar, _toolbarTable1Item )fn CreateTable1Datafn CreateTable2Dataend fnvoid local fn DoDialog( ev as long, tag as long, wnd as long )select ( ev )case _toolbarItemClickTabViewSelectItemAtIndex( _tabView, tag - 1 )// tabview items are zero-basedend selectend fnfn BuildWindowon dialog fn DoDialogHandleEvents