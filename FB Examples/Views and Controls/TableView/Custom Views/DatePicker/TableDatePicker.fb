/*  TableDatePicker*/// identifier#define DATE_IDENTIFIER @"date"_window = 1begin enum 1000_tableView_tableDatePickerend enumvoid local fn MyCustomCellCallback( tag as long, identifier as CFStringRef, row as NSInteger, obj as CFTypeRef, userData as ptr )CFDateRef dt = fn ArrayObjectAtIndex( fn TableViewData( _tableView ), row )DatePickerSetDateValue( obj, dt )end fnvoid local fn TableDataCreateCFDateRef   dt1, dt2, dt3CFMutableArrayRef tableData = fn TableViewData(_tableView)dt1 = fn DateInitdt2 = fn DateWithTimeIntervalSinceNow( 60*60*24 )dt3 = fn DateWithTimeIntervalSinceNow( 60*60*96 )MutableArrayAddObject( tableData, dt1 )MutableArrayAddObject( tableData, dt2 )MutableArrayAddObject( tableData, dt3 )TableViewReloadData( _tableView )end fnvoid local fn BuildWindownibwindow _window, @"Window"TableViewSetCustomCellCallback( _tableView, DATE_IDENTIFIER, @fn MyCustomCellCallback, NULL )fn TableDataCreateend fnvoid local fn DoDialog( ev as long, tag as long, wnd as long, obj as CFTypeRef )CFDateRef dtNSInteger rowselect ( ev )case _btnClickselect ( tag )case _tableDatePickerdt = fn DatePickerDateValue( obj )row = fn TableViewRowForView( _tableView, obj )MutableArrayReplaceObjectAtIndex( fn TableViewData(_tableView), dt, row )end selectcase _windowWillCloseendend selectend fnfn BuildWindowon dialog fn DoDialogHandleEvents