/*  TablePopUp*/#define POPUP_IDENTIFIER @"popup"include "NSLog.incl"_window = 1begin enum 1000_tableView_tablePopUpend enumvoid local fn MyCustomCellCallback( tag as long, identifier as CFStringRef, row as NSInteger, obj as CFTypeRef, userData as ptr )CFMutableArrayRef tableData = fn TableViewData( tag )NSInteger index = fn NumberIntegerValue( fn ArrayObjectAtIndex( tableData, row ) )PopUpButtonSelectItemAtIndex( obj, index)end fnvoid local fn TableDataCreateCFMutableArrayRef tableData = fn TableViewData( _tableView )// store popup button current indexesMutableArrayAddObject( tableData, @4 )MutableArrayAddObject( tableData, @1 )MutableArrayAddObject( tableData, @2 )MutableArrayAddObject( tableData, @0 )MutableArrayAddObject( tableData, @3 )MutableArrayAddObject( tableData, @5 )TableViewReloadData( _tableView )end fnvoid local fn BuildWindownibwindow _window, @"Window"TableViewSetCustomCellCallback( _tableView, POPUP_IDENTIFIER, @fn MyCustomCellCallback, NULL )fn TableDataCreateend fnvoid local fn DoDialog( ev as long, tag as long, wnd as long, obj as CFTypeRef )NSInteger   row, indexselect ( ev )case _btnClickselect ( tag )case _tablePopUprow = fn TableViewRowForView( _tableView, obj )index = fn PopUpButtonIndexOfSelectedItem(obj)MutableArrayReplaceObjectAtIndex( fn TableViewData(_tableView), @(index), row )// update tabledataNSLog(@"PopUp at row:%ld, index:%ld",row,index)end selectcase _windowWillCloseendend selectend fnfn BuildWindowon dialog fn DoDialogHandleEvents