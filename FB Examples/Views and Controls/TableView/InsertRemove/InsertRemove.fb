/*  TableView Demo  • CFNumbers in table data  • Add/remove rows  • Reorder rows  • Multiple row reorder/remove  • Drag copy rows  • Drop operation  • Table cell text did end editing  macOS 10.13+*/_window = 1begin enum 1_tableView_addRemSegend enum// keys/identifiers#define ITEM_KEY @"Item"#define QTY_KEY @"Qty"#define PRICE_KEY @"Price"#define COST_KEY @"Cost"void local fn TableDataUpdateCostCell( row as NSInteger )CFMutableArrayRef        arrayCFMutableDictionaryRef   dictNSInteger                qty, coldouble                   pricearray = fn TableViewData(_tableView)dict = (CFMutableDictionaryRef)fn ArrayObjectAtIndex( array, row )qty = fn NumberIntegerValue( fn DictionaryObjectForKey( dict, QTY_KEY ) )price = fn NumberDoubleValue( fn DictionaryObjectForKey( dict, PRICE_KEY ) )MutableDictionarySetObjectForKey( dict, @(qty*price), COST_KEY )col = fn TableViewColumnWithIdentifier( _tableView, COST_KEY )TableViewReloadDataForRowsColumns( _tableView, fn IndexSetWithIndex(row), fn IndexSetWithIndex(col) )end fnlocal fn TableDataDict( item as CFStringRef, qty as NSUInteger, price as double ) as CFMutableDictionaryRefCFMutableDictionaryRef   dictdict = fn MutableDictionaryWithCapacity(0)MutableDictionarySetObjectForKey( dict, item, ITEM_KEY )MutableDictionarySetObjectForKey( dict, @(qty), QTY_KEY )MutableDictionarySetObjectForKey( dict, @(price), PRICE_KEY )MutableDictionarySetObjectForKey( dict, @(qty*price), COST_KEY )end fn = dictvoid local fn TableDataInsertRowAtIndex( array as CFMutableArrayRef, item as CFStringRef, qty as NSUInteger, price as double, index as NSInteger )MutableArrayInsertObjectAtIndex( array, fn TableDataDict( item, qty, price ), index )end fnvoid local fn TableDataAddRow( array as CFMutableArrayRef, item as CFStringRef, qty as NSUInteger, price as double )MutableArrayAddObject( array, fn TableDataDict( item, qty, price ) )end fnvoid local fn TableDataBuildCFMutableArrayRef   arrayarray = fn TableViewData( _tableView )fn TableDataAddRow( array, @"Trowel", 3, 3.33 )fn TableDataAddRow( array, @"Spade", 5, 13.68 )fn TableDataAddRow( array, @"Fork", 2, 9 )fn TableDataAddRow( array, @"Wheelbarrow", 1, 25.72 )fn TableDataAddRow( array, @"Gloves", 4, 4.16 )fn TableDataAddRow( array, @"Wellies", 3, 17.34 )TableViewReloadData( _tableView )end fnvoid local fn AddRemoveAction( add as BOOL )CFMutableArrayRef   arrayIndexSetRef         rowIndexesNSInteger           row, countarray = fn TableViewData( _tableView )row = fn TableViewSelectedRow( _tableView )count = fn ArrayCount( array )if ( row == -1 ) then row = countif ( add )fn TableDataInsertRowAtIndex( array, @"Item", 1, 0.0, row )TableViewInsertRows( _tableView, fn IndexSetWithIndex(row), NSTableViewAnimationSlideDown )TableViewSelectRow( _tableView, row )WindowMakeFirstResponder( _window, _tableView )elserowIndexes = fn TableViewSelectedRowIndexes( _tableView )MutableArrayRemoveObjectAtIndex( array, row )TableViewRemoveRows( _tableView, rowIndexes, NSTableViewAnimationSlideUp )row--if ( row >= 0 )TableViewSelectRow( _tableView, row )end ifend ifend fnvoid local fn BuildWindownibwindow _window, @"Window"WindowSetBackgroundColor( _window, fn ColorControlBackground )ViewRegisterForDraggedTypes( _tableView, @[TABLEVIEW_REORDER_PASTEBOARD_TYPE] )TableViewSetAllowsDragCopy( _tableView, YES )TableViewSetDropOperation( _tableView, NSTableViewDropAbove )fn TableDataBuildend fnvoid local fn DoDialog( ev as long, tag as long )CFStringRef   identifierselect ( ev )case _btnClickselect ( tag )case _addRemSeg : fn AddRemoveAction( fn SegmentedControlIndexOfSelectedItem(tag) == 0 )end selectcase _tableViewSelectionDidChange// enable/disable '-' segmentSegmentedControlSetSegmentEnabled( _addRemSeg, 1, (fn TableViewSelectedRow( tag ) != -1) )case _tableViewCellTextDidEndEditing// update cost cell when qty or price changeidentifier = fn TableViewEventColumnIdentifier(tag)if ( fn StringIsEqual( identifier, QTY_KEY ) or fn StringIsEqual( identifier, PRICE_KEY ) )fn TableDataUpdateCostCell( fn TableViewEventRow(tag) )end ifcase _windowWillCloseendend selectend fnfn BuildWindowon dialog fn DoDialogHandleEvents