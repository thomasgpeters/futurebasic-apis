_window = 1begin enum 1_showPopoverBtnend enum_popover = 2begin enum 1_label_beepBtnend enum_popoverWindow = 3void local fn BuildWindowwindow _window, @"Popover Dempo", (0,0,400,300), NSWindowStyleMaskTitledbutton _showPopoverBtn,,, @"Show Popover", (137,132,127,32)popover _popover, (0,0,150,100), NSPopoverBehaviorTransienttextlabel _label, @"Popover", (48,63,54,17)button _beepBtn,,, @"Beep", (39,13,72,32)// create a detachable window for the popover - make it hidden to start withwindow -_popoverWindow, @"Popover Window", (0,0,300,200)WindowSetReleasedWhenClosed( _popoverWindow, NO )button _beepBtn,,, @"Beep", (39,13,72,32)end fnvoid local fn BtnClick( id as long, wnd as long )select ( wnd )case _windowselect ( id )case _showPopoverBtnif ( fn PopoverIsShown( _popover ) )PopoverClose( _popover )elsePopoverShow( _popover, CGRectZero, 1, CGRectMinXEdge )end ifend selectcase _popoverselect ( id )case _beepBtnbeepend selectcase _popoverWindowselect ( id )case _beepBtnbeepend selectend selectend fnvoid local fn DoDialog( ev as long, id as long, wnd as long )select ( ev )case _btnClick : fn BtnClick( id, wnd )case _popoverDetachableWindowDialogEventSetLong(_popoverWindow)// return detachable window tagend selectend fnfn BuildWindowon dialog fn DoDialogHandleEvents