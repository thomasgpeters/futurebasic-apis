/*  OpenPanelAccessoryView_1 - pick up button click events in callback function  Bernie's notes from the list discussion on 6-March-2025  Some things to note when building/using accessory views:  1. It's best to build the accessory view and its subviews offscreen (i.e. not in a window). Therefore, use the widget init function  2. Accessory view widget events can be picked up in the callback function but...       [a] Ensure the accessory widgets have unique tag values in the app       [b] Only use the obj param of the callback function to get/set widget attributes in CocoaUI calls  3. Only use the widget ref (not tag) in CocoaUI function calls*/include "NSLog.incl"// window_window = 1_openBtn = 1// open panel_openPanel = 1000begin enum 1001_openPanelPopUp_openPanelCheckboxend enum// open panel accessory view eventsvoid local fn MyAccessoryBtnClick( tag as long, wnd as long, obj as ptr ) // 'obj' is widget refselect ( tag )case _openPanelPopUp    : openpanel _openPanel,, fn PopUpButtonTitleOfSelectedItem(obj) // don't use tag in widget function callscase _openPanelCheckbox : NSLog(@"Checkbox state: %ld", fn ButtonState(obj))end selectend fnlocal fn BuildAccessoryView as ViewRef// build all widgets offscreenViewRef aView = fn ViewInit( 0, fn CGRectMake(0,0,228,58) ) // this is the accessory viewPopUpButtonRef pop = fn PopUpButtonInit( _openPanelPopUp, fn CGRectMake(17,14,102,25) )PopUpButtonAddItemsWithTitles( pop, @[@"txt",@"fb",@"png",@"pdf"] )ControlSetActionCallback( pop, @fn MyAccessoryBtnClick, pop ) // event handlerViewAddSubview( aView, pop ) // embed in accessory viewButtonRef check = fn ButtonInit( _openPanelCheckbox, fn CGRectMake(121,19,87,18) )ButtonSetTitle( check, @"Checkbox" )ButtonSetType( check, NSButtonTypeSwitch ) // checkbox typeControlSetActionCallback( check, @fn MyAccessoryBtnClick, check )ViewAddSubview( aView, check )end fn = aViewvoid local fn ShowOpenPanelOpenPanelSetAccessoryView( _openPanel, fn BuildAccessoryView )CFURLRef url = openpanel _openPanel, @"Open a file", @"txt"if ( url )NSLog(@"%@",url)elseNSLog(@"User cancelled")end ifend fnvoid local fn DoDialog( ev as long, tag as long, wnd as long, obj as CFTypeRef )select ( ev )case _btnClickselect ( tag )case _openBtn : fn ShowOpenPanelend selectend selectend fnwindow _window, @"OpenPanel Accessory View"button _openBtn,,, @"Openâ€¦"on dialog fn DoDialogHandleEvents