/*  OpenPanelAccessoryView_2 - pick up _btnClick events in user on dialog function  Bernie's notes from the list discussion on 6-March-2025  Some things to note when building/using accessory views:  1. It's best to build the accessory view and its subviews offscreen (i.e. not in a window). Therefore, use the widget init function  2. Accessory view widget events can be picked up in the user on dialog function but...    [a] Ensure the accessory widgets have unique tag values in the app    [b] Only use the obj param of the user dialog function to get/set widget attributes in CocoaUI calls*/include "NSLog.incl"// window_window = 1_openBtn = 1// open panel_openPanel = 1000begin enum 1001_openPanelPopUp_openPanelCheckbox1_openPanelCheckbox2_openPanelCheckbox3end enumlocal fn BuildAccessoryView as ViewRef// build all widgets offscreenViewRef aView = fn ViewInit( 0, fn CGRectMake(0,0,303,102) ) // this is the accessory viewTextLabelRef label = fn TextLabelInit( 0, fn CGRectMake(18,64,60,16) ) // tag value optional for a labelControlSetStringValue( label, @"File type:" ) // use control refs in CocoaUI callsViewAddSubview( aView, label ) // embed in accessory viewPopUpButtonRef pop = fn PopUpButtonInit( _openPanelPopUp, fn CGRectMake(81,58,102,25) )PopUpButtonAddItemsWithTitles( pop, @[@"txt",@"fb",@"png",@"pdf"] )ViewAddSubview( aView, pop )ButtonRef check1 = fn ButtonInit( _openPanelCheckbox1, fn CGRectMake(185,63,98,18) )ButtonSetTitle( check1, @"Checkbox 1" )ButtonSetType( check1, NSButtonTypeSwitch ) // checkbox typeViewAddSubview( aView, check1 )ButtonRef check2 = fn ButtonInit( _openPanelCheckbox2, fn CGRectMake(185,41,98,18) )ButtonSetTitle( check2, @"Checkbox 2" )ButtonSetType( check2, NSButtonTypeSwitch )ViewAddSubview( aView, check2 )ButtonRef check3 = fn ButtonInit( _openPanelCheckbox3, fn CGRectMake(185,19,98,18) )ButtonSetTitle( check3, @"Checkbox 3" )ButtonSetType( check3, NSButtonTypeSwitch )ViewAddSubview( aView, check3 )end fn = aViewvoid local fn ShowOpenPanelOpenPanelSetAccessoryView( _openPanel, fn BuildAccessoryView )CFURLRef url = openpanel _openPanel, @"Open a file", @"txt"if ( url )NSLog(@"%@",url)elseNSLog(@"User cancelled")end ifend fnvoid local fn DoDialog( ev as long, tag as long, wnd as long, obj as CFTypeRef )select ( ev )case _btnClickselect ( tag )case _openBtn : fn ShowOpenPanelcase _openPanelPopUpopenpanel _openPanel,, fn PopUpButtonTitleOfSelectedItem(obj) // use the 'obj' param in any CocoaUI callscase _openPanelCheckbox1, _openPanelCheckbox2, _openPanelCheckbox3NSLog(@"%@ state: %ld", fn ButtonTitle(obj),fn ButtonState(obj)) // use the 'obj' param in any CocoaUI callsend selectend selectend fnwindow _window, @"OpenPanel Accessory View"button _openBtn,,, @"Openâ€¦"on dialog fn DoDialogHandleEvents