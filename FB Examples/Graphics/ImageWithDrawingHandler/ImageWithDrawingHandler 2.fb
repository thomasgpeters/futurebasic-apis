// Version 2_window = 1begin enum output 1_imageView_textFieldend enumlocal fn MyImageDrawingHandler( r as CGRect, userData as ptr ) as BOOLCFIndex i_GRIDSIZE = 23for i = 0 to r.size.widthBezierPathStrokeLine( fn CGPointMake( i, 0 ), fn CGPointMake( i, r.size.height ), 0.5, fn ColorControlAccent )i = i + _GRIDSIZEnextfor i = 0 to r.size.heightBezierPathStrokeLine( fn CGPointMake( 0, i ), fn CGPointMake( r.size.width, i ),  0.5, fn ColorControlAccent )i = i + _GRIDSIZEnextend fn = YES // image was drawn successfullyvoid local fn BuildWindowlong    wndStyleMaskwndStyleMask  = NSWindowStyleMaskTitledwndStyleMask += NSWindowStyleMaskClosablewndStyleMask += NSWindowStyleMaskMiniaturizablewndStyleMask += NSWindowStyleMaskResizableCGRect r = ( 0, 0, 400, 400 )window _window, @"Image Drawing Handler", r, wndStyleMaskWindowSetBackgroundColor( _window, fn ColorWhite )WindowSetMinSize( _window, fn CGSizeMake( r.size.width, r.size.height + 20 ) )ImageRef image = fn ImageWithDrawingHandler( fn CGSizeMake( 360, 360 ), NO, @fn MyImageDrawingHandler, NULL )r = fn CGRectMake( 20, 20, 360, 360 )imageview _imageView, YES, image, r, _windowViewSetAutoresizingMask( _imageView, NSViewWidthSizable + NSViewHeightSizable )r = fn CGRectMake( 20, 330, 360, 30 )textfield _textField, YES, @"Resize window to resize the grid.", r, _windowViewSetAutoresizingMask( _textField, NSViewWidthSizable + NSViewHeightSizable )TextFieldSetDrawsBackground( _textField, NO )TextFieldSetBordered( _textField, NO )TextFieldSetBezeled( _textField, NO )TextFieldSetTextColor( _textField, fn ColorRed )ControlSetFontWithName( _textField, @"Helvetica", 22.0 )ControlSetAlignment( _textField, NSTextAlignmentCenter )end fnvoid local fn DoDialog( ev as long, tag as long, wnd as long, obj as CFTypeRef )CGRect   rCGSize   sselect (ev)case _btnClickselect (tag)end selectcase _windowDidResizer = fn WindowFrame( _imageView )s = fn CGSizeMake(r.size.width,r.size.height)fn ImageWithDrawingHandler( s, NO, @fn MyImageDrawingHandler, NULL )case _windowWillClose : endend selectend fnon dialog fn DoDialogfn BuildWindowHandleEvents