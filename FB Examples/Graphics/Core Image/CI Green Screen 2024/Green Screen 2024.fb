/* Core Image Green Screen Demo Ken Shmidheiser 01 February 2020  Released 24 July 2024      Revised*/#build WarnOfScopedVars NO // silence warning for this file onlyinclude "Tlbx CoreImage.incl"output file "Composited Green Screen Images"include resources "greenscreen_image.jpg"include resources "background.jpg"_window = 1begin enum output 1_originalImageView_coloredDeletedView_backgroundImageView_mergedImageView_originalImageLabel_colorDeletedImageLabel_backgroundImageLabel_mergedImageLabelend enumvoid local fn BuildWindowNSInteger  i, wndStyleMaskwndStyleMask  = NSWindowStyleMaskTitledwndStyleMask += NSWindowStyleMaskClosablewndStyleMask += NSWindowStyleMaskMiniaturizableCGRect r = ( 0, 0, 1380, 360 )window _window, @"Green Screen Merged Images", r, wndStyleMaskr = fn CGRectMake( 20, 20, 320, 300 )for i = _originalImageView to _mergedImageViewimageview i, YES,, r, NSImageScaleAxesIndependently, NSImageAlignCenter, NSImageFrameNone, _windowr = fn CGRectOffset( r, 340, 0 )nextr = fn CGRectMake( 20, 330, 320, 17 )textlabel _originalImageLabel, @"Subject Photographed Against Green Screen", r, _windowControlSetAlignment( _originalImageLabel, NSTextAlignmentCenter )r = fn CGRectMake( 350, 330, 330, 17 )textlabel _colorDeletedImageLabel, @"Custom ChromaKey CIFilter Sets Green Alpha to 0.0", r, _windowControlSetAlignment( _colorDeletedImageLabel, NSTextAlignmentCenter )r = fn CGRectMake( 700, 330, 320, 17 )textlabel _backgroundImageLabel, @"Background Image", r, _windowControlSetAlignment( _backgroundImageLabel, NSTextAlignmentCenter)r = fn CGRectMake( 1040, 330, 320, 17 )textlabel _mergedImageLabel, @"Filtered Image Merged with Background", r, _windowControlSetAlignment( _mergedImageLabel, NSTextAlignmentCenter )end fnlocal fn ImageRefToCIImage( image as ImageRef ) as CIImageRefCFDataRef      dta = fn ImageTIFFRepresentationUsingCompression( image, NSTIFFCompressionNone, 0.0 )CIImageRef ciImage = fn CIImageWithData( dta )end fn = ciImagelocal fn CIImageToImageRef( ciImage as CIImageRef ) as ImageRefCIImageRepRef rep = fn CIImageRepWithCIImage( ciImage )CGSize       size = fn ImageRepSize( rep )ImageRef    image = fn ImageWithSize( size )ImageAddRepresentation( image, rep )end fn = image// Get hue functionlocal fn GetHueWithRed( red as CGFloat, green as CGFloat, blue as CGFloat ) as CGFloatColorRef color = fn ColorWithRGB( red, green, blue, 1.0 )end fn = fn ColorHueComponent( color )// Build filter to remove green screenlocal fn ChromaKeyFilterFromHue( fromHue as CGFloat, toHue as CGFloat ) as CIFilterRefNSInteger size = 64NSInteger x, y, zCFMutableDataRef  cubeData = fn MutableDataNewfor z = 0 to size - 1CGFloat blue = (CGFloat)z / (CGFloat)(size - 1)for y = 0 to size - 1CGFloat green = (CGFloat)y / (CGFloat)(size - 1)for x = 0 to size - 1CGFloat red = (CGFloat)x / (CGFloat)(size - 1)CGFloat hue = fn GetHueWithRed( red, green, blue )float alpha = ( hue >= fromHue && hue <= toHue ) ? 0 : 1float premultipliedRed   = red   * alphafloat premultipliedGreen = green * alphafloat premultipliedBlue  = blue  * alphaMutableDataAppendBytes( cubeData, @premultipliedRed,   sizeof(float) )MutableDataAppendBytes( cubeData, @premultipliedGreen, sizeof(float) )MutableDataAppendBytes( cubeData, @premultipliedBlue,  sizeof(float) )MutableDataAppendBytes( cubeData, @alpha,              sizeof(float) )nextnextnextCIFilterRef chromaKeyFilter = fn CIFilterWithName( @"CIColorCube"      )ObjectSetValueForkey( chromaKeyFilter, @(size), @"inputCubeDimension" )ObjectSetValueForkey( chromaKeyFilter, cubeData, @"inputCubeData"      )end fn = chromaKeyFilter// Pixel filtering functionlocal fn RemoveColorFromSource( foregroundCIImage as CIImageRef, startRange as CGFloat, endRange as CGFloat ) as CIImageRefCIFilterRef chromaCIFilter = fn ChromaKeyFilterFromHue( startRange, endRange )ObjectSetValueForkey( chromaCIFilter, foregroundCIImage, kCIInputImageKey )end fn = fn CIFilterOutputImage( chromaCIFilter )// Image compositing functionlocal fn CompositeImages( foregroundCIImage as CIImageRef, backgroundCIImage as CIImageRef ) as CIImageRefCIFilterRef compositor = fn CIFilterWithName( @"CISourceOverCompositing" )ObjectSetValueForkey( compositor, foregroundCIImage, kCIInputImageKey )ObjectSetValueForkey( compositor, backgroundCIImage, kCIInputBackgroundImageKey )end fn = fn CIFilterOutputImage( compositor )void local fn BuildDemoViewsImageRef foregroundImage = fn ImageNamed( @"greenscreen_image" )ImageRef backgroundImage = fn ImageNamed( @"background" )ImageViewSetImage( _originalImageView,   foregroundImage )ImageViewSetImage( _backgroundImageView, backgroundImage )CIImageRef ciForeground = fn ImageRefToCIImage( foregroundImage )CIImageRef ciBackground = fn ImageRefToCIImage( backgroundImage )/*0.30, 0.40 HSV angles filter out green screen0.00, 0.00 fllters out white screen0.51, 0.68 filters out blue screenGreen screens are preferred since they don't affect human skin tones.For formula to determine other color-filter values see:https://developer.apple.com/documentation/coreimage/applying_a_chroma_key_effect?language=objc*/CIImageRef ciFixedForeground = fn RemoveColorFromSource( ciForeground, 0.30, 0.40 )ImageRef   colorDeletedImage = fn CIImageToImageRef( ciFixedForeground )ImageViewSetImage( _coloredDeletedView, colorDeletedImage )CIImageRef ciMergedImage = fn CompositeImages( ciFixedForeground, ciBackground )ImageRef     mergedImage = fn CIImageToImageRef( ciMergedImage )ImageViewSetImage( _mergedImageView, mergedImage )end fnvoid local fn DoDialog( ev as long, tag as long, wnd as long )select ( ev )case _windowWillClose : endend selectend fnon dialog fn DoDialogfn BuildWindowfn BuildDemoViewsHandleEvents