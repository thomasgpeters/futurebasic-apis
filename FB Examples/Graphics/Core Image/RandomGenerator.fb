/*  Random Generator  Ken Shmidheiser 20180707*/include "Tlbx CoreImage.incl"output file "Random Generator"_window = 1begin enum 1_imageViewend enumvoid local fn BuildWindowNSInteger  wndStyleMaskwndStyleMask  = NSWindowStyleMaskTitledwndStyleMask += NSWindowStyleMaskClosablewndStyleMask += NSWindowStyleMaskMiniaturizablewndStyleMask += NSWindowStyleMaskResizableCGRect r = ( 0, 0, 300, 400 )window _window, @"My Antenna Shocked A Magpie", r, wndStyleMaskCGSize size = { 285, 175 }WindowSetMinSize( _window, size )imageview _imageView,,, r, NSImageScaleAxesIndependentlyViewSetAutoresizingMask( _imageView, NSViewWidthSizable + NSViewHeightSizable )end fnvoid local fn RandomImage( tag as long )CGRect r = fn ViewBounds( tag )CIContextRef randomContext = fn CIContextWithOptions( NULL )CIFilterRef randomGenerator = fn CIFilterWithName( @"CIPhotoEffectChrome" )ObjectSetValueForKey( randomGenerator, fn ObjectValueForKey( fn CIFilterWithName(@"CIRandomGenerator"), @"outputImage" ), @"inputImage" )CIFilterSetDefaults( randomGenerator )CIImageRef resultImage = fn CIFilterOutputImage( randomGenerator )CGImageRef ref = fn CIContextCreateCGImage( randomContext, resultImage, r )ImageRef randomImage = fn ImageWithCGImage( ref, CGSizeZero )CGImageRelease( ref )ImageViewSetImage( tag, randomImage )end fnvoid local fn DoDialog( ev as long, tag as long, wnd as long )select (ev)case _windowDidResize : fn RandomImage( _imageView )case _windowWillClose : endend selectend fnon dialog fn DoDialogfn BuildWindowfn RandomImage( _imageView )HandleEvents