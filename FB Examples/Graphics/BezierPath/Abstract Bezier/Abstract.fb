include resources "Rect.png"include resources "Oval.png"include resources "Line.png"include resources "Palette.png"include resources "Undo.png"_window = 1begin enum 1_rectItem_ovalItem_lineItem_spaceItem_paletteItem_flexibleSpaceItem_undoItem_clearItem_signatureLabelend enumCFMutableArrayRef local fn ShapesCFMutableArrayRef shapes = (CFMutableArrayRef)fn AppProperty( @"shapes" )if ( shapes == NULL )shapes = fn CFArrayCreateMutable( _kCFAllocatorDefault, 0, @kCFTypeArrayCallBacks )AppPropertySet( @"shapes", shapes )end ifend fn = shapesvoid local fn ShapesClearCFMutableArrayRef shapes = (CFMutableArrayRef)fn AppProperty( @"shapes" )if ( shapes ) then AppPropertyRemove( @"shapes" )textlabel -_signatureLabelViewSetNeedsDisplay( _windowContentViewTag )end fnvoid local fn PoofCGFloat  x, yCGRect r = fn WindowFrame(_window)x = r.origin.x + r.size.width/2y = r.origin.y + r.size.height/2NSShowAnimationEffect( NSAnimationEffectPoof, fn CGPointMake(x,y), CGSizeZero, NULL, NULL )end fnvoid local fn UndoShapeCFMutableArrayRef shapes = (CFMutableArrayRef)fn AppProperty( @"shapes" )CFIndex countif ( shapes )count = fn CFArrayGetCount( shapes )if ( count ) then MutableArrayRemoveLastObject( shapes )ViewSetNeedsDisplay( _windowContentViewTag )end ifend fnvoid local fn ShapesAddRect( r as CGRect, lineWidth as CGFloat, strokeColor as ColorRef, fillColor as ColorRef )CFDictionaryRef dict = @{@"Rect":fn StringFromRect(r),@"LineWidth":@(lineWidth),@"StrokeColor":strokeColor,@"FillColor":fillColor}MutableArrayAddObject( fn Shapes, dict )ViewSetNeedsDisplay( _windowContentViewTag )end fnvoid local fn ShapesAddOval( frame as CGRect, lineWidth as CGFloat, strokeColor as ColorRef, fillColor as ColorRef )CFDictionaryRef dict = @{@"Frame":fn StringFromRect(frame),@"LineWidth":@(lineWidth),@"StrokeColor":strokeColor,@"FillColor":fillColor}MutableArrayAddObject( fn Shapes, dict )ViewSetNeedsDisplay( _windowContentViewTag )end fnvoid local fn ShapesAddLine( pt1 as CGPoint, pt2 as CGPoint, lineWidth as CGFloat, strokeColor as ColorRef )CFDictionaryRef dict = @{@"Pt1":fn StringFromPoint(pt1),@"Pt2":fn StringFromPoint(pt2),@"LineWidth":@(lineWidth),@"StrokeColor":strokeColor}MutableArrayAddObject( fn Shapes, dict )ViewSetNeedsDisplay( _windowContentViewTag )end fnvoid local fn ShapesAddRandomRectCGFloat x, y, w, h, lineWidth, red, green, blueCGRect contRect = fn WindowContentRect( _window )w = rnd(300) + 30h = rnd(300) + 30x = rnd(contRect.size.width - w)y = rnd(contRect.size.height - h)CGRect r = ( x, y, w, h )lineWidth = rnd( 20 )red = (rnd(3)-1)*0.5green = (rnd(3)-1)*0.5blue = (rnd(3)-1)*0.5ColorRef strokeCol = fn ColorWithCalibratedRGB( red, green, blue, 1.0 )red = (rnd(3)-1)*0.5green = (rnd(3)-1)*0.5blue = (rnd(3)-1)*0.5ColorRef fillCol = fn ColorWithCalibratedRGB( red, green, blue, 1.0 )fn ShapesAddRect( r, lineWidth, strokeCol, fillCol )end fnvoid local fn ShapesAddRandomOvalCGFloat   x, y, w, h, lineWidth, red, green, blueCGRect contRect = fn WindowContentRect( _window )w = rnd(300) + 30h = rnd(300) + 30x = rnd(contRect.size.width - w)y = rnd(contRect.size.height - h)CGRect frame = ( x, y, w, h )lineWidth = rnd( 20 )red = (rnd(3)-1)*0.5green = (rnd(3)-1)*0.5blue = (rnd(3)-1)*0.5ColorRef strokeCol = fn ColorWithCalibratedRGB( red, green, blue, 1.0 )red = (rnd(3)-1)*0.5green = (rnd(3)-1)*0.5blue = (rnd(3)-1)*0.5ColorRef fillCol = fn ColorWithCalibratedRGB( red, green, blue, 1.0 )fn ShapesAddOval( frame, lineWidth, strokeCol, fillCol )end fnvoid local fn ShapesAddRandomLineCGFloat    x1, x2, y1, y2, lineWidth, red, green, blueCGRect contRect = fn WindowContentRect( _window )x1 = rnd(contRect.size.width)x2 = rnd(contRect.size.width)y1 = rnd(contRect.size.height)y2 = rnd(contRect.size.height)CGPoint pt1 = { x1, y1 }CGPoint pt2 = { x2, y2 }ColorRef strokeCol = NULLlineWidth = rnd( 20 )red = (rnd(3)-1)*0.5green = (rnd(3)-1)*0.5blue = (rnd(3)-1)*0.5strokeCol = fn ColorWithCalibratedRGB( red, green, blue, 1.0 )fn ShapesAddLine( pt1, pt2, lineWidth, strokeCol )end fnvoid local fn DrawRect( dict as CFDictionaryRef )ColorRef   strokeColor, fillColorCFStringRef string = dict[@"Rect"]CGRect r = fn RectFromString( string )fillColor = (ColorRef)dict[@"FillColor"]CFNumberRef number = dict[@"LineWidth"]CGFloat lineWidth = fn NumberFloatValue( number )strokeColor = (ColorRef)dict[@"StrokeColor"]BezierPathStrokeFillRect( r, lineWidth, strokeColor, fillColor )end fnvoid local fn DrawOval( dict as CFDictionaryRef )ColorRef   strokeColor, fillColorCFStringRef string = dict[@"Frame"]CGRect frame = fn RectFromString( string )fillColor = (ColorRef)dict[@"FillColor"]CFNumberRef number = dict[@"LineWidth"]CGFloat lineWidth = fn NumberFloatValue( number )strokeColor = (ColorRef)dict[@"StrokeColor"]BezierPathStrokeFillOvalInRect( frame, lineWidth, strokeColor, fillColor )end fnvoid local fn DrawLine( dict as CFDictionaryRef )CGPoint   pt1, pt2CFNumberRef number = dict[@"LineWidth"]CGFloat lineWidth = fn NumberFloatValue( number )ColorRef strokeColor = (ColorRef)dict[@"StrokeColor"]CFStringRef string = dict[@"Pt1"]pt1 = fn PointFromString( string )string = dict[@"Pt2"]pt2 = fn PointFromString( string )BezierPathStrokeLine( pt1, pt2, lineWidth, strokeColor )end fnvoid local fn DrawShape( dict as CFDictionaryRef )if ( dict[@"Rect"] )fn DrawRect( dict )elseif ( dict[@"Frame"] )fn DrawOval( dict )elseif ( dict[@"Pt1"] )fn DrawLine( dict )end ifend ifend ifend fnvoid local fn DrawShapesCFDictionaryRef   dictCFMutableArrayRef shapes = fn Shapesfor dict in shapesfn DrawShape(dict)nextend fnvoid local fn CreateWorkOfArtCFIndex   indexfn ShapesClearfor index = 1 to 250fn ShapesAddRandomRectfn ShapesAddRandomOvalfn ShapesAddRandomLinetextlabel _signatureLabelnext indexend fnvoid local fn BuildWindowwindow _window, @"Abstract", (0,0,900,600)WindowSetContentMinSize( _window, fn CGSizeMake( 306, 61 ) )WindowSetBackgroundColor( _window, fn ColorWhite )WindowSubclassContentView( _window )toolbar 1toolbaritem _rectItem, @"Rect", @"Rect", @"Rect"toolbaritem _ovalItem, @"Oval", @"Oval", @"Oval"toolbaritem _lineItem, @"Line", @"Line", @"Line"toolbaritem _flexibleSpaceItem, NSToolbarSpaceItemIdentifiertoolbaritem _paletteItem, @"Palette", @"Palette", @"Palette"toolbaritem _flexibleSpaceItem, NSToolbarFlexibleSpaceItemIdentifiertoolbaritem _undoItem, @"Undo", @"Undo", @"Undo"toolbaritem _clearItem, @"Clear", @"Clear", @"NSTrashEmpty"ToolbarItemSetToolTip( 1, _rectItem, @"Add random rect" )ToolbarItemSetToolTip( 1, _ovalItem, @"Add random oval" )ToolbarItemSetToolTip( 1, _lineItem, @"Add random line" )ToolbarItemSetToolTip( 1, _paletteItem, @"Create a work of art" )ToolbarItemSetToolTip( 1, _undoItem, @"Remove last object" )ToolbarItemSetToolTip( 1, _clearItem, @"Wipe the canvas clean" )WindowSetToolbar( _window, 1 )textlabel -_signatureLabel, @"CocoaUI", (735,13,165,40)ViewSetAutoresizingMask( _signatureLabel, NSViewMinXMargin + NSViewMaxYMargin )ControlSetFont( _signatureLabel, fn FontWithName( @"Chalkduster", 24 ) )TextFieldSetTextColor( _signatureLabel, fn ColorRed )end fnvoid local fn DoDialog( ev as long, tag as long )select ( ev )case _toolbarItemClickselect ( tag )case _rectItem    : fn ShapesAddRandomRectcase _ovalItem    : fn ShapesAddRandomOvalcase _lineItem    : fn ShapesAddRandomLinecase _paletteItem : fn CreateWorkOfArtcase _undoItem    : fn UndoShapecase _clearItemfn ShapesClearfn Poofend selectcase _viewDrawRectfn DrawShapesend selectend fnrandomfn BuildWindowon dialog fn DoDialogHandleEvents