/*  ReplayKit Demo  Requires macOS 11.0+*/#plist NSCameraUsageDescription @"Camera access allows you to take photos to attach to reminders."include "Tlbx ReplayKit.incl"_window = 1begin enum 1_label_cameraBtn_microphoneBtn_recordBtn_captureBtn_broadcastBtnend enum_previewSheet = 2void local fn BuildWindowwindow _window, @"ReplayKit Demo", (0,0,480,288), NSWindowStyleMaskTitled + NSWindowStyleMaskClosable + NSWindowStyleMaskMiniaturizabletextlabel _label, @"ReplayKit", (141,145,198,56)ControlSetFont( _label, fn FontLabelFontOfSize( 48 ) )button _cameraBtn,,, @"Camera", (18,66,73,18), NSButtonTypeSwitchbutton _microphoneBtn,,, @"Microphone", (187,66,98,18), NSButtonTypeSwitchbutton _recordBtn,,, @"Start Recording", (13,13,129,32)button -_captureBtn, NO,, @"Start Capture", (182,13,116,32)button -_broadcastBtn, NO,, @"Start Broadcast", (338,13,129,32)end fnvoid local fn SetRecordingState( active as BOOL )dispatchmainwindow _windowif ( active )button _recordBtn,,, @"Stop Recording"elsebutton _recordBtn,,, @"Start Recording"end ifAppPropertySet( @"active", @(active) )button _cameraBtn, (active == NO)button _microphoneBtn, (active == NO)//button _captureBtn, (active == NO)//button _broadcastBtn, (active == NO)dispatchendend fnvoid local fn RecordingStopped( previewViewController as RPPreviewViewControllerRef )dispatchmainwindow output _windowViewRef cameraView = fn RPScreenRecorderCameraPreviewView( fn RPScreenRecorderShared )if ( cameraView ) then ViewRemoveFromSuperview(cameraView)window -_previewSheetWindowSetContentViewController( _previewSheet, previewViewController )WindowBeginSheet( _window, _previewSheet )dispatchendend fnvoid local fn StopRecordingHandler( ref as RPScreenRecorderRef, previewViewController as RPPreviewViewControllerRef, err as ErrorRef, userData as ptr )if ( err == NULL )fn RecordingStopped( previewViewController )end iffn SetRecordingState( NO )end fnvoid local fn SetupCameraViewdispatchmainCGRect frameViewRef cameraView = fn RPScreenRecorderCameraPreviewView( fn RPScreenRecorderShared )if ( cameraView != NULL && fn RPScreenRecorderIsCameraEnabled( fn RPScreenRecorderShared ) )frame = fn ViewFrame(_windowContentViewTag)ViewSetFrame( cameraView, fn CGRectMake(0,	frame.size.height-100,100,100) )ViewSetWantsLayer( cameraView, YES )WindowAddSubview( _window, cameraView )end ifdispatchendend fnvoid local fn MyRPDelegateCallback( ev as long, obj as CFTypeRef )select ( ev )case _rpScreenRecorderDidStopRecordingfn RecordingStopped( fn RPEventPreviewViewController )fn SetRecordingState( NO )case _rpPreviewViewControllerDidFinishWindowEndSheet(_window,_previewSheet)end selectend fnvoid local fn StartRecordingHandler( ref as RPScreenRecorderRef, err as ErrorRef, userData as ptr )if ( err == NULL )fn SetRecordingState( YES )fn SetupCameraViewelsefn SetRecordingState( NO )end ifend fnvoid local fn StartRecordingRPScreenRecorderStartRecording( fn RPScreenRecorderShared, @fn StartRecordingHandler, NULL )end fnvoid local fn StopRecordingRPScreenRecorderStopRecording( fn RPScreenRecorderShared, @fn StopRecordingHandler, NULL )end fnvoid local fn StartCapture// ..end fnvoid local fn StartBroadcast// ..end fnvoid local fn CameraActionRPScreenRecorderSetCameraEnabled( fn RPScreenRecorderShared, (fn ButtonState(_cameraBtn) == NSControlStateValueOn ) )end fnvoid local fn MicrophoneActionRPScreenRecorderSetMicrophoneEnabled( fn RPScreenRecorderShared, (fn ButtonState(_microphoneBtn) == NSControlStateValueOn ) )end fnvoid local fn RecordActionBOOL active = fn NumberBoolValue(fn AppProperty( @"active" ))if ( active )fn StopRecordingelsefn StartRecordingend ifend fnvoid local fn CaptureAction// ..end fnvoid local fn BroadcastAction// ..end fnvoid local fn DoAppEvent( ev as long )select ( ev )case _appDidFinishLaunchingRPSetDelegateCallback( @fn MyRPDelegateCallback )fn BuildWindowAppPropertySet( @"active", @(NO) )case _appShouldTerminateAfterLastWindowClosedAppEventSetBool(YES)end selectend fnvoid local fn DoDialog( ev as long, tag as long, wnd as long )select ( ev )case _btnClickselect ( tag )case _cameraBtn     : fn CameraActioncase _microphoneBtn : fn MicrophoneActioncase _recordBtn     : fn RecordActioncase _captureBtn    : fn CaptureActioncase _broadcastBtn  : fn BroadcastActionend selectend selectend fnon AppEvent fn DoAppEventon dialog fn DoDialogHandleEvents