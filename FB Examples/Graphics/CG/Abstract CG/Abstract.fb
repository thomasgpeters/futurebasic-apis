include resources "Rect.png"include resources "Oval.png"include resources "Line.png"include resources "Palette.png"include resources "Undo.png"begin globalsCFMutableArrayRef gShapesend globals_window = 1begin enum 1_rectItem_ovalItem_lineItem_spaceItem_paletteItem_flexibleSpaceItem_undoItem_clearItem_signatureLabelend enumlocal fn Shapes as CFMutableArrayRefif ( gShapes == NULL ) then gShapes = fn CFArrayCreateMutable( _kCFAllocatorDefault, 0, @kCFTypeArrayCallBacks )end fn = gShapesvoid local fn ShapesClearif ( gShapes ) then CFRelease( gShapes )gShapes = NULLtextlabel -_signatureLabelViewSetNeedsDisplay( _windowContentViewTag )end fnvoid local fn UndoShapeCFIndex countif ( gShapes )count = fn ArrayCount( gShapes )if ( count ) then MutableArrayRemoveObjectAtIndex( gShapes, count - 1 )ViewSetNeedsDisplay( _windowContentViewTag )end ifend fnvoid local fn ShapesAddRect( r as CGRect, lineWidth as CGFloat, strokeColor as CGColorRef, fillColor as CGColorRef )CFDictionaryRef dict = @{@"Rect":fn StringFromRect(r),@"LineWidth":@(lineWidth),@"StrokeColor":strokeColor,@"FillColor":fillColor}MutableArrayAddObject( fn Shapes, dict )ViewSetNeedsDisplay( _windowContentViewTag )end fnvoid local fn ShapesAddOval( frame as CGRect, lineWidth as CGFloat, strokeColor as CGColorRef, fillColor as CGColorRef )CFDictionaryRef dict = @{@"Frame":fn StringFromRect(frame),@"LineWidth":@(lineWidth),@"StrokeColor":strokeColor,@"FillColor":fillColor}MutableArrayAddObject( fn Shapes, dict )ViewSetNeedsDisplay( _windowContentViewTag )end fnvoid local fn ShapesAddLine( pt1 as CGPoint, pt2 as CGPoint, lineWidth as CGFloat, strokeColor as CGColorRef )CFDictionaryRef dict = @{@"Pt1":fn StringFromPoint(pt1),@"Pt2":fn StringFromPoint(pt2),@"LineWidth":@(lineWidth),@"StrokeColor":strokeColor}MutableArrayAddObject( fn Shapes, dict )ViewSetNeedsDisplay( _windowContentViewTag )end fnvoid local fn ShapesAddRandomRectCGFloat    x, y, w, h, lineWidth, red, green, blueCGColorRef strokeCol, fillColCGRect contRect = fn WindowContentRect( _window )w = rnd(300) + 30h = rnd(300) + 30x = rnd(contRect.size.width - w)y = rnd(contRect.size.height - h)CGRect r = ( x, y, w, h )lineWidth = rnd( 20 )red = (rnd(3)-1)*0.5green = (rnd(3)-1)*0.5blue = (rnd(3)-1)*0.5strokeCol = fn CGColorCreateGenericRGB( red, green, blue, 1.0 )red = (rnd(3)-1)*0.5green = (rnd(3)-1)*0.5blue = (rnd(3)-1)*0.5fillCol = fn CGColorCreateGenericRGB( red, green, blue, 1.0 )fn ShapesAddRect( r, lineWidth, strokeCol, fillCol )CGColorRelease( strokeCol )CGColorRelease( fillCol )end fnvoid local fn ShapesAddRandomOvalCGFloat    x, y, w, h, lineWidth, red, green, blueCGColorRef strokeCol, fillColCGRect contRect = fn WindowContentRect( _window )w = rnd(300) + 30h = rnd(300) + 30x = rnd(contRect.size.width - w)y = rnd(contRect.size.height - h)CGRect frame = ( x, y, w, h )lineWidth = rnd( 20 )red = (rnd(3)-1)*0.5green = (rnd(3)-1)*0.5blue = (rnd(3)-1)*0.5strokeCol = fn CGColorCreateGenericRGB( red, green, blue, 1.0 )red = (rnd(3)-1)*0.5green = (rnd(3)-1)*0.5blue = (rnd(3)-1)*0.5fillCol = fn CGColorCreateGenericRGB( red, green, blue, 1.0 )fn ShapesAddOval( frame, lineWidth, strokeCol, fillCol )CGColorRelease( strokeCol )CGColorRelease( fillCol )end fnvoid local fn ShapesAddRandomLineCGPoint pt1, pt2CGFloat x1, x2, y1, y2, lineWidth, red, green, blueCGRect contRect = fn WindowContentRect( _window )x1 = rnd(contRect.size.width)x2 = rnd(contRect.size.width)y1 = rnd(contRect.size.height)y2 = rnd(contRect.size.height)pt1 = fn CGPointMake( x1, y1 )pt2 = fn CGPointMake( x2, y2 )CGColorRef strokeCol = NULLlineWidth = rnd( 20 )red = (rnd(3)-1)*0.5green = (rnd(3)-1)*0.5blue = (rnd(3)-1)*0.5strokeCol = fn CGColorCreateGenericRGB( red, green, blue, 1.0 )fn ShapesAddLine( pt1, pt2, lineWidth, strokeCol )CGColorRelease( strokeCol )end fnvoid local fn DrawRect( ctx as CGContextRef, dict as CFDictionaryRef )CGColorRef strokeColor, fillColorCFStringRef string = fn DictionaryObjectForKey( dict, @"Rect" )CGRect r = fn RectFromString( string )fillColor = (CGColorRef)fn DictionaryObjectForKey( dict, @"FillColor" )CGContextSetFillColorWithColor( ctx, fillColor )CGContextFillRect( ctx, r )CFNumberRef number = fn DictionaryObjectForKey( dict, @"LineWidth" )CGFloat lineWidth = fn NumberFloatValue( number )CGContextSetLineWidth( ctx, lineWidth )strokeColor = (CGColorRef)fn DictionaryObjectForKey( dict, @"StrokeColor" )CGContextSetStrokeColorWithColor( ctx, strokeColor )CGContextStrokeRect( ctx, r )end fnvoid local fn DrawOval( ctx as CGContextRef, dict as CFDictionaryRef )CGColorRef strokeColor, fillColorCFStringRef string = fn DictionaryObjectForKey( dict, @"Frame" )CGRect frame = fn RectFromString( string )fillColor = (CGColorRef)fn DictionaryObjectForKey( dict, @"FillColor" )CGContextSetFillColorWithColor( ctx, fillColor )CGContextFillEllipseInRect( ctx, frame )CFNumberRef number = fn DictionaryObjectForKey( dict, @"LineWidth" )CGFloat lineWidth = fn NumberFloatValue( number )CGContextSetLineWidth( ctx, lineWidth )strokeColor = (CGColorRef)fn DictionaryObjectForKey( dict, @"StrokeColor" )CGContextSetStrokeColorWithColor( ctx, strokeColor )CGContextStrokeEllipseInRect( ctx, frame )end fnvoid local fn DrawLine( ctx as CGContextRef, dict as CFDictionaryRef )CGPoint pt1, pt2CFNumberRef number = fn DictionaryObjectForKey( dict, @"LineWidth" )CGFloat lineWidth = fn NumberFloatValue( number )CGContextSetLineWidth( ctx, lineWidth )CGColorRef strokeColor = (CGColorRef)fn DictionaryObjectForKey( dict, @"StrokeColor" )CGContextSetStrokeColorWithColor( ctx, strokeColor )CFStringRef string = fn DictionaryObjectForKey( dict, @"Pt1" )pt1 = fn PointFromString( string )CGContextMoveToPoint( ctx, pt1.x, pt1.y )string = fn DictionaryObjectForKey( dict, @"Pt2" )pt2 = fn PointFromString( string )CGContextAddLineToPoint( ctx, pt2.x, pt2.y )CGContextStrokePath( ctx )end fnvoid local fn DrawShape( ctx as CGContextRef, dict as CFDictionaryRef )if ( fn DictionaryObjectForKey( dict, @"Rect" ) )fn DrawRect( ctx, dict )elseif ( fn DictionaryObjectForKey( dict, @"Frame" ) )fn DrawOval( ctx, dict )elseif ( fn DictionaryObjectForKey( dict, @"Pt1" ) )fn DrawLine( ctx, dict )end ifend ifend ifend fnvoid local fn DrawShapesCFIndex      indexCGContextRef ctxCGRect       viewRectCFMutableArrayRef shapes = fn ShapesCFIndex count = fn ArrayCount( shapes )if ( count )ctx = fn GraphicsContextCurrentCGContextviewRect = fn ViewBounds( _windowContentViewTag )CGContextSaveGState( ctx )CGContextTranslateCTM( ctx, 0.0, viewRect.size.height )CGContextScaleCTM( ctx, 1.0, -1.0 )for index = 0 to count - 1fn DrawShape( ctx, fn ArrayObjectAtIndex( fn Shapes, index ) )next indexCGContextRestoreGState( ctx )end ifend fnvoid local fn CreateWorkOfArtCFIndex indexfn ShapesClearfor index = 1 to 250fn ShapesAddRandomRectfn ShapesAddRandomOvalfn ShapesAddRandomLinetextlabel _signatureLabelnext indexend fnvoid local fn BuildWindowwindow _window, @"Abstract", (0,0,900,600)WindowSetContentMinSize( _window, fn CGSizeMake( 306, 61 ) )WindowSetBackgroundColor( _window, fn ColorWhite )WindowSubclassContentView( _window )toolbar 1toolbaritem _rectItem, @"Rect", @"Rect", @"Rect"toolbaritem _ovalItem, @"Oval", @"Oval", @"Oval"toolbaritem _lineItem, @"Line", @"Line", @"Line"toolbaritem _flexibleSpaceItem, NSToolbarSpaceItemIdentifiertoolbaritem _paletteItem, @"Palette", @"Palette", @"Palette"toolbaritem _flexibleSpaceItem, NSToolbarFlexibleSpaceItemIdentifiertoolbaritem _undoItem, @"Undo", @"Undo", @"Undo"toolbaritem _clearItem, @"Clear", @"Clear", NSImageNameTrashEmptyToolbarItemSetToolTip( 1, _rectItem, @"Add random rect" )ToolbarItemSetToolTip( 1, _ovalItem, @"Add random oval" )ToolbarItemSetToolTip( 1, _lineItem, @"Add random line" )ToolbarItemSetToolTip( 1, _paletteItem, @"Create a work of art" )ToolbarItemSetToolTip( 1, _undoItem, @"Remove last object" )ToolbarItemSetToolTip( 1, _clearItem, @"Wipe the canvas clean" )WindowSetToolbar( _window, 1 )textlabel -_signatureLabel, @"CocoaUI", (735,13,165,40)ViewSetAutoresizingMask( _signatureLabel, NSViewMinXMargin + NSViewMaxYMargin )CTFontRef font = fn CTFontCreateWithName( @"Chalkduster", 24, NULL )ControlSetFont( _signatureLabel, font )CFRelease( font )TextFieldSetTextColor( _signatureLabel, fn ColorRed )end fnvoid local fn DoDialog( ev as long, tag as long )select ( ev )case _toolbarItemClickselect ( tag )case _rectItem    : fn ShapesAddRandomRectcase _ovalItem    : fn ShapesAddRandomOvalcase _lineItem    : fn ShapesAddRandomLinecase _paletteItem : fn CreateWorkOfArtcase _undoItem    : fn UndoShapecase _clearItem   : fn ShapesClearend selectcase _viewDrawRectfn DrawShapesend selectend fnrandomfn BuildWindowon dialog fn DoDialogHandleEvents