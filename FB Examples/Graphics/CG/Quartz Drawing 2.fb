begin globalsCFMutableArrayRef gPaths, gPointsend globalsvoid local fn ViewDraw( ctx as CGContextRef, viewRect as CGRect )CFIndex       pathsCount, pathsIndex, ptCount, ptIndexCFArrayRef    pointsCFStringRef   stringCGPoint       ptif ( gPaths )CGContextSaveGState( ctx )CGContextBeginPath( ctx )CGContextSetLineWidth( ctx, 2.0 )CGContextSetRGBStrokeColor( ctx, 0.0, 0.0, 0.0, 1.0  )pathsCount = fn CFArrayGetCount( gPaths )for pathsIndex = 0 to pathsCount - 1points = fn CFArrayGetValueAtIndex( gPaths, pathsIndex )ptCount = fn CFArrayGetCount( points )if ( ptCount == 2 )string = fn CFArrayGetValueAtIndex( points, 0 )pt = fn PointFromString( string )CGContextAddEllipseInRect( ctx, fn CGRectMake( pt.x-1, pt.y+1, 2, 2 ) )else// start pointstring = fn CFArrayGetValueAtIndex( points, 0 )pt = fn PointFromString( string )CGContextMoveToPoint( ctx, pt.x, pt.y )// more pointsfor ptIndex = 1 to ptCount - 1string = fn CFArrayGetValueAtIndex( points, ptIndex )pt = fn PointFromString( string )CGContextAddLineToPoint( ctx, pt.x, pt.y )next ptIndexend ifnext pathsIndexCGContextStrokePath( ctx )CGContextRestoreGState( ctx )end ifend fnvoid local fn AddPoint( pt as CGPoint )MutableArrayAddObject( gPoints, fn StringFromPoint( pt ) )end fnvoid local fn MouseDownAction( pt as CGPoint )if ( gPaths == NULL ) then gPaths = fn CFArrayCreateMutable( _kCFAllocatorDefault, 0, @kCFTypeArrayCallBacks )gPoints = fn CFArrayCreateMutable( _kCFAllocatorDefault, 0, @kCFTypeArrayCallBacks )MutableArrayAddObject( gPaths, gPoints )fn AddPoint( pt )end fnvoid local fn MouseDraggedAction( pt as CGPoint )fn AddPoint( pt )ViewSetNeedsDisplay( _windowContentViewTag )end fnvoid local fn MouseUpAction( pt as CGPoint )fn AddPoint( pt )MutableArrayAddObject( gPaths, gPoints )CFRelease( gPoints )gPoints = NULLViewSetNeedsDisplay( _windowContentViewTag )end fnvoid local fn DoDialog( ev as long, tag as long, wnd as long, obj as CFTypeRef )CGPoint   ptselect ( ev )case _btnClickselect ( tag )case 2if ( gPaths )CFRelease( gPaths )gPaths = NULLViewSetNeedsDisplay( _windowContentViewTag )end ifend selectcase _viewDrawRectfn ViewDraw( fn GraphicsContextCurrentCGContext, fn ViewBounds(tag) )case _viewMouseDownpt = fn EventLocationInWindowfn MouseDownAction( pt )case _viewMouseDraggedpt = fn EventLocationInWindowfn MouseDraggedAction( pt )case _viewMouseUppt = fn EventLocationInWindowfn MouseUpAction( pt )end selectend fnwindow 1, @"Quartz Drawing", (0,0,550,400), NSWindowStyleMaskTitledWindowSubclassContentView(1)textlabel 1, @"Draw something", (0,389,76,11)ControlSetSize( 1, NSControlSizeMini )button 2,,, @"Clear"on dialog fn DoDialogHandleEvents