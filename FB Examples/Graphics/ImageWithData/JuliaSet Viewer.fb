// IMPORTANT NOTE: FB Build Settings 'Check array bounds' must be turned off to run.#build CheckArrayBounds NO// FB 7.0.9+output file "JuliaSet Viewer"_mApplication = 0begin enum_iAbout_iSeparator_iPreferences_iSeparator2_iHideend enumbegin enum 1_mFile_mEdit_mWindowend enumbegin enum_iCreate_iSeparator_iSave_iSeparator2_iPrintend enum_window = 1begin enum output 1_imageView_realLabel_realField_imaginaryLabel_imaginaryfield_createBtn_printBtn_saveBtn_infoLabelend enum// Save panel_savePanel = 1begin record Complexfloat real  // real component of Complex Numberfloat imag  // imaginary component of Complex Numberend recordvoid local fn BuildMenu// Application menuMenuItemSetOnMenuAction( _mApplication, _iAbout )menu _mApplication, _iSeparatormenu _mApplication, _iPreferences,, @"Preferences…", @","menu _mApplication, _iSeparator2menu _mApplication, _iHide,, fn StringWithFormat( @"%@ %@", @"Hide", @"JuliaSet Viewer" ), @"h"MenuItemSetAction( _mApplication, _iHide, @"hide:" )// File menumenu _mFile, -1,, @"File"menu _mFile, _iCreate,, @"Create image…", @"i"menu _mFile, _iSeparatormenu _mFile, _iSave,, @"Save file…", @"s"menu _mFile, _iSeparator2menu _mFile, _iPrint,, @"Print…", @"p"editmenu _mEditend fnvoid local fn BuildWindowlong   wndStyleMaskwndStyleMask  = NSWindowStyleMaskTitledwndStyleMask += NSWindowStyleMaskClosable	+ NSWindowStyleMaskMiniaturizablewndStyleMask += NSWindowStyleMaskResizableCGRect r = ( 0, 0, 640, 500 )window _window, @"Julia set Viewer", r, wndStyleMaskWindowSetMinSize( _window, fn CGSizeMake( 640, 500 ) )r = fn CGRectMake( 20, 30, 450, 450 )imageview _imageView, YES,, r, NSImageScaleProportionallyUpOrDown, NSImageAlignCenter, NSImageFramePhoto, _windowViewSetAutoresizingMask( _imageView, NSViewWidthSizable + NSViewHeightSizable )r = fn CGRectMake( 476, 432, 149, 16 )textlabel _realLabel, @"Enter Complex real:", r, _windowViewSetAutoresizingMask( _realLabel, NSViewMinXMargin + NSViewMaxYMargin )r = fn CGRectMake( 476, 403, 149, 24 )textfield _realfield, YES, @"0.355534", r, _windowTextFieldSetMaximumNumberOfLines( _realfield, 1 )ControlSetFormat( _realfield, @"0123456789.-", YES, 16, 0 )ViewSetAutoresizingMask( _realfield, NSViewMinXMargin + NSViewMaxYMargin )r = fn CGRectMake( 476, 379, 149, 16 )textlabel _imaginaryLabel, @"Complex imaginary:", r, _windowViewSetAutoresizingMask( _imaginaryLabel, NSViewMinXMargin + NSViewMaxYMargin )r = fn CGRectMake( 476, 350, 149, 24 )textfield _imaginaryField, YES, @"-0.337292", r, _windowTextFieldSetMaximumNumberOfLines( _imaginaryField, 1 )ControlSetFormat( _imaginaryField, @"0123456789.-", YES, 16, 0 )ViewSetAutoresizingMask( _imaginaryField, NSViewMinXMargin + NSViewMaxYMargin )r = fn CGRectMake( 476, 307, 151, 30 )button _createBtn, YES, , @"Create Image", r, NSButtonTypeMomentaryLight, NSBezelStyleRegularSquare, _windowViewSetAutoresizingMask( _createBtn, NSViewMinXMargin + NSViewMaxYMargin )r = fn CGRectMake( 476, 57, 151, 30 )button _printBtn, YES, , @"Print Image", r, NSButtonTypeMomentaryLight, NSBezelStyleRegularSquare, _windowViewSetAutoresizingMask( _printBtn, NSViewMinXMargin + NSViewMaxYMargin )r = fn CGRectMake( 476, 25, 151, 30 )button _saveBtn, YES, , @"Save Image", r, NSButtonTypeMomentaryLight, NSBezelStyleRegularSquare, _windowViewSetAutoresizingMask( _saveBtn, NSViewMinXMargin + NSViewMaxYMargin )end fnlocal fn JuliaPoint( c as Complex, w as long, h as long, xl as float, xr as float, yb as float, yt as float, i as long, j as long ) as longfloat   ai, ar, cr, ci, t, x, ylong    k, value = 1/*Placed in a formula, the default Complex number values of this demo represent:Z(k+1) = Z(k)^2 0.355534 -0.337292iwhere 0.355534 is the real component of a Complex Number,and -0.337292i is the imaginary component.*/cr = c.realci = c.imagx = ( ( float ) ( w - i - 1 ) * xl + ( float ) ( i ) * xr ) / ( float ) ( w - 1 )y = ( ( float ) ( h - j - 1 ) * yb + ( float ) ( j ) * yt ) / ( float ) ( h - 1 )ar = xai = yfor k = 0 to 199t  = ar * ar - ai * ai + crai = ar * ai + ai * ar + ciar = tif ( 1000 < ar * ar + ai * ai )value = 0exit fnend ifnext kend fn = valuevoid local fn JuliaRGB( c as Complex, w as long, h as long, xl as float, xr as float, yb as float, yt as float, rgb(0) as unsigned char )long   i, j, juliaValue, k = 0for j = 0 to h - 1for i = 0 to w - 1juliaValue = fn JuliaPoint( c, w, h, xl, xr, yb, yt, i, j )rgb(k)   = 255 * (1-juliaValue)rgb(k+1) = 255 * (1-juliaValue)rgb(k+2) = 255k += 3next inext jend fnvoid local fn CreateImage( w as long, h as long, rgb(0) as ^unsigned char )unsigned char   header1(11), header2(5)BlockZero( @header1(0), 12 * sizeof(unsigned char) )header1(2) = 2header2(0) = w mod 256header2(1) = w/256header2(2) = h mod 256header2(3) = h/256header2(4) = 24header2(5) = 0CFMutableDataRef dta = fn MutableDataWithCapacity(0)MutableDataAppendBytes( dta, @header1(0), 12 * sizeof(unsigned char) )MutableDataAppendBytes( dta, @header2(0), 6 * sizeof(unsigned char) )MutableDataAppendBytes( dta, @rgb(0), w * h * 3 * sizeof(unsigned char) )ImageRef image = fn ImageWithData( dta )ImageViewSetImage( _imageView, image )end fnvoid local fn BuildJuliaSet( c as Complex )long   h = 1000, w = 1000	// Create 1000x1000-pixel canvas for imagefloat  xl = -1.25, xr = 1.25, yb = -1.25, yt = 1.25 // Locate image on canvasxref rgb(1) as unsigned charrgb = fn malloc( w * h * 3 * sizeof(unsigned char) )// Create image datafn JuliaRGB( c, w, h, xl, xr, yb, yt, @rgb(0) )// Create image from datafn CreateImage( w, h, @rgb(0) )free(rgb)end fnvoid local fn BuildImageComplex cc.real = fn ControlFloatValue( _realfield )c.imag = fn ControlFloatValue( _imaginaryField )fn BuildJuliaSet( c )end fnvoid local fn PrintView( tag as long )PrintInfoRef printInfo = fn PrintInfoSharedPrintInfoSetHorizontallyCentered( printInfo, YES )PrintInfoSetVerticallyCentered( printInfo, YES )PrintInfoSetTopMargin( printInfo, 10.0 )PrintInfoSetBottomMargin( printInfo, 10.0 )PrintInfoSetLeftMargin( printInfo, 5.0 )PrintInfoSetRightMargin( printInfo, 5.0 )PrintInfoSetVerticalPagination( printInfo, NSAutoPagination )PrintInfoSetOrientation( printInfo, NSPaperOrientationPortrait )PrintOperationRef printOp = fn PrintOperationWithViewPrintInfo( tag, printInfo )PrintOperationRunModal( printOp, _window, NULL, NULL )end fnvoid local fn SaveFile// optionsSavePanelSetCanCreateDirectories( _savePanel, YES )SavePanelSetAllowedFileTypes( _savePanel, @[@"png"] )SavePanelSetExtensionHidden( _savePanel, NO )// run savepanel; action captured in fn DoDialogsavepanel _savePanel, @"Save image...", @"public.png",,,, YESend fnvoid local fn DoDialog( ev as long, tag as long, wnd as long, obj as CFTypeRef )CFDataRef                tiffData, imageData = NULLImageRef                 imageCFMutableDictionaryRef   propertiesBitmapImageRepRef        bitmapselect (ev)case _btnClickselect (tag)case _createBtn : fn BuildImagecase _printBtn  : fn PrintView( _imageView )case _saveBtn   : fn SaveFileend select// Invoked upon savepanel actioncase _savePanelDidEndif ( obj )image = fn ImageViewImage( _imageView )tiffData = fn ImageTIFFRepresentation( image )properties = fn MutableDictionaryWithCapacity(0)bitmap = fn BitmapImageRepWithData( tiffData )imageData = fn BitmapImageRepRepresentationUsingType( bitmap, NSBitmapImageFileTypePNG, properties )// Optional image formats:// imageData = fn BitmapImageRepRepresentationUsingType( bitmap, NSBitmapImageFileTypeBMP,  properties )// imageData = fn BitmapImageRepRepresentationUsingType( bitmap, NSBitmapImageFileTypeGIF,  properties )// imageData = fn BitmapImageRepRepresentationUsingType( bitmap, NSBitmapImageFileTypeJPEG, properties )// imageData = fn BitmapImageRepRepresentationUsingType( bitmap, NSBitmapImageFileTypeTIFF, properties )fn DataWriteToURL( imageData, (CFURLREF)obj, NSDataWritingAtomic, NULL )else// User cancelledend ifcase _windowWillClose : endend selectend fnvoid local fn DoMenu( menuID as long, itemID as long )CFMutableAttributedStringRef   attrStrCFDictionaryRef                dictselect (menuID)case _mApplicationselect (itemID)case _iAboutattrStr = fn MutableAttributedStringWithString( @"A demo app to create Julia Set fractals." )dict = @{ @"Credits":attrStr, @"ApplicationName":@"JuliaSet Viewer", @"Version":@"0.1", @"Copyright":@"2020", @"ApplicationVersion":@"0.1" }AppOrderFrontStandardAboutPanelWithOptions( dict )case _iPreferences : alert 1, NSAlertStyleInformational, @"Preferences", @"Use this menu item to open Preferences window in actual project.", @"Okay", YESend selectcase _mFileselect (itemID )case _iCreate : fn BuildImagecase _iPrint  : fn PrintView( _imageView )case _iSave   : fn SaveFileend selectend selectend fnon menu fn DoMenuon dialog fn DoDialogfn BuildMenufn BuildWindowfn BuildImageHandleEvents