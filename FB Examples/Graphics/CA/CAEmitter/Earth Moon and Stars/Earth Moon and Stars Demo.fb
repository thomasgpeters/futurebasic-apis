/*   Earth Moon and Stars CABasicAnimation Demo   Demonstrates rotating objects in CALayers around a point   (Certainly not astronomically accurate!)   20210205 — Ken Shmidheiser, initial release   20210209 — Ken Shmidheiser, revised to add twinkling stars   20210209 — Bernie Wylde, earth rotation fixed, twinkling stars CAEmitter code              moved to its own function, general code clean-up.*/include "NSLog.incl"output file "Earth Moon and Stars"include resources "earth.png"include resources "moon.png"include resources "star.png"_window = 1begin enum 1_starView_earthView_moonViewend enumvoid local fn RotatingEarthCALayerRef           earthLayerCABasicAnimationRef  earthAnimationCATransform3D        transformCGRect               frameCGFloat              centerview _earthView, ( 300, 300, 350, 350 )ViewSetWantsLayer( _earthView, YES )earthLayer = fn ViewLayer( _earthView )CALayerSetContents( earthLayer, fn ImageNamed( @"earth" ) )frame = fn ViewFrame( _earthView )center = fn CGRectGetWidth( frame )earthAnimation = fn CABasicAnimationWithKeyPath( @"transform.rotation.z" )// Setting PI to negative value allows clockwise rotationtransform = fn CATransform3DMakeRotation( -PI, 0.0, 0.0, 1.0 )CABasicAnimationSetToValue( earthAnimation, fn ValueWithCATransform3D( transform ) )CALayerSetAnchorPoint( earthLayer, fn CGPointMake( 0.5, 0.5 ) )CALayerSetPosition(    earthLayer, fn CGPointMake( center, center ) )CAPropertyAnimationSetCumulative( earthAnimation, YES )CAMediaTimingSetDuration(         earthAnimation, 5.0 )CAMediaTimingSetRepeatCount(      earthAnimation, INFINITY )CALayerAddAnimation( earthLayer,  earthAnimation, @"rotationAnimation" )end fnvoid local fn RotatingMoonCALayerRef           moonLayerCABasicAnimationRef  moonAnimationview _moonView, ( 350, 350, 250, 250 )ViewSetWantsLayer( _moonView, YES )moonLayer = fn ViewLayer( _moonView )CALayerSetContentsGravity( moonLayer, kCAGravityRight )CALayerSetContentsScale(   moonLayer, fn ScreenBackingScaleFactor( fn ScreenMainScreen ) )CALayerSetContents( moonLayer, fn ImageNamed( @"moon" ) )moonAnimation = fn CABasicAnimationWithKeyPath( @"transform.rotation.z" )// Setting PI to negative value allows clockwise rotationCABasicAnimationSetToValue(       moonAnimation, @( PI * 2.0 ) )CAPropertyAnimationSetCumulative( moonAnimation, YES )CAMediaTimingSetDuration(    moonAnimation, 15.0     )CAMediaTimingSetRepeatCount( moonAnimation, INFINITY )CALayerAddAnimation( moonLayer, moonAnimation, @"rotationAnimation" )end fnvoid local fn TwinklingStarsCALayerRef          layerCGRect              boundsCAEmitterLayerRef   starsEmitterCAEmitterCellRef    starsCGImageRef          imagebounds = fn ViewBounds( _starView )// Get layer for view, configure attributesViewSetWantsLayer( _starView, YES )layer = fn ViewLayer( _starView )// Set view layer background color to deep, dark blue. CAEmitter layer sits on top of view layer.CALayerSetBackgroundColor( layer, fn ColorWithRGB( 0.032, 0.016, 0.150, 1.0 ) )starsEmitter = fn CAEmitterLayerInit// Configure the emitter layerCAEmitterLayerSetEmitterPosition( starsEmitter, fn CGPointMake( bounds.size.width / 2, bounds.size.height / 2 ) ) // The position of the center of the particle emitter. Animatable.CAEmitterLayerSetEmitterSize(     starsEmitter, fn CGSizeMake(  bounds.size.width, bounds.size.height         ) ) // Determines the size of the particle emitter shape. Animatable.CAEmitterLayerSetEmitterShape(    starsEmitter, kCAEmitterLayerRectangle ) // Specifies the emitter shape.CAEmitterLayerSetRenderMode(      starsEmitter, kCAEmitterLayerPoints    ) // Defines how particle cells are rendered into the layer.CAEmitterLayerSetEmitterMode(     starsEmitter, kCAEmitterLayerUnordered ) // Specifies the emitter mode.// Configure emitter cellsstars = fn CAEmitterCellInitCAEmitterCellSetBirthRate(     stars, 500   ) // Sets how many particles to create every secondCAEmitterCellSetLifetime(      stars,   2.8 ) // Sets how long each particle should live (in seconds)CAEmitterCellSetLifetimeRange( stars,   0.5 ) // Sets the mean value by which the lifetime of the cell can vary. Animatable.CAEmitterCellSetVelocityRange( stars,   0.0 ) // Sets up amount by which the velocity of the cell can varyCAEmitterCellSetEmissionRange( stars,  60.0 ) // Sets up the angle, in radians, defining a cone around the emission angle. Animatable.CAEmitterCellSetScale(         stars,   0.3 ) // Sets how large particles should be (1.0 is full size. You can sscale upward.).CAEmitterCellSetScaleRange(    stars,   0.5 ) // Sets amount by which the scale of the cell can vary.CAEmitterCellSetAlphaRange(    stars,   0.5 ) // Sets amount by which the alpha component of the cell can vary. Animatable.CAEmitterCellSetAlphaSpeed(    stars,  0.05 ) // Sets sow fast particles should be faded out or in(in seconds), over the lifetime of the cell.CAEmitterCellSetEnabled(       stars,   YES ) // A Boolean value indicating whether or not cells from this emitter are rendered.CAEmitterCellSetColor(         stars,  fn ColorWithWhite( 1.0, 0.5 )	 ) // Sets the color to be applied to each particle.image = fn ImageCGImageForProposedRect( fn ImageNamed( @"star" ), NULL, NULL, NULL ) // CAEmitterCells need a CGImage, not an ImageRefCAEmitterCellSetContents(      stars,  (ptr)image ) // Sets image to be emittedCAEmitterCellSetName( stars, @"stars" )// Add emitter cell array to emitter layerCAEmitterLayerSetEmitterCells( starsEmitter, @[stars] )// Add emitter layer to view layerCALayerAddSublayer( layer, starsEmitter )end fnvoid local fn BuildWindow// Subclassing window allows first two events in fn DoDialog to worksubclass window _window, @"Earth Moon and Stars Demo", ( 0, 0, 700, 700 )// Necessary to keep layers synchronizedViewSetWantsLayer( _windowContentViewTag, YES )// Create view to hold emitter layerview _starView, ( 0, 0, 700, 700 ), _windowend fnvoid local fn DoDialog( ev as long, tag as long, wnd as long, obj as CFTypeRef )select ( ev )// Allows subclassed window to be dragged from anywhere, not just the title barcase _windowMouseDown          : WindowPerformWindowDragWithEvent( wnd, obj )// Needed to activate title bar when subclassed window is brought to frontcase _windowCanBecomeKeyWindow : DialogEventSetBool( YES )case _windowWillClose          : endend selectend fnon dialog fn DoDialogfn BuildWindowfn RotatingEarthfn RotatingMoonfn TwinklingStarsHandleEvents