/*   CAEmitter Longitude Demo   Shows how to control direction of emissions   using CAEmitterCellSetEmissionLongitude.   20210309 — Ken Shmidheiser*/output file "CAEmitter Longitude Demo"include resources "red_dot.png"_window = 1_originRadioGroup1 = 1_flowRadioGroup    = 2begin enum 1_view_emitterPoint1_emitterPoint2_emitterPoint3_emitterPoint4_emitterPoint5_emitterPoint6_emitterPoint7_emitterPoint8_emitterPoint9_separator_originLabel_origin1_origin2_origin3_origin4_origin5_origin6_origin7_origin8_origin9_flow1_flow2_flow3_flow4_flow5_flow6_flow7_flow8end enumlocal fn Emitter( emitterOrigin as NSInteger, emitterDirection as NSInteger ) as CAEmitterLayerRefCALayerRef          layerCGRect              boundsCAEmitterLayerRef   emitterLayerCAEmitterCellRef    emitterCellCGImageRef          imageimage  = fn ImageCGImageForProposedRect( fn ImageNamed( @"red_dot" ), NULL, NULL, NULL )bounds = fn ViewBounds( _view )ViewSetWantsLayer( _view, YES )layer = fn ViewLayer( _view )CALayerSetBackgroundColor( layer, fn ColorBlack )emitterLayer = fn CAEmitterLayerInitselect ( emitterOrigin )case 1 : CAEmitterLayerSetEmitterPosition( emitterLayer, fn CGPointMake( bounds.size.width / 2, bounds.size.height     ) )  // top centercase 2 : CAEmitterLayerSetEmitterPosition( emitterLayer, fn CGPointMake( bounds.size.width / 2, 0                      ) )  // bottom centercase 3 : CAEmitterLayerSetEmitterPosition( emitterLayer, fn CGPointMake( bounds.size.width / 2, bounds.size.height / 2 ) )  // center axiscase 4 : CAEmitterLayerSetEmitterPosition( emitterLayer, fn CGPointMake(                     0, bounds.size.height / 2 ) )  // left centercase 5 : CAEmitterLayerSetEmitterPosition( emitterLayer, fn CGPointMake(     bounds.size.width, bounds.size.height / 2 ) )  // right centercase 6 : CAEmitterLayerSetEmitterPosition( emitterLayer, fn CGPointMake(                     0, bounds.size.height     ) )  // top leftcase 7 : CAEmitterLayerSetEmitterPosition( emitterLayer, fn CGPointMake(     bounds.size.width, bounds.size.height     ) )  // top rightcase 8 : CAEmitterLayerSetEmitterPosition( emitterLayer, fn CGPointMake(                     0, 0                      ) )  // bottom leftcase 9 : CAEmitterLayerSetEmitterPosition( emitterLayer, fn CGPointMake(     bounds.size.width, 0                      ) )  // bottom rightend selectCAEmitterLayerSetSeed(         emitterLayer, (UInt32)fn DateWithTimeIntervalSince1970( 0 ) )CAEmitterLayerSetRenderMode(   emitterLayer, kCAEmitterLayerUnordered )emitterCell = fn CAEmitterCellInitCAEmitterCellSetBirthRate(     emitterCell,   2.0      )CAEmitterCellSetLifetime(      emitterCell,  20.0      )CAEmitterCellSetLifetimeRange( emitterCell,   0.0      )CAEmitterCellSetVelocity(      emitterCell,  70.0      )CAEmitterCellSetVelocityRange( emitterCell,   0.0      )CAEmitterCellSetEmissionRange( emitterCell, PI * 4.0   )CAEmitterCellSetScale(         emitterCell,   0.1      )CAEmitterCellSetScaleRange(    emitterCell,   0.0      )CAEmitterCellSetEnabled(       emitterCell,  YES       )CAEmitterCellSetContents(      emitterCell, (ptr)image )/*   emissionLongitude - direction of particles on x/y plane beginning from emitter position.   NOTE: Depending on emitter position, particles may be emitted outside the view.   PI *  0.5  == up   PI *  1.5  == down   PI *  0.0  == right-to-left   PI *  1.0  == left-to-right   PI *  0.25 == angle-up-right   PI * -1.25 == angle-up-left   PI * -0.25 == angle-down-right   PI *  1.25 == angle-down-left*/select ( emitterDirection )case 1 : CAEmitterCellSetEmissionLongitude( emitterCell, PI *    0.5 )  // upcase 2 : CAEmitterCellSetEmissionLongitude( emitterCell, PI *    1.5 )  // downcase 3 : CAEmitterCellSetEmissionLongitude( emitterCell, PI *    0.0 )  // right-to-leftcase 4 : CAEmitterCellSetEmissionLongitude( emitterCell, PI *    1.0 )  // left-to-rightcase 5 : CAEmitterCellSetEmissionLongitude( emitterCell, PI *   0.25 )  // angle-up-rightcase 6 : CAEmitterCellSetEmissionLongitude( emitterCell, PI *  -1.25 )  // angle-up-leftcase 7 : CAEmitterCellSetEmissionLongitude( emitterCell, PI *  -0.25 )  // angle-down-rightcase 8 : CAEmitterCellSetEmissionLongitude( emitterCell, PI *   1.25 )  // angle-down-leftend selectCAEmitterLayerSetEmitterCells( emitterLayer, @[emitterCell] )CALayerAddSublayer( layer, emitterLayer )end fn = emitterLayervoid local fn BuildWindowNSINteger   iCFStringRef msgwindow _window, @"EmissionLongitude Demo", ( 0, 0, 940, 700 )ViewSetWantsLayer( _windowContentViewTag, YES )view _view, ( 60, 80, 600, 570 ), _windowtextLabel _emitterPoint1, @"▼", ( 345, 672, 30, 30 ) // top centertextLabel _emitterPoint2 ,@"▲", ( 345,  35, 30, 30 ) // bottom centertextLabel _emitterPoint3, @"",  (   0, 370, 30, 30 ) // center axistextLabel _emitterPoint4, @"▶︎", (   0, 353, 30, 30 ) // left centertextLabel _emitterPoint5, @"◀︎", ( 692, 353, 30, 30 ) // right centertextLabel _emitterPoint6, @"▼", (  48, 672, 30, 30 ) // top lefttextLabel _emitterPoint7, @"▼", ( 645, 672, 30, 30 ) // top righttextLabel _emitterPoint8, @"▲", (  48,  35, 30, 30 ) // bottom lefttextLabel _emitterPoint9, @"▲", ( 645,  35, 30, 30 ) // bottom rightfor i = _emitterPoint1 to _emitterPoint9ControlSetAlignment( i, NSTextAlignmentCenter )TextFieldSetTextColor( i, fn ColorGreen )ControlSetFontWithName( i, @"Menlo", 20.0 )TextFieldSetBackgroundColor( i, fn ColorClear )TextFieldSetDrawsBackground( i, YES )TextFieldSetBordered( i, NO )nextbox _separator,, ( 730, 70, 5, 580 ), NSBoxSeparatormsg = @"These radio buttons set the emitter's point of origin. ¬A green marker will designate that point with the exception ¬of the center axis which will have four markers pointing to ¬it in the center of the view. Depending on the emitter's ¬point of origin, and the location of the emitter cell's ¬emissionLongitude as selected by radio buttons around the view, ¬particles may be emitted off screen. The program purposely ¬allows this to help you help you conceptualize what's ¬happening in your code."textlabel _originLabel, msg, ( 745, 270, 160, 380 )ControlSetAlignment( _originLabel, NSTextAlignmentLeft )CGRect r = ( 745, 240, 115, 18 )button _origin1,, NSOnState, @"Top Center", r, NSButtonTypeRadior = fn CGRectOffset( r, 0, -22 )button _origin2,,, @"Bottom Center", r, NSButtonTypeRadior = fn CGRectOffset( r, 0, -22 )button _origin3,,, @"Center Axis", r, NSButtonTypeRadior = fn CGRectOffset( r, 0, -22 )button _origin4,,, @"Left Center", r, NSButtonTypeRadior = fn CGRectOffset( r, 0, -22 )button _origin5,,, @"Right Center", r, NSButtonTypeRadior = fn CGRectOffset( r, 0, -22 )button _origin6,,, @"Top Left", r, NSButtonTypeRadior = fn CGRectOffset( r, 0, -22 )button _origin7,,, @"Top Right", r, NSButtonTypeRadior = fn CGRectOffset( r, 0, -22 )button _origin8,,, @"Bottom Left", r, NSButtonTypeRadior = fn CGRectOffset( r, 0, -22 )button _origin9,,, @"Bottom Right", r, NSButtonTypeRadiofor i = _origin1 to _origin9ControlSetActionID( i, _originRadioGroup1 )nextbutton _flow1,, NSOnState, @"↑", ( 350,  54, 150, 22 ), NSButtonTypeRadio  // upbutton _flow2,,, @"↓",           ( 350, 652, 150, 22 ), NSButtonTypeRadio  // downbutton _flow3,,, @"→",           (  26, 353, 150, 22 ), NSButtonTypeRadio  // right-to-leftbutton _flow4,,, @"←",           ( 662, 353, 150, 22 ), NSButtonTypeRadio  // left-to-rightbutton _flow5,,, @"↗︎",           (  50,  54, 150, 22 ), NSButtonTypeRadio  // angle-up-rightbutton _flow6,,, @"↖︎",           ( 642,  54, 150, 22 ), NSButtonTypeRadio  // angle-down-rightbutton _flow7,,, @"↘︎",           (  50, 652, 150, 22 ), NSButtonTypeRadio  // angle-up-leftbutton _flow8,,, @"↙︎",           ( 642, 652, 150, 22 ), NSButtonTypeRadio  // angle-down-leftfor i = _flow1 to _flow8ControlSetActionID( i, _flowRadioGroup )ButtonSetTitleColor( i, fn ColorRed )nextend fnvoid local fn ClearEmitterCAEmitterLayerRef emitter = fn ArrayObjectAtIndex( fn CALayerSublayers( fn ViewLayer( _view ) ), 0 )CAEmitterLayerSetEmitterPosition( emitter, CGPointZero )CAEmitterLayerSetEmitterCells( emitter, NULL )CALayerRemoveFromSuperlayer( emitter )end fnvoid local fn ClearEmitterPositionPointersNSInteger ifor i = _emitterPoint1 to _emitterPoint9ControlSetStringValue( i, @"" )nextend fnvoid local fn SetCenterAxisMarkers// Turn on markers pointing to view's center pointControlSetStringValue( _emitterPoint1, @"▼" )ControlSetStringValue( _emitterPoint2, @"▲" )ControlSetStringValue( _emitterPoint4, @"▶︎" )ControlSetStringValue( _emitterPoint5, @"◀︎" )end fnvoid local fn SetEmittersNSInteger i, emitterPoint = 1, flowDirection = 1fn ClearEmitterPositionPointersfor i = _origin1 to _origin9if ( fn ButtonState( i ) == NSOnState )if i == _origin1 then emitterPoint = 1 : ControlSetStringValue( _emitterPoint1, @"▼" ) // top centerif i == _origin2 then emitterPoint = 2 : ControlSetStringValue( _emitterPoint2, @"▲" ) // bottom centerif i == _origin3 then emitterPoint = 3 : fn SetCenterAxisMarkers                       // center axisif i == _origin4 then emitterPoint = 4 : ControlSetStringValue( _emitterPoint4, @"▶︎" ) // left centerif i == _origin5 then emitterPoint = 5 : ControlSetStringValue( _emitterPoint5, @"◀︎" ) // right centerif i == _origin6 then emitterPoint = 6 : ControlSetStringValue( _emitterPoint6, @"▼" ) // top leftif i == _origin7 then emitterPoint = 7 : ControlSetStringValue( _emitterPoint7, @"▼" ) // top rightif i == _origin8 then emitterPoint = 8 : ControlSetStringValue( _emitterPoint8, @"▲" ) // bottom leftif i == _origin9 then emitterPoint = 9 : ControlSetStringValue( _emitterPoint9, @"▲" ) // bottom rightexit forend ifnextfor i = _flow1 to _flow8if ( fn ButtonState( i ) == NSOnState )if i == _flow1 then flowDirection = 1  // upif i == _flow2 then flowDirection = 2  // downif i == _flow3 then flowDirection = 3  // right-to-leftif i == _flow4 then flowDirection = 4  // left-to-rightif i == _flow5 then flowDirection = 5  // angle-up-rightif i == _flow6 then flowDirection = 6  // angle-down-rightif i == _flow7 then flowDirection = 7  // angle-up-leftif i == _flow8 then flowDirection = 8  // angle-up-leftexit forend ifnextfn ClearEmitterfn Emitter( emitterPoint, flowDirection )end fnvoid local fn DoDialog( ev as long, tag as long, wnd as long, obj as CFTypeRef )select ( ev )case _btnClick        : fn SetEmitterscase _windowWillClose : endend selectend fnon dialog fn DoDialogfn BuildWindowfn ClearEmitterPositionPointersfn SetCenterAxisMarkersButtonSetState( _origin3, NSOnState )ButtonSetState( _flow5,   NSOnState )fn Emitter( 3, 5 )HandleEvents