/*  CALayer Analog Clock Demo  20210309 — Ken Shmidheiser  20210312 — Bernie Wylde — Fixed sync issues*/output file "Analog Clock"include resources "ClockFace.png"_window = 1begin enum_clockViewend enumlocal fn BuildWindowCALayerRef           layer, hoursLayer, minutesLayer, secondsLayerCGRect               frameCFDateRef            dtCFTimeInterval       tiCGFloat              h, m, s, ha, ma, saCABasicAnimationRef  secondsAnimation, minutesAnimation, hoursAnimationwindow _window, @"CoreAnimation Clock Demo", ( 0, 0, 500, 500 )WindowSetBackgroundColor( _window, fn ColorBlack )// Use the window content view as the view for this demolayer = fn CALayerInitframe = fn ViewFrame( _windowContentViewTag )CALayerSetContents( layer, fn ImageNamed( @"ClockFace" ) )ViewSetLayer( _windowContentViewTag, layer )ViewSetWantsLayer( _windowContentViewTag, YES )// Create layer for hour handhoursLayer = fn CALayerInitCALayerSetBackgroundColor( hoursLayer, fn ColorBlack )CALayerSetAnchorPoint(     hoursLayer, fn CGPointMake( 0.5, 0  ) )CALayerSetPosition(        hoursLayer, fn CGPointMake( frame.size.width / 2, frame.size.height / 2 ) )CALayerSetBounds(          hoursLayer, fn CGRectMake(  0, 0, 10, frame.size.width / 2 -90 ) )CALayerAddSublayer( layer, hoursLayer )// Create layer for minute handminutesLayer = fn CALayerInitCALayerSetBackgroundColor( minutesLayer, fn ColorBlack )CALayerSetAnchorPoint(     minutesLayer, fn CGPointMake( 0.5, 0  ) )CALayerSetPosition(        minutesLayer, fn CGPointMake( frame.size.width / 2, frame.size.height / 2 ) )CALayerSetBounds(          minutesLayer, fn CGRectMake( 0, 0, 6, frame.size.width / 2 -45 ) )CALayerAddSublayer( layer, minutesLayer )// Create layer for second handsecondsLayer = fn CALayerInitCALayerSetBackgroundColor( secondsLayer, fn ColorWithRGB( 0.502, 0.000, 0.251, 1.0 ) )CALayerSetAnchorPoint(     secondsLayer, fn CGPointMake( 0.5, 0  ) )CALayerSetPosition(        secondsLayer, fn CGPointMake( frame.size.width / 2, frame.size.height / 2 ) )CALayerSetBounds(          secondsLayer, fn CGRectMake( 0, 0, 3, frame.size.width / 2 -35 ) )CALayerAddSublayer( layer, secondsLayer )// Place clock hands at correct locationsdt = fn CalendarStartOfDayForDate( fn CalendarCurrent, fn DateInit )ti = fn DateTimeIntervalSinceDate( fn DateInit, dt )h = ti / 3600.0m = ( h - int(h) ) * 60.0s = ( m - int(m) ) * 60.0ha = h / 12.0 * 360.0ma = m / 60.0 * 360.0sa = s / 60.0 * 360.0CALayerSetTransform( secondsLayer, fn CATransform3DMakeRotation( sa / 180.0 * PI, 0, 0, 1 ) )CALayerSetTransform( minutesLayer, fn CATransform3DMakeRotation( ma / 180.0 * PI, 0, 0, 1 ) )CALayerSetTransform( hoursLayer,   fn CATransform3DMakeRotation( ha / 180.0 * PI, 0, 0, 1 ) )// Add an animation for each layersecondsAnimation  = fn CABasicAnimationWithKeyPath( @"transform.rotation.z" )CAMediaTimingSetRepeatCount(       secondsAnimation, INFINITY )CAMediaTimingSetDuration(          secondsAnimation, 60       )CAAnimationSetRemovedOnCompletion( secondsAnimation, NO       )CABasicAnimationSetFromValue(      secondsAnimation, @( -sa * PI / 180 ) )CABasicAnimationSetByValue(        secondsAnimation, @( -2 * PI ) )CAAnimationSetTimingFunction(      secondsAnimation, fn CAMediaTimingFunctionWithName( kCAMediaTimingFunctionLinear ) )CALayerAddAnimation( secondsLayer, secondsAnimation, @"SecondAnimationKey" )minutesAnimation = fn CABasicAnimationWithKeyPath( @"transform.rotation.z" )CAMediaTimingSetRepeatCount(       minutesAnimation, INFINITY )CAMediaTimingSetDuration(          minutesAnimation, 60 * 60  )CAAnimationSetRemovedOnCompletion( minutesAnimation, NO       )CABasicAnimationSetFromValue(      minutesAnimation, @( -ma * PI / 180 )  )CABasicAnimationSetByValue(        minutesAnimation, @( -2 * PI ) )CAAnimationSetTimingFunction(      minutesAnimation, fn CAMediaTimingFunctionWithName( kCAMediaTimingFunctionLinear ) )CALayerAddAnimation( minutesLayer, minutesAnimation, @"MinutesAnimationKey" )hoursAnimation = fn CABasicAnimationWithKeyPath( @"transform.rotation.z" )CAMediaTimingSetRepeatCount(       hoursAnimation, INFINITY     )CAMediaTimingSetDuration(          hoursAnimation, 60 * 60 * 12 )CAAnimationSetRemovedOnCompletion( hoursAnimation, NO           )CABasicAnimationSetFromValue(      hoursAnimation, @( -ha * PI / 180 )  )CABasicAnimationSetByValue(        hoursAnimation, @( -2 * PI ) )CAAnimationSetTimingFunction(      hoursAnimation, fn CAMediaTimingFunctionWithName( kCAMediaTimingFunctionLinear ) )CALayerAddAnimation( hoursLayer, hoursAnimation, @"HoursAnimationKey" )end fnlocal fn DoDialog( ev as long, tag as long )select ( ev )case _viewWantsUpdateLayer : DialogEventSetBool(YES)case _windowWillClose      : endend selectend fnon dialog fn DoDialogfn BuildWindowHandleEvents