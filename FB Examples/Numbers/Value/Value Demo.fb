/*Demo creating ValueRef objects from range, point, size and rect;adding the objects to a mutable dictionary; and retrieving valuepbjects from dictionary by keys, and converting to originals.Ken ShmidheiserOctober 15, 2019*/ include "NSLog.incl"void local fn DoitValueRef   value, vCFRange    range, rangeFromDictCGPoint    point, pointFromDictCGSize     size, sizeFromDictCGRect     r, rectFromDictCFMutableDictionaryRef dict = fn MutableDictionaryWithCapacity( 0 )// Convert range, point, size and rect into ValueRef and load into dictionaryrange = fn CFRangeMake( 0, 100 )value = fn ValueWithRange( range )MutableDictionarySetObjectForKey( dict, value, @"range" )point = fn CGPointMake( 50, 100 )value = fn ValueWithPoint( point )MutableDictionarySetObjectForKey( dict, value, @"point" )size = fn CGSizeMake( 75, 25 )value = fn ValueWithSize( size )MutableDictionarySetObjectForKey( dict, value, @"size" )r = fn CGRectMake( 0 ,0, 500, 300 )value = fn ValueWithRect( r )MutableDictionarySetObjectForKey( dict, value, @"rect" )// Retrieve objects by key from dictionary and convert to originalv = fn DictionaryObjectForKey( dict, @"range" )rangeFromDict = fn ValueRange( v )NSLog( @"Range = %ld location, %ld length", (long)rangeFromDict.location, (long)rangeFromDict.length )v = fn DictionaryObjectForKey( dict, @"point" )pointFromDict = fn ValuePoint( v )NSLog( @"Point = %0.f x, %0.f y", (float)pointFromDict.x, (float)pointFromDict.y )v = fn DictionaryObjectForKey( dict, @"size" )sizeFromDict = fn ValueSize( v )NSLog( @"Size = %0.f width, %0.f height", (float)sizeFromDict.width, (float)sizeFromDict.height )v = fn DictionaryObjectForKey( dict, @"rect" )rectFromDict = fn ValueRect( v )NSLog( @"Rect = %0.f x, %0.f y, %0.f width, %0.f height", (float)rectFromDict.origin.x, (float)rectFromDict.origin.y, (float)rectFromDict.size.width, (float)rectFromDict.size.height )end fnfn DoItHandleEvents