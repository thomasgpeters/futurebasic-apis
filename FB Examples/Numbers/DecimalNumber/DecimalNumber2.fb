/*  DecimalNumber2*/include "NSLog.incl"CFStringRef local fn MultiplyStringValues( s1 as CFStringRef, s2 as CFStringRef )DecimalNumberRef   dcm1, dcm2, dcm3dcm1 = fn DecimalNumberWithString(s1)dcm2 = fn DecimalNumberWithString(s2)dcm3 = fn DecimalNumberByMultiplyingBy( dcm1, dcm2 )end fn = fn StringWithFormat(@"%@",dcm3)CFStringRef local fn MultiplyStringValuesWithRounding( s1 as CFStringRef, s2 as CFStringRef, round as short )DecimalNumberRef          dcm1, dcm2, dcm3DecimalNumberHandlerRef   handlerdcm1 = fn DecimalNumberWithString(s1)dcm2 = fn DecimalNumberWithString(s2)handler = fn DecimalNumberHandlerWithRoundingMode( NSRoundPlain, round, NO, NO, NO, NO )dcm3 = fn DecimalNumberByMultiplyingByWithBehavior( dcm1, dcm2, handler )end fn = fn StringWithFormat(@"%@",dcm3)void local fn DoItCFStringRef   val1String, val2String, resultStringfloat         val1, val2, resultval1String = @"52.35"val2String = @"13"NSLog(@"val1String: %@", val1String)NSLog(@"val2String: %@\n", val2String)NSLog(@"- floats -")val1 = fn StringFloatValue(val1String)val2 = fn StringFloatValue(val2String)result = val1 * val2resultString = fn StringWithFormat(@"%.9f",result)NSLog(@"val1: %.9f", val1)NSLog(@"val2: %.9f", val2)NSLog(@"result: %.9f", result)NSLog(@"resultString: %@\n", resultString)NSLog(@"- DecimalNumber -")NSLog(@"resultString: %@\n",fn MultiplyStringValues( val1String, val2String ))end fnfn DoItHandleEvents