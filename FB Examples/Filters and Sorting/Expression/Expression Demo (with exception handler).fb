/*  Expression (with exception handler) Demo*/_window = 1begin enum 1_formatFld_equalsLabel_resultLabel_calcBtnend enum_popover = 2begin enum 1_popoverLabelend enumvoid local fn ShowErrorPopover( string as CFStringRef )if ( fn PopoverExists( _popover ) == NO )popover _popover, (0,0,218,44), NSPopoverBehaviorTransienttextlabel _popoverLabel,, (5,5,208,34)end iftextlabel _popoverLabel, string,, _popoverwindow _windowPopoverShow( _popover, CGRectZero, _formatFld, CGRectMaxXEdge )end fnvoid local fn BuildWindowwindow _window, @"Expression Demo", (0,0,340,90)WindowSetContentMinSize( _window, fn CGSizeMake( 340, 90 ) )textfield _formatFld,, @"23 x 10 + 32", (20,49,200,21)ViewSetAutoresizingMask( _formatFld, NSViewMinYMargin + NSViewWidthSizable )textlabel _equalsLabel, @"=", (226,52,13,16)ViewSetAutoresizingMask( _equalsLabel, NSViewMinYMargin + NSViewMinXMargin )textlabel _resultLabel,, (243,52,79,16)ViewSetAutoresizingMask( _resultLabel, NSViewMinYMargin + NSViewMinXMargin )button _calcBtn,,, @"Calc", (14,13,67,32)ButtonSetKeyEquivalent( _calcBtn, @"\r" )ViewSetAutoresizingMask( _calcBtn, NSViewMaxYMargin )WindowMakeFirstResponder( _window, _formatFld )end fnvoid local fn Calculate( format as CFStringRef )ExpressionRef   expressionCFNumberRef     resultCFStringRef     stringExceptionRef    ee = NULLformat = fn StringByReplacingOccurrencesOfString( fn StringLowercaseString(format), @"x", @"*" )format = fn StringByReplacingOccurrencesOfString( format, @"^", @"**" )// if the user enters an invalid format, this call will crash the app// putting the call in the 'try' block will catch an exception and avoid a crashtryexpression = fn ExpressionWithFormat( format )end try// if an exception is raised, we'll end up in this 'catch' blockcatch ( e )expression = NULLstring = fn ExceptionReason(e)// get the reason for the exceptiontextlabel _resultLabel, @""fn ShowErrorPopover( string )end catch// code in the 'finally' block is always executed, whether exception or notfinallyif ( expression )// no errorresult = fn ExpressionValueWithObject( expression, NULL, NULL )string = fn NumberStringValue( result )textlabel _resultLabel, stringend ifend finallyend fnvoid local fn DoDialog( ev as long, tag as long )select ( ev )case _btnClickselect ( tag )case _calcBtn : fn Calculate( fn ControlStringValue( _formatFld ) )end selectend selectend fnfn BuildWindowon dialog fn DoDialogHandleEvents