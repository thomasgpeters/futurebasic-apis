/*  Expression Evaluator  Ken Shmidheiser*/include "NSLog.incl"void local fn DoItCFStringRef     stringExpression = @"sqrt(4 + 3 - 2) + log(5)"ExpressionRef   expression = fn ExpressionWithFormat( stringExpression )NSLog(@"%@ = %@\n", expression, fn ExpressionValueWithObject( expression, NULL, NULL ) )/* Unfortunately, NSExpression does not recognize the conventional ^ symbol to raise a value to a power. However, it does recognize **, thus 5^2 becomes 5**2*/stringExpression = @"5**2"expression = fn ExpressionWithFormat( stringExpression )NSLog(@"5^2 or %@ = %@\n", expression, fn ExpressionValueWithObject( expression, NULL, NULL ) )// You can also use the C function pow to raise a value to a power as in this example of 2^4stringExpression = fn StringWithFormat( @"%.f", fn pow(2,4) )expression = fn ExpressionWithFormat( stringExpression )NSLog(@"2^4 = %d\n", fn NumberLongValue( fn ExpressionValueWithObject( expression, NULL, NULL ) ) )stringExpression = @"(2 + 3) * (7 - 3)"expression = fn ExpressionWithFormat( stringExpression )NSLog(@"%@ = %@\n", expression, fn ExpressionValueWithObject( expression, NULL, NULL ) )stringExpression = @"9 + 14/2 - 6*(5 + 3)"expression = fn ExpressionWithFormat( stringExpression )NSLog(@"%@ = %@\n", expression, fn ExpressionValueWithObject( expression, NULL, NULL ) )stringExpression = @"5*(2.56-1.79)-4.1"expression = fn ExpressionWithFormat( stringExpression )NSLog(@"%@ = %@\n", expression, fn ExpressionValueWithObject( expression, NULL, NULL ) )stringExpression = @"34.5*(23+1.5)/2"expression = fn ExpressionWithFormat( stringExpression )NSLog(@"%@ = %@\n", expression, fn ExpressionValueWithObject( expression, NULL, NULL ) )// Note that the fraction 11/5 must be entered 11.0/5.0 to be evaluated as a float and not an integerstringExpression = @"11.0/5.0"expression = fn ExpressionWithFormat( stringExpression )CFNumberRef floatSolution = fn ExpressionValueWithObject( expression, NULL, NULL )NSLog(@"%@ = %0.3f\n", expression, fn NumberFloatValue(floatSolution) )// Evaluate (1/2) / (4/3)stringExpression = @"(1.0/2.0)/(4.0/3.0)"expression = fn ExpressionWithFormat( stringExpression )floatSolution = fn ExpressionValueWithObject( expression, NULL, NULL )NSLog(@"%@ = %0.4f\n", expression, fn NumberFloatValue(floatSolution) )stringExpression = @"4 + 5 - 2**3"expression = fn ExpressionWithFormat( stringExpression )NSLog(@"%@ = %@\n", expression, fn ExpressionValueWithObject( expression, NULL, NULL ) )expression = fn ExpressionForConstantValue( @4.2 )NSLog(@"%@\n", fn ExpressionValueWithObject( expression, NULL, NULL ) )// NSExpresssion's native "now" method for current dateexpression = fn ExpressionForFunction( @"now", @[] )NSLog(@"Current time is: %@\n",fn ExpressionValueWithObject( expression, NULL, NULL ) )expression = fn ExpressionWithFormatAndArgumentArray( @"%f*%f", @[@3.4,@3.1] )NSLog(@"3.4 * 3.1 = %@\n",fn ExpressionValueWithObject( expression, NULL, NULL ) )expression = fn ExpressionWithFormat( @"%f*%f", 3.0, 3.5, NULL )NSLog(@"3 * 3.5 = %@\n",fn ExpressionValueWithObject( expression, NULL, NULL ) )CFArrayRef numbers = @[@1.0,@2.0,@3.0,@4.0,@5.0,@9.0,@11.0]expression = fn ExpressionForFunction( @"stddev:", @[fn ExpressionForConstantValue(numbers)] )NSLog(@"The standard deviation for the number set 1, 2, 3, 4, 5, 9 and 11 is %@\n", fn ExpressionValueWithObject( expression, NULL, NULL ) )expression = fn ExpressionForFunction( @"average:", @[fn ExpressionForConstantValue(numbers)] )NSLog(@"The average for the number set 1, 2, 3, 4, 5, 9 and 11 is %@\n", fn ExpressionValueWithObject( expression, NULL, NULL ) )expression = fn ExpressionForFunction( @"sum:", @[fn ExpressionForConstantValue(numbers)] )NSLog(@"The sum of 1 + 2 + 3 + 4 + 5 + 9 + 11 = %@\n", fn ExpressionValueWithObject( expression, NULL, NULL ) )// Here's a little parsing action adding NSPredicate to NSExpression courtesy:// http://funwithobjc.tumblr.com/post/1553469975/abusing-nspredicatestringExpression = @"22/7.0 + (13*42) - 1024 = 0"PredicateRef    parsed = fn PredicateWithFormat( stringExpression )ExpressionRef   lft = fn ComparisonPredicateLeftExpression( (ComparisonPredicateRef)parsed )CFNumberRef     result = fn ExpressionValueWithObject( lft, NULL, NULL )NSLog(@"22/7.0 + (13*42) - 1024 = %@", result)end fnfn DoItHandleEvents