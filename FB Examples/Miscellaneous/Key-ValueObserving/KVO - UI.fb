/*  Key-Value Observing (KVO)*/include "NSLog.incl"#define WORDS fn StringComponentsSeparatedByCharactersInSet( fn StringWithContentsOfURL( fn URLFileURLWithPath( @"/usr/share/dict/words" ), NSUTF8StringEncoding, NULL ), fn CharacterSetNewlineSet )_window = 1begin enum 1_changeTitleBtn_pushBtn_changeTextBtn_textFld_changeSliderBtn_sliderend enumvoid local fn MyObserver( obj as CFTypeRef, keyPath as CFStringRef, change as CFDictionaryRef, context as ptr )NSLog(@"%@ changed from: \"%@\" to: \"%@\"",keyPath,change[@"old"],change[@"new"])end fnvoid local fn BuildWindowwindow _window, @"Key-Value Observing", (0,0,550,124)button _changeTitleBtn,,, @"Change Button Title", (13,77,182,32)button _pushBtn,,, @"button", (193,77,344,32)button _changeTextBtn,,, @"Change Text Field String", (13,45,182,32)textfield _textFld,, @"textfield", (200,51,330,22)button _changeSliderBtn,,, @"Change Slider Value", (13,13,182,32)slider _slider,, 50, (198,14,334,28)NSKeyValueObservingOptions options = NSKeyValueObservingOptionOld + NSKeyValueObservingOptionNewObjectAddObserver( fn WindowWithTag(_window), @"frame", options, @fn MyObserver, NULL )ObjectAddObserver( fn ButtonWithTag(_pushBtn), @"title", options, @fn MyObserver, NULL )ObjectAddObserver( fn TextFieldWithTag(_textFld), @"stringValue", options, @fn MyObserver, NULL )ObjectAddObserver( fn SliderWithTag(_slider), @"doubleValue", options, @fn MyObserver, NULL )ObjectAddObserver( NSApp, @"effectiveAppearance", options, @fn MyObserver, NULL )end fnvoid local fn DoDialog( ev as long, tag as long )select ( ev )case _btnClickselect ( tag )case _changeTitleBtn  : button _pushBtn,,, fn ArrayObjectAtIndex( WORDS, rnd(fn ArrayCount(WORDS))-1 )case _changeTextBtn   : textfield _textFld,, fn ArrayObjectAtIndex( WORDS, rnd(fn ArrayCount(WORDS))-1 )case _changeSliderBtn : slider _slider,, rnd(101)-1case _slider          : NSLog(@"User changed slider")end selectcase _controlTextDidChange : NSLog(@"User changed text")end selectend fnon dialog fn DoDialogfn BuildWindowHandleEvents