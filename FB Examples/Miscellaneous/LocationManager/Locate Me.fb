/* Locate Me Demo shows current geographic location of user's Mac. This began as a test bed for CocoaUI's CoreLocation and MapKit classes. While the FB Examples include some simple MapKit view demo code, this demo builds on that foundation showcasing more advanced features. On initial launch, the macOS will require user permission to access Location Services. Requires macOS 10.13.x or newer. May 5, 2021 Ken Shmidheiser*/output file "Locate Me"include "Tlbx MapKit.incl"_window = 1begin enum 1_mapView_infoField_mapTypePopup_mapPopupLabelend enumvoid local fn BuildWindowCGRect rr = fn CGRectMake( 0, 0, 510, 510 )window _window, @"Locate Me", rWindowCenter(_window)WindowSetContentMinSize( _window, fn CGSizeMake( 510, 200 ) )r = fn CGRectMake( 0, 50, 510, 370 )mkmapview _mapView, rMKMapViewSetMapType( _mapView, MKMapTypeHybrid )MKMapViewSetShowsZoomControls( _mapView, YES )MKMapViewSetShowsScale( _mapView, YES )MKMapViewSetShowsCompass( _mapView, YES )ViewSetAutoresizingMask( _mapView, NSViewWidthSizable + NSViewHeightSizable )r = fn CGRectMake( 0, 410, 510, 90 )textfield _infoField, YES,, r, _windowTextFieldSetEditable( _infoField, NO )TextFieldSetSelectable( _infoField, NO )TextFieldSetDrawsBackground( _infoField, NO )TextFieldSetBordered( _infoField, NO )ControlSetAlignment( _infoField, NSTextAlignmentCenter )ControlSetFontWithName( _infoField, @"Menlo Bold", 14.0 )ViewSetAutoresizingMask( _infoField, NSViewWidthSizable + NSViewMinYMargin )r = fn CGRectMake( 330, 11, 160, 24 )popupbutton _mapTypePopup,,, @"Standard;Satellite;Hybrid;SatelliteFlyover;HybridFlyover;MutedStandard", rPopUpButtonSelectItemWithTitle( _mapTypePopup, @"Hybrid" )ViewSetAutoresizingMask( _mapTypePopup, NSViewMinXMargin + NSViewMaxYMargin )r = fn CGRectMake( 220, 10, 107, 24 )textlabel _mapPopupLabel, @"Select map type:", rViewSetAutoresizingMask( _mapPopupLabel, NSViewMinXMargin + NSViewMaxYMargin )end fnvoid local fn SetCenterCoordinate( tag as NSInteger, centerCoordinate as CLLocationCoordinate2D, zoomLevel as NSUInteger, animated as Boolean )CGRect              frameMKCoordinateSpan    spanMKCoordinateRegion  regionframe  = fn ViewFrame( tag )span   = fn MKCoordinateSpanMake( 0, 360 / fn pow( 2, zoomLevel ) * frame.size.width / 256 )region = fn MKCoordinateRegionMake( centerCoordinate, span )MKMapViewSetRegion( tag, region, animated )end fnvoid local fn SetLocation( coord as CLLocationCoordinate2D, zoomLevel as NSUInteger, title as CFStringRef, subtitle as CFStringRef )fn SetCenterCoordinate( _mapView, coord, zoomLevel, YES )MKMapViewRemoveAnnotations( _mapView, fn MKMapViewAnnotations( _mapView ) )MKPointAnnotationRef annotation = fn MKPointAnnotationWithTitle( coord, title, subtitle )MKMapViewAddAnnotation( _mapView, annotation )end fnvoid local fn InitializeLocationServicesCLLocationManagerRef  clManagerclManager = fn CLLocationManagerInitCLLocationManagerInstallDelegate( clManager )CLLocationManagerRequestLocation( clManager )CLLocationManagerSetDesiredAccuracy( clManager, kCLLocationAccuracyBest )if ( fn CLLocationManagerLocationServicesEnabled )CLLocationManagerStartUpdatingLocation( clManager )end ifAppPropertySet( @"CLLocationManager", clManager)end fnlocal fn GetLocationCoordinates as CLLocationCoordinate2DCLLocationManagerRef    clManagerCLLocationRef           locationCLLocationCoordinate2D  coordinatesclManager   = fn AppProperty( @"CLLocationManager" )location    = fn CLLocationManagerLocation( clManager )coordinates = fn CLLocationCoordinate( location )end fn = coordinateslocal fn GetAccuracyInMeters as CLLocationAccuracyCLLocationManagerRef clManagerCLLocationRef        locationCLLocationAccuracy   accuracyclManager = fn AppProperty( @"CLLocationManager" )location  = fn CLLocationManagerLocation( clManager )accuracy  = fn CLLocationHorizontalAccuracy( location )end fn = accuracydef fn ConvertMetersToFeet( meters as CLLocationAccuracy ) as double = meters * 3.281void local fn UpdateLocationCLLocationCoordinate2D  coordinatesCLLocationAccuracy      accuracydouble                  feetCFStringRef             locationStrcoordinates = fn GetLocationCoordinatesaccuracy    = fn GetAccuracyInMetersfeet        = fn ConvertMetersToFeet( accuracy )fn SetLocation( coordinates, 18, fn StringWithFormat( @"%@'s Mac", fn NSUserName ), @"Located here." )locationStr = fn StringWithFormat( @"%@'s Mac is located at:\nLatitude: %.6f\tLongitude: %.6f\nWith an estimated accuracy of %.0f meters, or %.0f feet.", fn NSUserName, coordinates.latitude, coordinates.longitude, accuracy, feet )ControlSetStringValue( _infoField, locationStr )end fnvoid local fn UpdateMap( tag as NSInteger )CFStringRef mapTypeStrMKMapType   mapTypemapTypeStr = fn PopUpButtonTitleOfSelectedItem( tag )select ( mapTypeStr )case @"Standard"         : mapType = MKMapTypeStandardcase @"Satellite"        : mapType = MKMapTypeSatellitecase @"SatelliteFlyover" : mapType = MKMapTypeSatelliteFlyovercase @"HybridFlyover"    : mapType = MKMapTypeHybridFlyovercase @"MutedStandard"    : mapType = MKMapTypeMutedStandardcase else                : mapType = MKMapTypeHybrid// default "Hybrid" popup selectionend selectMKMapViewSetMapType( _mapView, mapType )fn UpdateLocationend fnvoid local fn DoAppEvent( ev as long )CLLocationManagerRef  clManagerselect (ev)case _appDidFinishLaunchingfn BuildWindowfn InitializeLocationServicescase _appWillTerminateclManager = fn AppProperty( @"CLLocationManager" )CLLocationManagerStopUpdatingLocation( clManager )end selectend fnvoid local fn DoDialog( ev as long, tag as long, wnd as long, obj as CFTypeRef )select ( ev )case _clLocationManagerDidUpdateLocations : fn UpdateLocation//case _clLocationManagerDidFail : alert 1,, objcase _btnClickselect (tag )case _mapTypePopup : fn UpdateMap( tag )end selectcase _windowWillClose : endend selectend fnon AppEvent fn DoAppEventon dialog fn DoDialogHandleEvents