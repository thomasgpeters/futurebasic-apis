/*  Network Quality  Ken Shmidheiser 20240828  Updated: 20240828 Ken  Requires macOS Monterey or newer for "networkQuality" Terminal command*/include "NSLog.incl"_window = 1begin enum 1_progBar_scrollView_textView_checkBtnend enumvoid local fn BuildWindowwindow _window, @"Network Quality", (0,0,480,270)WindowSetContentMinSize( _window, fn CGSizeMake( 200, 100 ) )scrollview _scrollView, (-1,60,482,212)ViewSetAutoresizingMask( _scrollView, NSViewWidthSizable + NSViewHeightSizable )textview _textView,, _scrollViewTextViewSetTextContainerInset( _textView, fn CGSizeMake( 10.0, 10.0 ) )TextSetFontWithName( _textView, @"Menlo", 12.0 )progressbar -_progBar,, (0,257,480,20)ProgressIndicatorSetIndeterminate( _progBar, YES )ViewSetAutoresizingMask( _progBar, NSViewWidthSizable + NSViewMinYMargin )button _checkBtn,,, @"Check Network Quality", (154,13,173,32)ViewSetAutoresizingMask( _checkBtn, NSViewMinXMargin + NSViewMaxXMargin + NSViewMaxYMargin )end fnlocal fn TaskTerminationHandler( task as TaskRef )if ( fn TaskIsRunning( task ) == NO )TaskTerminate( task )// NSLog( @"Task completed and terminated.\n" )end ifend fnvoid local fn ReceivedData( notification as NotificationRef )FileHandleRef fh = fn NotificationObject( notification )CFDataRef    dta = fn FileHandleAvailableData( fh )if ( fn DataLength( dta ) > 0 ) // If streaming data is found, re-register for more data and printFileHandleWaitForDataInBackgroundAndNotify( fh )CFStringRef incomingStr = fn StringWithData( dta, NSUTF8StringEncoding )TextSetString( _textView, incomingStr )progressbar -_progBarProgressIndicatorStopAnimation( _progBar )end ifend fnvoid local fn ExecuteCommand( cmd as CFStringRef )ErrorRef err = NULLprogressbar _progBarProgressIndicatorStartAnimation( _progBar )TaskRef task = fn TaskInitTaskSetExecutableURL( task, fn URLFileURLWithPath( @"/bin/zsh" ) )CFArrayRef arguments = fn ArrayWithObjects( @"-c", cmd, NULL )TaskSetArguments( task, arguments )PipeRef p = fn PipeInitTaskSetStandardOutput( task, p )TaskSetStandardError(  task, p )FileHandleRef fh = fn PipeFileHandleForReading( p )FileHandleWaitForDataInBackgroundAndNotify( fh )NotificationCenterAddObserver( @fn ReceivedData, NSFileHandleDataAvailableNotification, NULL )NotificationCenterAddObserver( @fn TaskTerminationHandler, NSFileHandleReadToEndOfFileCompletionNotification, NULL )BOOL success = fn TaskLaunch( task, @err )if ( success )TextSetString( _textView, @"Connected. Ready to receive data. This may take some time to finish.\n\n" )elseNSLog( @"%@", fn ErrorLocalizedDescription( err ) )exit fnend ifTaskSetTerminationHandler( task, @fn TaskTerminationHandler )end fnvoid local fn DoDialog( ev as long, tag as long )select ( ev )case _btnClick        : fn ExecuteCommand( @"networkQuality" )case _windowWillClose : endend selectend fnfn BuildWindowon dialog fn DoDialogHandleEvents