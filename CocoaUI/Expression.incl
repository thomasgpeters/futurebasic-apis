/*  Expression  Bernie Wylde 20190211  Framework: Foundation  Inherits from: Object  NSExpression - https://developer.apple.com/documentation/foundation/nsexpression?language=objc */// types#if ndef _DEFINEDINCOCOA#define NSExpressionType as NSUInteger#endifsystem NSExpressionType NSConstantValueExpressionType   // Expression that always returns the same valuesystem NSExpressionType NSEvaluatedObjectExpressionType // Expression that always returns the parameter object itselfsystem NSExpressionType NSVariableExpressionType        // Expression that always returns whatever is stored at 'variable' in the bindings dictionarysystem NSExpressionType NSKeyPathExpressionType         // Expression that returns something that can be used as a key pathsystem NSExpressionType NSFunctionExpressionType        // Expression that returns the result of evaluating a symbolsystem NSExpressionType NSUnionSetExpressionType        // Expression that returns the result of doing a unionSet: on two expressions that evaluate to flat collections (arrays or sets)system NSExpressionType NSIntersectSetExpressionType    // Expression that returns the result of doing an intersectSet: on two expressions that evaluate to flat collections (arrays or sets)system NSExpressionType NSMinusSetExpressionType        // Expression that returns the result of doing a minusSet: on two expressions that evaluate to flat collections (arrays or sets)system NSExpressionType NSSubqueryExpressionTypesystem NSExpressionType NSAggregateExpressionTypesystem NSExpressionType NSAnyKeyExpressionTypesystem NSExpressionType NSBlockExpressionTypesystem NSExpressionType NSConditionalExpressionType// Classtoolbox fn ExpressionClass = ClassRef// Inittoolbox fn ExpressionWithType( NSExpressionType type ) = ExpressionReftoolbox fn ExpressionWithFormat( CFStringRef format, ... ) = ExpressionReftoolbox fn ExpressionWithFormatAndArgumentArray( CFStringRef format, CFArrayRef argArray ) = ExpressionReftoolbox fn ExpressionWithFormatAndArguments( CFStringRef format, va_list argList ) = ExpressionRef// Create for valuetoolbox fn ExpressionForConstantValue( CFTypeRef obj ) = ExpressionReftoolbox fn ExpressionForEvaluatedObject = ExpressionReftoolbox fn ExpressionForKeyPath( CFStringRef keyPath ) = ExpressionReftoolbox fn ExpressionForVariable( CFStringRef string ) = ExpressionReftoolbox fn ExpressionForAnyKey = ExpressionRef// Create collectiontoolbox fn ExpressionForAggregate( CFArrayRef subexpressions ) = ExpressionReftoolbox fn ExpressionForUnionSet( ExpressionRef left, ExpressionRef right ) = ExpressionReftoolbox fn ExpressionForIntersectSet( ExpressionRef left, ExpressionRef right ) = ExpressionReftoolbox fn ExpressionForMinusSet( ExpressionRef left, ExpressionRef right ) = ExpressionRef// Create subquerytoolbox fn ExpressionForSubquery( ExpressionRef ref, CFStringRef variable, PredicateRef predicate ) = ExpressionRef// Create using blocks/*  ExpressionForArguments  callback example:    local fn MyExpressionForArgumentsCallback( evaluatedObj as CFTypeRef, expressions as CFArrayRef, context as CFMutableDictionaryRef, userData as ptr ) as CFTypeRef    end fn = evaluatedObj*/toolbox fn ExpressionForArguments( CFArrayRef arguments, ptr callback, ptr userData ) = ExpressionRef// Create for functiontoolbox fn ExpressionForFunction( CFStringRef name, CFArrayRef arguments ) = ExpressionRef// Infotoolbox fn ExpressionArguments( ExpressionRef ref ) = CFArrayReftoolbox fn ExpressionCollection( ExpressionRef ref ) = CFTypeReftoolbox fn ExpressionConstantValue( ExpressionRef ref ) = CFTypeReftoolbox fn ExpressionType( ExpressionRef ref ) = NSExpressionTypetoolbox fn ExpressionFunction( ExpressionRef ref ) = CFStringReftoolbox fn ExpressionKeyPath( ExpressionRef ref ) = CFStringReftoolbox fn ExpressionOperand( ExpressionRef ref ) = ExpressionReftoolbox fn ExpressionPredicate( ExpressionRef ref ) = PredicateReftoolbox fn ExpressionLeftExpression( ExpressionRef ref ) = ExpressionReftoolbox fn ExpressionRightExpression( ExpressionRef ref ) = ExpressionReftoolbox fn ExpressionVariable( ExpressionRef ref ) = CFStringRef// Evaluatetoolbox fn ExpressionValueWithObject( ExpressionRef ref, CFTypeRef obj, CFMutableDictionaryRef context ) = CFTypeReftoolbox ExpressionAllowEvaluation( ExpressionRef ref )// Initializerstoolbox fn ExpressionForConditional( PredicateRef predicate, ExpressionRef trueExpression, ExpressionRef falseExpression ) = ExpressionRef// Instance propertiestoolbox fn ExpressionFalseExpression( ExpressionRef ref ) = ExpressionRef toolbox fn ExpressionTrueExpression( ExpressionRef ref ) = ExpressionRef  