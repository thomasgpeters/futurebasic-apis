/*  Progress.incl  Bernie Wylde 20190316  Framework: Foundation  Inherits from: Object  NSProgress - https://developer.apple.com/documentation/foundation/nsprogress?language=objc*/// kind#if ndef _DEFINEDINCOCOA#define NSProgressKind as CFStringRef#endifsystem CFStringRef NSProgressKindFile// file operation kind#if ndef _DEFINEDINCOCOA#define NSProgressFileOperationKind as CFStringRef#endifsystem CFStringRef NSProgressFileOperationKindCopyingsystem CFStringRef NSProgressFileOperationKindDecompressingAfterDownloadingsystem CFStringRef NSProgressFileOperationKindDownloadingsystem CFStringRef NSProgressFileOperationKindReceiving// userInfo key#if ndef _DEFINEDINCOCOA#define NSProgressUserInfoKey as CFStringRef#endifsystem CFStringRef NSProgressEstimatedTimeRemainingKeysystem CFStringRef NSProgressThroughputKeysystem CFStringRef NSProgressFileAnimationImageKeysystem CFStringRef NSProgressFileAnimationImageOriginalRectKeysystem CFStringRef NSProgressFileCompletedCountKeysystem CFStringRef NSProgressFileIconKeysystem CFStringRef NSProgressFileOperationKindKeysystem CFStringRef NSProgressFileTotalCountKeysystem CFStringRef NSProgressFileURLKey// Classtoolbox fn ProgressClass = ClassRef// Createtoolbox fn ProgressWithParent( ProgressRef parent, CFDictionaryRef userInfo ) = ProgressReftoolbox fn ProgressDiscreteWithTotalUnitCount( SInt64 totalUnitCount ) = ProgressReftoolbox fn ProgressWithTotalUnitCount( SInt64 totalUnitCount ) = ProgressReftoolbox fn ProgressWithPendingUnitCount( SInt64 totalUnitCount, ProgressRef parent, SInt64 pendingUnitCount ) = ProgressRef// Currenttoolbox fn ProgressCurrent = ProgressReftoolbox ProgressBecomeCurrent( ProgressRef ref, SInt64 pendingUnitCount )toolbox ProgressAddChild( ProgressRef ref, ProgressRef child, SInt64 pendingUnitCount )toolbox ProgressResignCurrent( ProgressRef ref )// Reportingtoolbox fn ProgressTotalUnitCount( ProgressRef ref ) = SInt64toolbox ProgressSetTotalUnitCount( ProgressRef ref, SInt64 count )toolbox fn ProgressCompletedUnitCount( ProgressRef ref ) = SInt64toolbox ProgressSetCompletedUnitCount( ProgressRef ref, SInt64 count )toolbox fn ProgressLocalizedDescription( ProgressRef ref ) = CFStringReftoolbox fn ProgressLocalizedAdditionalDescription( ProgressRef ref ) = CFStringRef// Observingtoolbox fn ProgressFractionCompleted( ProgressRef ref ) = double// Controllingtoolbox fn ProgressIsCancellable( ProgressRef ref ) = BOOLtoolbox ProgressIsSetCancellable( ProgressRef ref, BOOL flag )toolbox fn ProgressIsCancelled( ProgressRef ref ) = BOOLtoolbox ProgressCancel( ProgressRef ref )/*  Cancellation handler example:    local fn MyProgressCancellationHandler( progress as ProgressRef, userData as ptr )    end fn*/toolbox ProgressSetCancellationHandler( ProgressRef ref, ptr handler, ptr userData )toolbox fn ProgressIsPausable( ProgressRef ref ) = BOOLtoolbox ProgressIsSetPausable( ProgressRef ref, BOOL flag )toolbox fn ProgressIsPaused( ProgressRef ref ) = BOOLtoolbox ProgressPause( ProgressRef ref )/*  Pausing handler example:    local fn MyProgressPausingHandler( progress as ProgressRef, userData as ptr )    end fn*/toolbox ProgressSetPausingHandler( ProgressRef ref, ptr handler, ptr userData )toolbox ProgressResume( ProgressRef ref )/*  Resuming handler example:    local fn MyProgressResumingHandler( progress as ProgressRef, userData as ptr )    end fn*/toolbox ProgressSetResumingHandler( ProgressRef ref, ptr handler, ptr userData )// Infotoolbox fn ProgressIsIndeterminate( ProgressRef ref ) = BOOLtoolbox fn ProgressKind( ProgressRef ref ) = CFStringReftoolbox ProgressSetKind( ProgressRef ref, CFStringRef kind )toolbox ProgressSetUserInfoObject( ProgressRef ref, CFTypeRef obj, CFStringRef key )toolbox fn ProgressUserInfo( ProgressRef ref ) = CFDictionaryRef// Instance propertiestoolbox fn ProgressFileOperationKind( ProgressRef ref ) = CFStringRef     toolbox ProgressSetFileOperationKind( ProgressRef ref, CFStringRef kind ) toolbox fn ProgressFileURL( ProgressRef ref ) = CFURLRef                  toolbox ProgressSetFileURL( ProgressRef ref, CFURLRef url )               toolbox fn ProgressIsFinished( ProgressRef ref ) = BOOL                   toolbox fn ProgressIsOld( ProgressRef ref ) = BOOLtoolbox fn ProgressEstimatedTimeRemaining( ProgressRef ref ) = CFNumberRef       toolbox ProgressSetEstimatedTimeRemaining( ProgressRef ref, CFNumberRef number ) toolbox fn ProgressFileCompletedCount( ProgressRef ref ) = CFNumberRef           toolbox ProgressSetFileCompletedCount( ProgressRef ref, CFNumberRef number )     toolbox fn ProgressFileTotalCount( ProgressRef ref ) = CFNumberRef               toolbox ProgressSetFileTotalCount( ProgressRef ref, CFNumberRef number )         toolbox fn ProgressThroughput( ProgressRef ref ) = CFNumberRef                   toolbox ProgressSetThroughput( ProgressRef ref, CFNumberRef number )             // Instance methodstoolbox ProgressPublish( ProgressRef ref )toolbox ProgressUnpublish( ProgressRef ref )/*  Perform as current callback example:    local fn MyProgressPerformAsCurrentCallback( progress as ProgressRef, userData as ptr )    end fn*/toolbox ProgressPerformAsCurrent( ProgressRef ref, SInt64 pendingUnitCount, ptr callback, ptr userData )// Type methods/*  Add subscriber handler example:    local fn MyProgressAddSubscriberHandler( progress as ProgressRef, userData as ptr )    end fn*/toolbox fn ProgressAddSubscriberForFileURL( CFURLRef url, ptr publishingHandler, ptr userData ) = CFTypeReftoolbox ProgressRemoveSubscriber( CFTypeRef subscriber )/*  ProgressReporting  Inherits from: Object  NSProgressReporting - https://developer.apple.com/documentation/foundation/nsprogressreporting*/