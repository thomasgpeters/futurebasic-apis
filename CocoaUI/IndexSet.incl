/*  IndexSet  Bernie Wylde 20171102  Framework: Foundation  Inherits from: Object  NSIndexSet - https://developer.apple.com/documentation/foundation/nsindexset?language=objc*/// Classtoolbox fn IndexSetClass = ClassRef// Createtoolbox fn IndexSetInit = IndexSetRef// autoreleased // creates an empty index settoolbox fn IndexSetWithIndex( NSUInteger index ) = IndexSetReftoolbox fn IndexSetWithIndexesInRange( CFRange range ) = IndexSetRef// Querytoolbox fn IndexSetContainsIndex( IndexSetRef ref, NSUInteger index ) = BOOLtoolbox fn IndexSetContainsIndexes( IndexSetRef ref, IndexSetRef subset ) = BOOLtoolbox fn IndexSetContainsIndexesInRange( IndexSetRef ref, CFRange range ) = BOOLtoolbox fn IndexSetIntersectsIndexesInRange( IndexSetRef ref, CFRange range ) = BOOLtoolbox fn IndexSetCount( IndexSetRef ref ) = NSUIntegertoolbox fn IndexSetCountOfIndexesInRange( IndexSetRef ref, CFRange range ) = NSUInteger/*  IndexSetIndexPassingTest  IndexSetIndexesPassingTest  IndexSetIndexWithOptionsPassingTest  IndexSetIndexesWithOptionsPassingTest  IndexSetIndexInRangePassingTest  IndexSetIndexesInRangePassingTest  predicate example:    local fn MyPredicate( set as IndexSetRef, index as NSUInteger, stp as ^BOOL, userData as ptr ) as BOOL      BOOL   flag      // ...      flag = YES// NO// object passed test?      // *stp = YES// stop enumeration    end fn = flag*/toolbox fn IndexSetIndexPassingTest( IndexSetRef ref, ptr predicate, ptr userData ) = NSUIntegertoolbox fn IndexSetIndexesPassingTest( IndexSetRef ref, ptr predicate, ptr userData ) = IndexSetReftoolbox fn IndexSetIndexWithOptionsPassingTest( IndexSetRef ref, NSEnumerationOptions options, ptr predicate, ptr userData ) = NSUIntegertoolbox fn IndexSetIndexesWithOptionsPassingTest( IndexSetRef ref, NSEnumerationOptions options, ptr predicate, ptr userData ) = IndexSetReftoolbox fn IndexSetIndexInRangePassingTest( IndexSetRef ref, CFRange range, NSEnumerationOptions options, ptr predicate, ptr userData ) = NSUIntegertoolbox fn IndexSetIndexesInRangePassingTest( IndexSetRef ref, CFRange range, NSEnumerationOptions options, ptr predicate, ptr userData ) = IndexSetRef// Enumerate content/*  IndexSetEnumerateRangesInRange  IndexSetEnumerateRanges  IndexSetEnumerateRangesWithOptions    callback example:    void local fn MyCallback( set as IndexSetRef, range as CFRange, stp as ^BOOL, userData as ptr )      // ...      // *stp = YES// stop enumeration    end fn*/toolbox IndexSetEnumerateRangesInRange( IndexSetRef ref, CFRange range, NSEnumerationOptions options, ptr callback, ptr userData )toolbox IndexSetEnumerateRanges( IndexSetRef ref, ptr callback, ptr userData )toolbox IndexSetEnumerateRangesWithOptions( IndexSetRef ref, NSEnumerationOptions options, ptr callback, ptr userData )// Comparetoolbox fn IndexSetIsEqual( IndexSetRef ref1, IndexSetRef ref2 ) = BOOL// Getting indexestoolbox fn IndexSetFirstIndex( IndexSetRef ref ) = NSUIntegertoolbox fn IndexSetLastIndex( IndexSetRef ref ) = NSUIntegertoolbox fn IndexSetIndexLessThan( IndexSetRef ref, NSUInteger index ) = NSUIntegertoolbox fn IndexSetIndexLessThanOrEqualTo( IndexSetRef ref, NSUInteger index ) = NSUIntegertoolbox fn IndexSetIndexGreaterThanOrEqualTo( IndexSetRef ref, NSUInteger index ) = NSUIntegertoolbox fn IndexSetIndexGreaterThan( IndexSetRef ref, NSUInteger index ) = NSUIntegertoolbox fn InsetSetGetIndexes( IndexSetRef ref, NSUInteger *indexBuffer, NSUInteger maxCount, CFRange *indexRange ) = NSUInteger// Enumerate indexes/*  IndexSetEnumerateIndexes  IndexSetEnumerateIndexesWithOptions  IndexSetEnumerateIndexesInRange    callback example:    void local fn MyCallback( set as IndexSetRef, index as NSUInteger, stp as ^BOOL, userData as ptr )      // ...      // *stp = YES// stop enumeration    end fn*/toolbox IndexSetEnumerateIndexes( IndexSetRef ref, ptr callback, ptr userData )toolbox IndexSetEnumerateIndexesWithOptions( IndexSetRef ref, NSEnumerationOptions options, ptr callback, ptr userData )toolbox IndexSetEnumerateIndexesInRange( IndexSetRef ref, CFRange range, NSEnumerationOptions options, ptr callback, ptr userData )// Customtoolbox fn IndexSetWithIndexes( NSInteger index, ... ) = IndexSetRef// params: list of positive integers terminated by a negative number (-1 will do it)toolbox fn IndexSetIndexArray( IndexSetRef ref ) = CFArrayRef// array of CFNumbers/*  MutableIndexSet  Inherits from IndexSet/Object  NSMutableIndexSet - https://developer.apple.com/documentation/foundation/nsmutableindexset?language=objc*/// Classtoolbox fn MutableIndexSetClass = ClassReftoolbox fn MutableIndexSetNew = MutableIndexSetRef// autoreleasedtoolbox fn MutableIndexSetInit = MutableIndexSetRef// autoreleasedtoolbox fn MutableIndexSetWithIndex( NSUInteger index ) = MutableIndexSetReftoolbox fn MutableIndexSetWithIndexesInRange( CFRange range ) = MutableIndexSetReftoolbox MutableIndexSetAddIndex( MutableIndexSetRef ref, NSUInteger index )toolbox MutableIndexSetAddIndexes( MutableIndexSetRef ref, IndexSetRef otherSet )toolbox MutableIndexSetAddIndexesInRange( MutableIndexSetRef ref, CFRange range )toolbox MutableIndexSetRemoveIndex( MutableIndexSetRef ref, NSUInteger index )toolbox MutableIndexSetRemoveIndexes( MutableIndexSetRef ref, IndexSetRef otherSet )toolbox MutableIndexSetRemoveAllIndexes( MutableIndexSetRef ref )toolbox MutableIndexSetRemoveIndexesInRange( MutableIndexSetRef ref, CFRange range )toolbox MutableIndexSetShiftIndexes( MutableIndexSetRef ref, NSUInteger index, NSInteger delta )