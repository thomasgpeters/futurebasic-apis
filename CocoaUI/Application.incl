/*  Application  Bernie Wylde 20170704  Framework: AppKit  Inherits from: Responder/Object  NSApplication - https://developer.apple.com/documentation/appkit/nsapplication?language=objc*/// NSApp global variablesystem ApplicationRef NSApp// the version of the AppKit framework#if ndef _DEFINEDINCOCOA#define NSAppKitVersion as double#endifsystem NSAppKitVersion NSAppKitVersionNumber// ...// modal response#if ndef _DEFINEDINCOCOA#define NSModalResponse as NSInteger#endifsystem NSModalResponse NSModalResponseStopsystem NSModalResponse NSModalResponseAbortsystem NSModalResponse NSModalResponseContinue// terminate reply#if ndef _DEFINEDINCOCOA#define NSApplicationTerminateReply as NSUInteger#endifsystem NSApplicationTerminateReply NSTerminateCancelsystem NSApplicationTerminateReply NSTerminateNowsystem NSApplicationTerminateReply NSTerminateLater// request user attention#if ndef _DEFINEDINCOCOA#define NSRequestUserAttentionType as NSUInteger#endifsystem NSRequestUserAttentionType NSCriticalRequestsystem NSRequestUserAttentionType NSInformationalRequest// window list options#if ndef _DEFINEDINCOCOA#define NSWindowListOptions as NSInteger#endifsystem NSWindowListOptions NSWindowListOrderedFrontToBack// presentation options#if ndef _DEFINEDINCOCOA#define NSApplicationPresentationOptions as NSUInteger#endifsystem NSApplicationPresentationOptions NSApplicationPresentationDefaultsystem NSApplicationPresentationOptions NSApplicationPresentationAutoHideDocksystem NSApplicationPresentationOptions NSApplicationPresentationHideDocksystem NSApplicationPresentationOptions NSApplicationPresentationAutoHideMenuBarsystem NSApplicationPresentationOptions NSApplicationPresentationHideMenuBarsystem NSApplicationPresentationOptions NSApplicationPresentationDisableAppleMenusystem NSApplicationPresentationOptions NSApplicationPresentationDisableProcessSwitchingsystem NSApplicationPresentationOptions NSApplicationPresentationDisableForceQuitsystem NSApplicationPresentationOptions NSApplicationPresentationDisableSessionTerminationsystem NSApplicationPresentationOptions NSApplicationPresentationDisableHideApplicationsystem NSApplicationPresentationOptions NSApplicationPresentationDisableMenuBarTransparencysystem NSApplicationPresentationOptions NSApplicationPresentationFullScreensystem NSApplicationPresentationOptions NSApplicationPresentationAutoHideToolbarsystem NSApplicationPresentationOptions NSApplicationPresentationDisableCursorLocationAssistance// about panel option keys#if ndef _DEFINEDINCOCOA#define NSAboutPanelOptionKey as CFStringRef#endifsystem CFStringRef NSAboutPanelOptionApplicationIconsystem CFStringRef NSAboutPanelOptionApplicationNamesystem CFStringRef NSAboutPanelOptionApplicationVersionsystem CFStringRef NSAboutPanelOptionCreditssystem CFStringRef NSAboutPanelOptionVersion// notificationssystem CFStringRef NSApplicationDidBecomeActiveNotificationsystem CFStringRef NSApplicationDidHideNotificationsystem CFStringRef NSApplicationDidFinishLaunchingNotificationsystem CFStringRef NSApplicationDidResignActiveNotificationsystem CFStringRef NSApplicationDidUnhideNotificationsystem CFStringRef NSApplicationDidUpdateNotificationsystem CFStringRef NSApplicationWillBecomeActiveNotificationsystem CFStringRef NSApplicationWillHideNotificationsystem CFStringRef NSApplicationWillFinishLaunchingNotificationsystem CFStringRef NSApplicationWillResignActiveNotificationsystem CFStringRef NSApplicationWillUnhideNotificationsystem CFStringRef NSApplicationWillUpdateNotificationsystem CFStringRef NSApplicationWillTerminateNotificationsystem CFStringRef NSApplicationDidChangeScreenParametersNotification#if _MACOSMAXALLOWED >= 120000system CFStringRef NSApplicationProtectedDataWillBecomeUnavailableNotification // macOS 12.0+system CFStringRef NSApplicationProtectedDataDidBecomeAvailableNotification    // macOS 12.0+#endif// 120000// occlusion state#if ndef _DEFINEDINCOCOA#define NSApplicationOcclusionState as NSUInteger#endifsystem NSApplicationOcclusionState NSApplicationOcclusionStateVisible// modal session#if ndef _DEFINEDINCOCOA#define NSModalSession as ptr#endif#if ndef _DEFINEDINCOCOA#define NSRemoteNotificationType as NSUInteger#endifsystem NSRemoteNotificationType NSRemoteNotificationTypeNonesystem NSRemoteNotificationType NSRemoteNotificationTypeBadgesystem NSRemoteNotificationType NSRemoteNotificationTypeSoundsystem NSRemoteNotificationType NSRemoteNotificationTypeAlert#if ndef _DEFINEDINCOCOA#define NSApplicationDelegateReply as NSUInteger#endifsystem NSApplicationDelegateReply NSApplicationDelegateReplySuccesssystem NSApplicationDelegateReply NSApplicationDelegateReplyCancelsystem NSApplicationDelegateReply NSApplicationDelegateReplyFailure// app eventsbegin enum not output 1_appWillFinishLaunching_appDidFinishLaunching_appShouldTerminate                      // AppEventSetLong - see NSApplicationTerminateReply_appShouldTerminateAfterLastWindowClosed // AppEventSetBool_appWillTerminate_appWillBecomeActive_appDidBecomeActive_appWillResignActive_appDidResignActive_appWillHide_appDidHide_appWillUnhide_appDidUnhide_appWillUpdate_appDidUpdate_appShouldHandleReopen                    // AppEventSetBool_appDockMenu                              // AppEventSetMenu - not yet implemented_appWillPresentError_appDidChangeScreenParameters//_appOpenFile_appOpenFileWithoutUI                     // AppEventString, AppEventSetBool_appOpenTempFile                          // AppEventString, AppEventSetBool//_appOpenFiles_appOpenUntitledFile_appShouldOpenUntitledFile                // AppEventSetBool_appPrintFile                             // AppEventString, AppEventSetBool_appPrintFiles                            // AppEventSetLong, AppEventArray, AppEventDictionary, AppEventBool_appDidRegisterForRemoteNotificationsWithDeviceToken_appDidFailToRegisterForRemoteNotifications_appDidReceiveRemoteNotification          // AppEventDictionary_appDidDecodeRestorableState_appWillEncodeRestorableState_appWillContinueUserActivityWithType      // AppEventSetBool, AppEventString_appContinueUserActivity                  // AppEventSetBool_appDidFailToContinueUserActivityWithType // AppEventString_appDidUpdateUserActivity_appDidChangeOcclusionState_appOpenURLs                              // AppEventString, AppEventArray, AppEventURL#if _MACOSMAXALLOWED >= 120000_appSupportsSecureRestorableState             // macOS 12.0+_appHandlerForIntent                          // macOS 12.0+_appShouldAutomaticallyLocalizeKeyEquivalents // macOS 12.0+_appProtectedDataWillBecomeUnavailable        // macOS 12.0+_appProtectedDataDidBecomeAvailable           // macOS 12.0+#endif // 120000end enum// Appevent functionstoolbox AppEventSetBool( BOOL value )toolbox AppEventSetLong( long value )toolbox fn AppEventString = CFStringReftoolbox fn AppEventArray = CFArrayReftoolbox fn AppEventDictionary = CFDictionaryReftoolbox fn AppEventURL = CFURLReftoolbox AppEventSetMenu( MenuRef m )//toolbox fn AppEventApp = ApplicationRef//toolbox fn AppEventBool = BOOL//toolbox fn AppEventCoder = CoderRef//toolbox fn AppEventData = CFDataRef//toolbox fn AppEventError = ErrorRef//toolbox fn AppEventNotification = NotificationRef//toolbox fn AppEventHasVisibleWindows = BOOL//toolbox fn AppEventFilename = CFStringRef//toolbox fn AppEventFileURLs = CFArrayRef//toolbox fn AppEventPrintFilenames = CFArrayRef//toolbox fn AppEventPrintSettings = CFDictionaryRef//toolbox fn AppEventShowPringPanels = BOOL//toolbox fn AppEventDeviceToken = CFDataRef//toolbox fn AppEventUserActivityType = CFStringRef// Classtoolbox fn ApplicationClass = ClassRef// Shared apptoolbox fn AppSharedApplication = ApplicationRef// Event looptoolbox fn AppNextEventMatchingMask( NSEventMask mask, CFDateRef untilDate, CFStringRef inMode, BOOL dequeue ) = EventReftoolbox AppDiscardEventsMatchingMask( NSEventMask mask, EventRef beforeEvent )toolbox fn AppCurrentEvent = EventReftoolbox fn AppIsRunning = BOOLtoolbox AppRuntoolbox AppFinishLaunchingtoolbox AppStoptoolbox AppSendEvent( EventRef evnt )toolbox AppPostEvent( EventRef evnt, BOOL atStart )// Posting actionstoolbox fn AppTryToPerform( SELRef action, CFTypeRef obj ) = BOOLtoolbox fn AppSendAction( SELRef action, CFTypeRef toObj, CFTypeRef fromObj ) = BOOLtoolbox fn AppTargetForAction( SELRef action ) = CFTypeReftoolbox fn AppTargetForActionTo( SELRef action, CFTypeRef toObj, CFTypeRef fromObj ) = CFTypeRef// Terminatetoolbox AppTerminatetoolbox AppReplyToApplicationShouldTerminate( BOOL flag )// Activate/deactivatetoolbox fn AppIsActive = BOOLtoolbox AppActivateIgnoringOtherApps( BOOL flag )// deprecated: 14.0 use: AppActivatetoolbox AppDeactivate#if _MACOSMAXALLOWED >= 140000toolbox AppActivate                                                                   // macOS 14.0+toolbox AppYieldActivationToApplication( RunningApplicationRef application )          // macOS 14.0+toolbox AppYieldActivationToApplicationWithBundleIdentifier( CFStringRef identifier ) // macOS 14.0+#endif// 140000// Relaunch on logintoolbox AppDisableRelaunchOnLogintoolbox AppEnableRelaunchOnLogin// Remote notifications#if _MACOSMAXALLOWED >= 101400toolbox AppRegisterForRemoteNotifications// macOS 10.14+#endif// 101400toolbox AppUnregisterForRemoteNotificationstoolbox fn AppEnabledRemoteNotificationTypes = NSRemoteNotificationType#if _MACOSMAXALLOWED >= 101400toolbox fn AppIsRegisteredForRemoteNotifications = BOOL// macOS 10.14+#endif// 101400// Appearance#if _MACOSMAXALLOWED >= 101400toolbox fn AppAppearance = AppearanceRef             // macOS 10.14+toolbox AppSetAppearance( AppearanceRef appearance ) // macOS 10.14+toolbox AppSetAppearanceNamed( CFStringRef name )    // macOS 10.14+toolbox fn AppEffectiveAppearance = AppearanceRef    // macOS 10.14+#endif// 101400toolbox fn AppCurrentSystemPresentationOptions = NSApplicationPresentationOptionstoolbox fn AppPresentationOptions = NSApplicationPresentationOptionstoolbox AppSetPresentationOptions( NSApplicationPresentationOptions options )// App windowstoolbox fn AppKeyWindow = NSIntegertoolbox fn AppMainWindow = NSIntegertoolbox fn AppWindowWithWindowNumber( NSInteger number ) = WindowReftoolbox fn AppWindows = CFArrayRef/*  AppEnumerateWindows  callback example:    void local fn MyEnumerateWindowsCallback( wndTag as NSInteger, stp as ^BOOL, userData as ptr )        // *stp = YES // stop enumeration    end fn*/toolbox AppEnumerateWindows( NSWindowListOptions options, ptr callback, ptr userData )// Minimizing windowstoolbox AppMiniaturizeAll// Hiding windowstoolbox fn AppIsHidden = BOOLtoolbox AppHidetoolbox AppUnhidetoolbox AppUnhideWithoutActivation// Updating windowstoolbox AppUpdateWindowstoolbox AppSetWindowsNeedUpdate( BOOL flag )// Window layerstoolbox AppPreventWindowOrderingtoolbox AppArrangeInFront// Occlusion statetoolbox fn AppOcclusionState = NSApplicationOcclusionState// Window restoration#if _MACOSMAXALLOWED >= 120000//toolbox fn AppIsProtectedDataAvailable = BOOL// macOS 12.0+#endif// 120000toolbox AppExtendStateRestorationtoolbox AppCompleteStateRestorationtoolbox fn AppRestoreWindowWithIdentifier( CFStringRef identifier, CoderRef state, ptr completionHandler, ptr userData ) = BOOL// Modal windowstoolbox fn AppRunModal( NSInteger wndTag ) = NSIntegertoolbox AppStopModaltoolbox AppStopModalWithCode( NSInteger returnCode )toolbox AppAbortModaltoolbox fn AppBeginModalSession( NSInteger wndTag ) = NSModalSessiontoolbox fn AppRunModalSession( NSModalSession session ) = NSModalResponsetoolbox fn AppModalWindow = NSIntegertoolbox AppEndModalSession( NSModalSession session )// Panelstoolbox AppOrderFrontColorPaneltoolbox AppOrderFrontStandardAboutPanel/*  AppOrderFrontStandardAboutPanelWithOptions  options dictionary keys:    @"Credits"           // value must be a CFAttributedStringRef    @"ApplicationName"    @"ApplicationIcon"   // the name of the icon or an ImageRef (NSImage)    @"Version"    @"Copyright"    @"ApplicationVersion"*/toolbox AppOrderFrontStandardAboutPanelWithOptions( CFDictionaryRef options )toolbox AppOrderFrontCharacterPalettetoolbox AppRunPageLayout// Main menutoolbox fn AppMainMenu = MenuRef// Windows menutoolbox fn AppWindowsMenu = MenuReftoolbox AppAddWindowsItem( NSInteger tag, CFStringRef title, BOOL isFilename )toolbox AppRemoveWindowsItem( NSInteger tag )toolbox AppUpdateWindowsItem( NSInteger tag )// Services menutoolbox AppRegisterServicesMenuTypes( CFArrayRef sendTypes, CFArrayRef returnTypes )toolbox fn AppServicesMenu = MenuReftoolbox fn AppServicesMenuIndex = NSIntegertoolbox AppSetServicesMenu( NSInteger index )// UI layout directiontoolbox fn AppUserInterfaceLayoutDirection = NSUserInterfaceLayoutDirection// Dock tiletoolbox fn AppDockTile = DockTileReftoolbox fn AppIconImage = ImageReftoolbox AppSetIconImage( CFTypeRef image )// User attention requeststoolbox fn AppRequestUserAttention( NSRequestUserAttentionType type ) = NSIntegertoolbox AppCancelUserAttentionRequest( NSInteger request )toolbox AppReplyToOpenOrPrint( NSApplicationDelegateReply reply )// Displaying help// ...toolbox fn AppSearchStringInUserInterfaceItemString( CFStringRef searchString, CFStringRef string, CFRange searchRange, CFRange *foundRange ) = BOOLtoolbox AppShowHelptoolbox AppActivateContextHelpModetoolbox fn AppHelpMenu = MenuRef//toolbox AppSetHelpMenu( MenuRef m )// Providing servicestoolbox fn AppValidRequestorType( CFStringRef sendType, CFStringRef returnType ) = CFTypeReftoolbox fn AppServicesProvider = CFTypeReftoolbox AppSetServicesProvider( CFTypeRef provider )// Keyboard accesstoolbox fn AppIsFullKeyboardAccessEnabled = BOOL// Hiding appstoolbox AppHideOtherApplicationstoolbox AppUnhideAllApplications// Threadstoolbox AppDetachDrawingThread( SELRef selector, CFTypeRef targetObj, CFTypeRef argument )// Logging exceptionstoolbox AppReportException( ExceptionRef exception )// Activation policytoolbox fn AppActivationPolicy = NSApplicationActivationPolicytoolbox fn AppSetActivationPolicy( NSApplicationActivationPolicy policy ) = BOOL// Scriptingtoolbox fn AppOrderedDocuments = CFArrayRef // returns an array of DocumentRefstoolbox fn AppOrderedWindows = CFArrayRef   // returns an array of WindowRefs// Conveniencetoolbox fn AppDockTileContentView = ViewReftoolbox fn AppDockTileSize = CGSize//toolbox fn AppDockTileOwner = ptrtoolbox fn AppDockTileShowsApplicationBadge = BOOLtoolbox AppDockTileSetShowsApplicationBadge( BOOL flag )toolbox fn AppDockTileBadgeLabel = CFStringReftoolbox AppDockTileSetBadgeLabel( CFStringRef label )toolbox AppDockTileDisplaytoolbox fn AppOutputWindow = NSIntegertoolbox AppSetOutputWindow( NSInteger tag )toolbox AppBringAllWindowsToFronttoolbox fn AppFrontWindow = NSInteger/*  AppSetTimer  callback examples:  Note: The callback function must NOT use the 'void' keyword  (1)  local fn MyTimer  end fn  (2)  local fn MyTimer( timer as TimerRef )  end fn  (3)  local fn MyTimer  end fn = YES // return YES to stop timer*/toolbox fn AppSetTimer( CFTimeInterval interval, ptr callback, BOOL repeats ) = TimerRef/*  AppSetDelegateCallback  Callback function examples: (1)  local fn MyAppDelegateCallback  end fn (2)  local fn MyAppDelegateCallback( ev as NSInteger )  end fn (3)  local fn MyAppDelegateCallback( ev as NSInteger, userData as ptr )  end fn*/toolbox AppSetDelegateCallback( ptr callback, ptr userData ) // userData can be NULL/*  AppProperty  Store an arbitrary value as a property of the app*/toolbox fn AppProperty( CFStringRef key ) = CFTypeReftoolbox AppSetProperty( CFStringRef key, CFTypeRef value )// same as AppPropertySettoolbox AppPropertySet( CFStringRef key, CFTypeRef value )toolbox fn AppPropertyBool( CFStringRef key ) = BOOLtoolbox AppPropertySetBool( CFStringRef key, BOOL value )toolbox fn AppPropertyLong( CFStringRef key ) = longtoolbox AppPropertySetLong( CFStringRef key, long value )toolbox fn AppPropertyDouble( CFStringRef key ) = doubletoolbox AppPropertySetDouble( CFStringRef key, double value )toolbox fn AppPropertyRect( CFStringRef key ) = CGRecttoolbox AppPropertySetRect( CFStringRef key, CGRect r )toolbox fn AppPropertyPoint( CFStringRef key ) = CGPointtoolbox AppPropertySetPoint( CFStringRef key, CGPoint pt )toolbox fn AppPropertySize( CFStringRef key ) = CGSizetoolbox AppPropertySetSize( CFStringRef key, CGSize sz )toolbox fn AppPropertyRange( CFStringRef key ) = CFRangetoolbox AppPropertySetRange( CFStringRef key, CFRange range )toolbox fn AppPropertyBookmarkURL( CFStringRef key ) = CFURLReftoolbox AppPropertySetBookmarkURL( CFStringRef key, CFURLRef url )toolbox fn AppPropertyGetBytes( CFStringRef key, ptr bytes ) = BOOLtoolbox AppPropertySetBytes( CFStringRef key, ptr bytes, long length )toolbox AppRemoveProperty( CFStringRef key )// same as AppPropertyRemovetoolbox AppPropertyRemove( CFStringRef key )toolbox AppRemoveAllProperties// same as AppPropertyRemoveAlltoolbox AppPropertyRemoveAll/*  AppSetToolTipsHidden  Hide or show tooltips for main menu items and all views in all the app's windows*/toolbox AppSetToolTipsHidden( BOOL flag )// 20240622