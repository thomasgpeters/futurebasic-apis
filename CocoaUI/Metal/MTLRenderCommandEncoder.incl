/*  MTLRenderCommandEncoder - https://developer.apple.com/documentation/metal/mtlrendercommandencoder?language=objc  Bernie Wylde 20180606  Framework: Metal  Protocol*/#if ndef _DEFINEDINCOCOAbegin record MTLViewportdouble originX, originY, width, height, znear, zfarend record#endif// primitive type#if ndef _DEFINEDINCOCOA#define MTLPrimitiveType as NSUInteger#endifsystem MTLPrimitiveType MTLPrimitiveTypePointsystem MTLPrimitiveType MTLPrimitiveTypeLinesystem MTLPrimitiveType MTLPrimitiveTypeLineStripsystem MTLPrimitiveType MTLPrimitiveTypeTrianglesystem MTLPrimitiveType MTLPrimitiveTypeTriangleStrip// triangle fill mode#if ndef _DEFINEDINCOCOA#define MTLTriangleFillMode as NSUInteger#endifsystem MTLTriangleFillMode MTLTriangleFillModeFill  // = 0,system MTLTriangleFillMode MTLTriangleFillModeLines // = 1,// winding#if ndef _DEFINEDINCOCOA#define MTLWinding as NSUInteger#endifsystem MTLWinding MTLWindingClockwise        // = 0,system MTLWinding MTLWindingCounterClockwise // = 1,// cull mode#if ndef _DEFINEDINCOCOA#define MTLCullMode as NSUInteger#endifsystem MTLCullMode MTLCullModeNone  // = 0,system MTLCullMode MTLCullModeFront // = 1,system MTLCullMode MTLCullModeBack  // = 2,// depth clip mode#if ndef _DEFINEDINCOCOA#define MTLDepthClipMode as NSUInteger#endifsystem MTLDepthClipMode MTLDepthClipModeClip  // = 0,system MTLDepthClipMode MTLDepthClipModeClamp // = §,// scissor rect#if ndef _DEFINEDINCOCOAbegin record MTLScissorRectNSUInteger x, y, width, heightend record#endif// visibility result mode#if ndef _DEFINEDINCOCOA#define MTLVisibilityResultMode as NSUInteger#endifsystem MTLVisibilityResultMode MTLVisibilityResultModeDisabled // = 0,system MTLVisibilityResultMode MTLVisibilityResultModeBoolean  // = 1,system MTLVisibilityResultMode MTLVisibilityResultModeCounting // = 2,// vertex amplification view mapping#if _MACOSMAXALLOWED >= 101504#if ndef _DEFINEDINCOCOAbegin record MTLVertexAmplificationViewMapping // macOS 10.15.4UInt32 viewportArrayIndexOffset              // macOS 10.15.4UInt32 renderTargetArrayIndexOffset          // macOS 10.15.4end record#endif // _DEFINEDINCOCOA#endif // 101504// render stages#if ndef _DEFINEDINCOCOA#define MTLRenderStages as NSUInteger#endif // _DEFINEDINCOCOAsystem MTLRenderStages MTLRenderStageVertex   //= (1UL << 0),system MTLRenderStages MTLRenderStageFragment // = (1UL << 1),#if _MACOSMAXALLOWED >= 120000system MTLRenderStages MTLRenderStageTile // = (1UL << 2), // macOS 12.0+#endif // 120000#if _MACOSMAXALLOWED >= 130000system MTLRenderStages MTLRenderStageObject // = (1UL << 3), // macOS 13.0+system MTLRenderStages MTLRenderStageMesh   // = (1UL << 4), // macOS 13.0+#endif // 130000/*  Encode configuration commands*/// Render pass configuration// • Pipeline statetoolbox MTLRenderCommandEncoderSetRenderPipelineState( MTLRenderCommandEncoderRef ref, MTLRenderPipelineStateRef state )// Actions for attachmentstoolbox MTLRenderCommandEncoderSetColorStoreAction( MTLRenderCommandEncoderRef ref, MTLStoreAction action, NSUInteger colorAttachmentIndex )toolbox MTLRenderCommandEncoderSetColorStoreActionOptions( MTLRenderCommandEncoderRef ref, MTLStoreActionOptions options, NSUInteger colorAttachmentIndex )toolbox MTLRenderCommandEncoderSetDepthStoreAction( MTLRenderCommandEncoderRef ref, MTLStoreAction action )toolbox MTLRenderCommandEncoderSetDepthStoreActionOptions( MTLRenderCommandEncoderRef ref, MTLStoreActionOptions options )toolbox MTLRenderCommandEncoderSetStencilStoreAction( MTLRenderCommandEncoderRef ref, MTLStoreAction action )toolbox MTLRenderCommandEncoderSetStencilStoreActionOptions( MTLRenderCommandEncoderRef ref, MTLStoreActionOptions options )// • Blend behaviortoolbox MTLRenderCommandEncoderSetBlendColor( MTLRenderCommandEncoderRef ref, float red, float green, float blue, float alpha )// • Rendering behaviortoolbox MTLRenderCommandEncoderSetTriangleFillMode( MTLRenderCommandEncoderRef ref, MTLTriangleFillMode fillMode )toolbox MTLRenderCommandEncoderSetFrontFacingWinding( MTLRenderCommandEncoderRef ref, MTLWinding winding )toolbox MTLRenderCommandEncoderSetCullMode( MTLRenderCommandEncoderRef ref, MTLCullMode cullMode )// • Depth and stencil behaviortoolbox MTLRenderCommandEncoderSetDepthStencilState( MTLRenderCommandEncoderRef ref, MTLDepthStencilStateRef stencilState )toolbox MTLRenderCommandEncoderSetDepthBias( MTLRenderCommandEncoderRef ref, float bias, float slopeScale, float clamp )toolbox MTLRenderCommandEncoderSetDepthClipMode( MTLRenderCommandEncoderRef ref, MTLDepthClipMode clipMode )toolbox MTLRenderCommandEncoderSetStencilReferenceValue( MTLRenderCommandEncoderRef ref, UInt32 value )toolbox MTLRenderCommandEncoderSetStencilFrontBackReferenceValue( MTLRenderCommandEncoderRef ref, UInt32 frontValue, UInt32 backValue )// • Viewport and scissor behaviortoolbox MTLRenderCommandEncoderSetViewport( MTLRenderCommandEncoderRef ref, MTLViewport viewport )toolbox MTLRenderCommandEncoderSetViewports( MTLRenderCommandEncoderRef ref, MTLViewport *viewports, NSUInteger count )toolbox MTLRenderCommandEncoderSetScissorRect( MTLRenderCommandEncoderRef ref, MTLScissorRect scissorRect )toolbox MTLRenderCommandEncoderSetScissorRects( MTLRenderCommandEncoderRef ref, MTLScissorRect *scissorRects, NSUInteger count )// • Visibility testingtoolbox MTLRenderCommandEncoderSetVisibilityResultMode( MTLRenderCommandEncoderRef ref, MTLVisibilityResultMode resultMode, NSUInteger offset )// • Vertext amplification#if _MACOSMAXALLOWED >= 101504toolbox MTLRenderCommandEncoderSetVertexAmplificationCount( MTLRenderCommandEncoderRef ref, NSUInteger count, MTLVertexAmplificationViewMapping *viewMappings ) // macOS 10.15.4#endif // 101504// • Tessellation factorstoolbox MTLRenderCommandEncoderSetTessellationFactorScale( MTLRenderCommandEncoderRef ref, float scale )toolbox MTLRenderCommandEncoderSetTessellationFactorBuffer( MTLRenderCommandEncoderRef ref, MTLBufferRef buffer, NSUInteger offset, NSUInteger instanceStride )// • Persistent threadgroup memory#if _MACOSMAXALLOWED >= 130000toolbox MTLRenderCommandEncoderSetObjectThreadgroupMemoryLength( MTLRenderCommandEncoderRef ref, NSUInteger length, NSUInteger index ) // macOS 13.0+toolbox MTLRenderCommandEncoderSetThreadgroupMemoryLengthAndOffset( MTLRenderCommandEncoderRef ref, NSUInteger length, NSUInteger offset, NSUInteger index ) // macOS 13.0+#endif // 130000/*  Encoding resource preparation commands*/#if _MACOSMAXALLOWED >= 130000// Mesh and object shader// • Buffers for object shaderstoolbox MTLRenderCommandEncoderSetObjectBuffer( MTLRenderCommandEncoderRef ref, MTLBufferRef buffer, NSUInteger offset, NSUInteger index ) // macOS 13.0+toolbox MTLRenderCommandEncoderSetObjectBuffers( MTLRenderCommandEncoderRef ref, MTLBufferRef *buffers, NSUInteger *offsets, CFRange range ) // macOS 13.0+toolbox MTLRenderCommandEncoderSetObjectBytes( MTLRenderCommandEncoderRef ref, ptr bytes, NSUInteger length, NSUInteger index ) // macOS 13.0+toolbox MTLRenderCommandEncoderSetObjectBufferOffset( MTLRenderCommandEncoderRef ref, NSUInteger offset, NSUInteger index ) // macOS 13.0+// • Textures for object shaderstoolbox MTLRenderCommandEncoderSetObjectTexture( MTLRenderCommandEncoderRef ref, MTLTextureRef texture, NSUInteger index ) // macOS 13.0+toolbox MTLRenderCommandEncoderSetObjectTextures( MTLRenderCommandEncoderRef ref, MTLTextureRef *textures, CFRange range ) // macOS 13.0+// • Sampler states for object shaderstoolbox MTLRenderCommandEncoderSetObjectSamplerState( MTLRenderCommandEncoderRef ref, MTLSamplerStateRef state, NSUInteger index ) // macOS 13.0+toolbox MTLRenderCommandEncoderSetObjectSamplerStateAndClamp( MTLRenderCommandEncoderRef ref, MTLSamplerStateRef state, float lodMinClamp, float lodMaxClamp, NSUInteger index ) // macOS 13.0+toolbox MTLRenderCommandEncoderSetObjectSamplerStates( MTLRenderCommandEncoderRef ref, MTLSamplerStateRef *states, CFRange range ) // macOS 13.0+toolbox MTLRenderCommandEncoderSetObjectSamplerStatesAndClamps( MTLRenderCommandEncoderRef ref, MTLSamplerStateRef *states, float *lodMinClamps, float *lodMaxClamps, CFRange range ) // macOS 13.0+// • Buffers for mesh shaderstoolbox MTLRenderCommandEncoderSetMeshBuffer( MTLRenderCommandEncoderRef ref, MTLBufferRef buffer, NSUInteger offset, NSUInteger index ) // macOS 13.0+toolbox MTLRenderCommandEncoderSetMeshBuffers( MTLRenderCommandEncoderRef ref, MTLBufferRef *buffers, NSUInteger *offsets, CFRange range ) // macOS 13.0+toolbox MTLRenderCommandEncoderSetMeshBytes( MTLRenderCommandEncoderRef ref, ptr bytes, NSUInteger length, NSUInteger index ) // macOS 13.0+toolbox MTLRenderCommandEncoderSetMeshBufferOffset( MTLRenderCommandEncoderRef ref, NSUInteger offset, NSUInteger index ) // macOS 13.0+// • Textures for mesh shaderstoolbox MTLRenderCommandEncoderSetMeshTexture( MTLRenderCommandEncoderRef ref, MTLTextureRef texture, NSUInteger index ) // macOS 13.0+toolbox MTLRenderCommandEncoderSetMeshTextures( MTLRenderCommandEncoderRef ref, MTLTextureRef *textures, CFRange range ) // macOS 13.0+// • Sampler states for mesh shaderstoolbox MTLRenderCommandEncoderSetMeshSamplerState( MTLRenderCommandEncoderRef ref, MTLSamplerStateRef state, NSUInteger index ) // macOS 13.0+toolbox MTLRenderCommandEncoderSetMeshSamplerStateAndClamp( MTLRenderCommandEncoderRef ref, MTLSamplerStateRef state, float lodMinClamp, float lodMaxClamp, NSUInteger index ) // macOS 13.0+toolbox MTLRenderCommandEncoderSetMeshSamplerStates( MTLRenderCommandEncoderRef ref, MTLSamplerStateRef *states, CFRange range ) // macOS 13.0+toolbox MTLRenderCommandEncoderSetMeshSamplerStatesAndClamps( MTLRenderCommandEncoderRef ref, MTLSamplerStateRef *states, float *lodMinClamps, float *lodMaxClamps, CFRange range ) // macOS 13.0+#endif // 130000// Vertex shader resource preparation// • Assign bufferstoolbox MTLRenderCommandEncoderSetVertexBuffer( MTLRenderCommandEncoderRef ref, MTLBufferRef buffer, NSUInteger offset, NSUInteger index )toolbox MTLRenderCommandEncoderSetVertexBuffers( MTLRenderCommandEncoderRef ref, MTLBufferRef *buffers, NSUInteger *offsets, CFRange range )toolbox MTLRenderCommandEncoderSetVertexBytes( MTLRenderCommandEncoderRef ref, ptr bytes, NSUInteger length, NSUInteger index )toolbox MTLRenderCommandEncoderSetVertexBufferOffset( MTLRenderCommandEncoderRef ref, NSUInteger offset, NSUInteger index )// • Assign texturestoolbox MTLRenderCommandEncoderSetVertexTexture( MTLRenderCommandEncoderRef ref, MTLTextureRef texture, NSUInteger index )toolbox MTLRenderCommandEncoderSetVertexTextures( MTLRenderCommandEncoderRef ref, MTLTextureRef *textures, CFRange range )// • Sampler statestoolbox MTLRenderCommandEncoderSetVertexSamplerState( MTLRenderCommandEncoderRef ref, MTLSamplerStateRef state, NSUInteger index )toolbox MTLRenderCommandEncoderSetVertexSamplerStateAndClamp( MTLRenderCommandEncoderRef ref, MTLSamplerStateRef state, float lodMinClamp, float lodMaxClamp, NSUInteger index )toolbox MTLRenderCommandEncoderSetVertexSamplerStates( MTLRenderCommandEncoderRef ref, MTLSamplerStateRef *states, CFRange range )toolbox MTLRenderCommandEncoderSetVertexSamplerStatesAndClamps( MTLRenderCommandEncoderRef ref, MTLSamplerStateRef *states, float *lodMinClamps, float *lodMaxClamps, CFRange range )// • Acceleration structures#if _MACOSMAXALLOWED >= 120000toolbox MTLRenderCommandEncoderSetVertexAccelerationStructure( MTLRenderCommandEncoderRef ref, MTLAccelerationStructureRef structure, NSUInteger bufferIndex ) // macOS 12.0+// • Visible function tablestoolbox MTLRenderCommandEncoderSetVertexVisibleFunctionTable( MTLRenderCommandEncoderRef ref, MTLVisibleFunctionTableRef table, NSUInteger bufferIndex ) // macOS 12.0+toolbox MTLRenderCommandEncoderSetVertexVisibleFunctionTables( MTLRenderCommandEncoderRef ref, MTLVisibleFunctionTableRef *tables, CFRange bufferRange ) // macOS 12.0+// • Intersection function tablestoolbox MTLRenderCommandEncoderSetVertexIntersectionFunctionTable( MTLRenderCommandEncoderRef ref, MTLVisibleFunctionTableRef table, NSUInteger bufferIndex ) // macOS 12.0+toolbox MTLRenderCommandEncoderSetVertexIntersectionFunctionTables( MTLRenderCommandEncoderRef ref, MTLVisibleFunctionTableRef *tables, CFRange bufferRange ) // macOS 12.0+#endif // 120000// Fragment shader resource preparation// • Assign bufferstoolbox MTLRenderCommandEncoderSetFragmentBuffer( MTLRenderCommandEncoderRef ref, MTLBufferRef buffer, NSUInteger offset, NSUInteger index )toolbox MTLRenderCommandEncoderSetFragmentBuffers( MTLRenderCommandEncoderRef ref, MTLBufferRef *buffers, NSUInteger *offsets, CFRange range )toolbox MTLRenderCommandEncoderSetFragmentBytes( MTLRenderCommandEncoderRef ref, ptr bytes, NSUInteger length, NSUInteger index )toolbox MTLRenderCommandEncoderSetFragmentBufferOffset( MTLRenderCommandEncoderRef ref, NSUInteger offset, NSUInteger index )// • Assign texturestoolbox MTLRenderCommandEncoderSetFragmentTexture( MTLRenderCommandEncoderRef ref, MTLTextureRef texture, NSUInteger index )toolbox MTLRenderCommandEncoderSetFragmentTextures( MTLRenderCommandEncoderRef ref, MTLTextureRef *textures, CFRange range )// • Sampler statestoolbox MTLRenderCommandEncoderSetFragmentSamplerState( MTLRenderCommandEncoderRef ref, MTLSamplerStateRef state, NSUInteger index )toolbox MTLRenderCommandEncoderSetFragmentSamplerStateAndClamp( MTLRenderCommandEncoderRef ref, MTLSamplerStateRef state, float lodMinClamp, float lodMaxClamp, NSUInteger index )toolbox MTLRenderCommandEncoderSetFragmentSamplerStates( MTLRenderCommandEncoderRef ref, MTLSamplerStateRef *states, CFRange range )toolbox MTLRenderCommandEncoderSetFragmentSamplerStatesAndClamps( MTLRenderCommandEncoderRef ref, MTLSamplerStateRef *states, float *lodMinClamps, float *lodMaxClamps, CFRange range )// • Acceleration structures#if _MACOSMAXALLOWED >= 120000toolbox MTLRenderCommandEncoderSetFragmentAccelerationStructure( MTLRenderCommandEncoderRef ref, MTLAccelerationStructureRef structure, NSUInteger bufferIndex ) // macOS 12.0+// • Visible function tablestoolbox MTLRenderCommandEncoderSetFragmentVisibleFunctionTable( MTLRenderCommandEncoderRef ref, MTLVisibleFunctionTableRef table, NSUInteger bufferIndex ) // macOS 12.0+toolbox MTLRenderCommandEncoderSetFragmentVisibleFunctionTables( MTLRenderCommandEncoderRef ref, MTLVisibleFunctionTableRef *tables, CFRange bufferRange ) // macOS 12.0+// • Intersection function tablestoolbox MTLRenderCommandEncoderSetFragmentIntersectionFunctionTable( MTLRenderCommandEncoderRef ref, MTLIntersectionFunctionTableRef table, NSUInteger bufferIndex ) // macOS 12.0+toolbox MTLRenderCommandEncoderSetFragmentIntersectionFunctionTables( MTLRenderCommandEncoderRef ref, MTLIntersectionFunctionTableRef *tables, CFRange bufferRange ) // macOS 12.0+#endif // 120000// Tile shader resource preparation// • Assign bufferstoolbox MTLRenderCommandEncoderSetTileBuffer( MTLRenderCommandEncoderRef ref, MTLBufferRef buffer, NSUInteger offset, NSUInteger index )toolbox MTLRenderCommandEncoderSetTileBuffers( MTLRenderCommandEncoderRef ref, MTLBufferRef *buffers, NSUInteger *offsets, CFRange range )toolbox MTLRenderCommandEncoderSetTileBytes( MTLRenderCommandEncoderRef ref, ptr bytes, NSUInteger length, NSUInteger index )toolbox MTLRenderCommandEncoderSetTileBufferOffset( MTLRenderCommandEncoderRef ref, NSUInteger offset, NSUInteger index )// • Assign texturestoolbox MTLRenderCommandEncoderSetTileTexture( MTLRenderCommandEncoderRef ref, MTLTextureRef texture, NSUInteger index )toolbox MTLRenderCommandEncoderSetTileTextures( MTLRenderCommandEncoderRef ref, MTLTextureRef *textures, CFRange range )// • Sampler statestoolbox MTLRenderCommandEncoderSetTileSamplerState( MTLRenderCommandEncoderRef ref, MTLSamplerStateRef state, NSUInteger index )toolbox MTLRenderCommandEncoderSetTileSamplerStateAndClamp( MTLRenderCommandEncoderRef ref, MTLSamplerStateRef state, float lodMinClamp, float lodMaxClamp, NSUInteger index )toolbox MTLRenderCommandEncoderSetTileSamplerStates( MTLRenderCommandEncoderRef ref, MTLSamplerStateRef *states, CFRange range )toolbox MTLRenderCommandEncoderSetTileSamplerStatesAndClamps( MTLRenderCommandEncoderRef ref, MTLSamplerStateRef *states, float *lodMinClamps, float *lodMaxClamps, CFRange range )// • Acceleration structures#if _MACOSMAXALLOWED >= 120000toolbox MTLRenderCommandEncoderSetTileAccelerationStructure( MTLRenderCommandEncoderRef ref, MTLAccelerationStructureRef structure, NSUInteger bufferIndex ) // macOS 12.0+// • Visible function tablestoolbox MTLRenderCommandEncoderSetTileVisibleFunctionTable( MTLRenderCommandEncoderRef ref, MTLVisibleFunctionTableRef table, NSUInteger bufferIndex ) // macOS 12.0+toolbox MTLRenderCommandEncoderSetTileVisibleFunctionTables( MTLRenderCommandEncoderRef ref, MTLVisibleFunctionTableRef *tables, CFRange bufferRange ) // macOS 12.0+// • Intersection function tablestoolbox MTLRenderCommandEncoderSetTileIntersectionFunctionTable( MTLRenderCommandEncoderRef ref, MTLIntersectionFunctionTableRef table, NSUInteger bufferIndex ) // macOS 12.0+toolbox MTLRenderCommandEncoderSetTileIntersectionFunctionTables( MTLRenderCommandEncoderRef ref, MTLIntersectionFunctionTableRef *tables, CFRange bufferRange ) // macOS 12.0+#endif // 120000// Argument buffer resource preparation#if _MACOSMAXALLOWED >= 101500// • Load indidual resourcestoolbox MTLRenderCommandEncoderUseResource( MTLRenderCommandEncoderRef ref, MTLResourceRef rsrc, MTLResourceUsage usage, MTLRenderStages stages )toolbox MTLRenderCommandEncoderUseResources( MTLRenderCommandEncoderRef ref, MTLResourceRef *rsrcs, NSUInteger count, MTLResourceUsage usage, MTLRenderStages stages )// • Load heapstoolbox MTLRenderCommandEncoderUseHeap( MTLRenderCommandEncoderRef ref, MTLHeapRef heap, MTLRenderStages stages )toolbox MTLRenderCommandEncoderUseHeaps( MTLRenderCommandEncoderRef ref, MTLHeapRef *heaps, NSUInteger count, MTLRenderStages stages )#endif // 101500/*  Encoding draw commands*/// • Meshes#if _MACOSMAXALLOWED >= 130000toolbox MTLRenderCommandEncoderDrawMeshThreads( MTLRenderCommandEncoderRef ref, MTLSize threadsPerGrid, MTLSize threadsPerObjectThreadgroup, MTLSize threadsPerMeshThreadgroup ) // macOS 13.0+toolbox MTLRenderCommandEncoderDrawMeshThreadgroups( MTLRenderCommandEncoderRef ref, MTLSize threadgroupsPerGrid, MTLSize threadsPerObjectThreadgroup, MTLSize threadsPerMeshThreadgroup ) // macOS 13.0+toolbox MTLRenderCommandEncoderDrawMeshThreadgroupsIndirectBuffer( MTLRenderCommandEncoderRef ref, MTLBufferRef buffer, NSUInteger bufferOffset, MTLSize threadsPerObjectThreadgroup, MTLSize threadsPerMeshThreadgroup ) // macOS 13.0+#endif // 130000// • Verticestoolbox MTLRenderCommandEncoderDrawPrimitives( MTLRenderCommandEncoderRef ref, MTLPrimitiveType type, NSUInteger start, NSUInteger count )toolbox MTLRenderCommandEncoderDrawPrimitivesInstanceCount( MTLRenderCommandEncoderRef ref, MTLPrimitiveType type, NSUInteger start, NSUInteger vertexCount, NSUInteger instanceCount )toolbox MTLRenderCommandEncoderDrawPrimitivesBaseInstance( MTLRenderCommandEncoderRef ref, MTLPrimitiveType type, NSUInteger start, NSUInteger vertexCount, NSUInteger instanceCount, NSUInteger baseInstance )toolbox MTLRenderCommandEncoderDrawPrimitivesIndirectBuffer( MTLRenderCommandEncoderRef ref, MTLPrimitiveType type, MTLBufferRef buffer, NSUInteger bufferOffset )// • Indexed verticestoolbox MTLRenderCommandEncoderDrawIndexedPrimitives( MTLRenderCommandEncoderRef ref, MTLPrimitiveType primitiveType, NSUInteger indexCount, MTLIndexType indexType, MTLBufferRef indexBuffer, NSUInteger indexBufferOffset )toolbox MTLRenderCommandEncoderDrawIndexedPrimitivesInstanceCount( MTLRenderCommandEncoderRef ref, MTLPrimitiveType primitiveType, NSUInteger indexCount, MTLIndexType indexType, MTLBufferRef indexBuffer, NSUInteger indexBufferOffset, NSUInteger instanceCount )toolbox MTLRenderCommandEncoderDrawIndexedPrimitivesBaseInstance( MTLRenderCommandEncoderRef ref, MTLPrimitiveType primitiveType, NSUInteger indexCount, MTLIndexType indexType, MTLBufferRef indexBuffer, NSUInteger indexBufferOffset, NSUInteger instanceCount, NSInteger baseVertex, NSUInteger baseInstance )toolbox MTLRenderCommandEncoderDrawIndexedPrimitivesIndirectBuffer( MTLRenderCommandEncoderRef ref, MTLPrimitiveType primitiveType, MTLIndexType indexType, MTLBufferRef indexBuffer, NSUInteger indexBufferOffset, MTLBufferRef indirectBuffer, NSUInteger indirectBufferOffset )// • Tessellation patchestoolbox MTLRenderCommandEncoderDrawPatches( MTLRenderCommandEncoderRef ref, NSUInteger numberOfPatchControlPoints, NSUInteger patchStart, NSUInteger patchCount, MTLBufferRef patchIndexBuffer, NSUInteger patchIndexBufferOffset, NSUInteger instanceCount, NSUInteger baseInstance )toolbox MTLRenderCommandEncoderDrawPatchesIndirectBuffer( MTLRenderCommandEncoderRef ref, NSUInteger numberOfPatchControlPoints, MTLBufferRef patchIndexBuffer, NSUInteger patchIndexBufferOffset, MTLBufferRef indirectBuffer, NSUInteger indirectBufferOffset )// • Indexed tessellation patchestoolbox MTLRenderCommandEncoderDrawIndexedPatches( MTLRenderCommandEncoderRef ref, NSUInteger numberOfPatchControlPoints, NSUInteger patchStart, NSUInteger patchCount, MTLBufferRef patchIndexBuffer, NSUInteger patchIndexBufferOffset, MTLBufferRef controlPointIndexBuffer, NSUInteger controlPointIndexBufferOffset, NSUInteger instanceCount, NSUInteger baseInstance )toolbox MTLRenderCommandEncoderDrawIndexedPatchesIndirectBuffer( MTLRenderCommandEncoderRef ref, NSUInteger numberOfPatchControlPoints, MTLBufferRef patchIndexBuffer, NSUInteger patchIndexBufferOffset, MTLBufferRef controlPointIndexBuffer, NSUInteger controlPointIndexBufferOffset, MTLBufferRef indirectBuffer, NSUInteger indirectBufferOffset )// • Tile shaders#if _MACOSMAXALLOWED >= 110000toolbox MTLRenderCommandEncoderDispatchThreadsPerTile( MTLRenderCommandEncoderRef ref, MTLSize threadsPerTile ) // macOS 11.0+toolbox fn MTLRenderCommandEncoderTileWidth( MTLRenderCommandEncoderRef ref ) = NSUInteger // macOS 11.0+toolbox fn MTLRenderCommandEncoderTileHeight( MTLRenderCommandEncoderRef ref ) = NSUInteger // macOS 11.0+#endif // 110000/*  Encoding resource synchronization commands*/toolbox MTLRenderCommandEncoderWaitForFenceBeforeStages( MTLRenderCommandEncoderRef ref, MTLFenceRef fence, MTLRenderStages beforeStages )toolbox MTLRenderCommandEncoderUpdateFenceAfterStages( MTLRenderCommandEncoderRef ref, MTLFenceRef fence, MTLRenderStages afterStages )#if _MACOSMAXALLOWED >= 101400toolbox MTLRenderCommandEncoderMemoryBarrierWithResources( MTLRenderCommandEncoderRef ref, MTLResourceRef *rsrcs, NSUInteger count, MTLRenderStages afterStages, MTLRenderStages beforeStages )// macOS 10.14+toolbox MTLRenderCommandEncoderMemoryBarrierWithScope( MTLRenderCommandEncoderRef ref, MTLBarrierScope scope, MTLRenderStages afterStages, MTLRenderStages beforeStages ) // macOS 10.14+#endif // 101400/*  Encoding commands that run indirect command buffers*/#if _MACOSMAXALLOWED >= 101400toolbox MTLRenderCommandEncoderExecuteCommandsInBuffer( MTLRenderCommandEncoderRef ref, MTLIndirectCommandBufferRef buffer, CFRange range ) // macOS 10.14+toolbox MTLRenderCommandEncoderExecuteCommandsInBufferIndirectBuffer( MTLRenderCommandEncoderRef ref, MTLIndirectCommandBufferRef buffer, MTLBufferRef indirectorBuffer, NSUInteger indirectBufferOffset ) // macOS 10.14+#endif // 101400/*  Encoding data sampling commands*/#if _MACOSMAXALLOWED >= 101500toolbox MTLRenderCommandEncoderSampleCountersInBuffer( MTLRenderCommandEncoderRef ref, MTLCounterSampleBufferRef buffer, NSUInteger index, BOOL withBarrier ) // macOS 10.15+#endif // 101500// Instance methods#if _MACOSMAXALLOWED >= 140000toolbox MTLRenderCommandEncoderSetVertexBufferAttributeStride( MTLRenderCommandEncoderRef ref, MTLBufferRef buffer, NSUInteger offset, NSUInteger stride, NSUInteger index ) // macOS 14.0+toolbox MTLRenderCommandEncoderSetVertexBufferOffsetAttributeStride( MTLRenderCommandEncoderRef ref, NSUInteger offset, NSUInteger stride, NSUInteger index ) // macOS 14.0+toolbox MTLRenderCommandEncoderSetVertexBytesAttributeStride( MTLRenderCommandEncoderRef ref, ptr bytes, NSUInteger length, NSUInteger stride, NSUInteger index ) // macOS 14.0+toolbox MTLRenderCommandEncoderSetVertexBuffersAttributeStride( MTLRenderCommandEncoderRef ref, MTLBufferRef *buffers, NSUInteger *offsets, NSUInteger *strides, CFRange range ) // macOS 14.0+#endif // 140000