/*  Operation.incl  Bernie Wylde 20180713  Framework: Foundation  Inherits from: Object  NSOperation - https://developer.apple.com/documentation/foundation/nsoperation*/// queue priority#if ndef _DEFINEDINCOCOA#define NSOperationQueuePriority as NSInteger#endifsystem NSOperationQueuePriority NSOperationQueuePriorityVeryLowsystem NSOperationQueuePriority NSOperationQueuePriorityLowsystem NSOperationQueuePriority NSOperationQueuePriorityNormalsystem NSOperationQueuePriority NSOperationQueuePriorityHighsystem NSOperationQueuePriority NSOperationQueuePriorityVeryHigh// default max number of operationssystem NSInteger NSOperationQueueDefaultMaxConcurrentOperationCount// result exceptionssystem CFStringRef NSInvocationOperationVoidResultExceptionsystem CFStringRef NSInvocationOperationCancelledException// Classtoolbox fn OperationClass = ClassRef// Inittoolbox fn OperationInit = OperationRef// autoreleased// Executingtoolbox OperationStart( OperationRef ref )toolbox OperationMain( OperationRef ref )/*  OperationSetCompletionCallback  completion callback example:    void local fn MyCompletionCallback( ref as OperationRef, userData as ptr )      // ...    end fn*/toolbox OperationSetCompletionCallback( OperationRef ref, ptr callback, ptr userData )toolbox OperationSetCompletionFunction( OperationRef ref, ptr fnAddress, ptr userData )// deprecated:10.0 use:OperationSetCompletionCallback// Cancellingtoolbox OperationCancel( OperationRef ref )// Statustoolbox fn OperationIsCancelled( OperationRef ref ) = BOOLtoolbox fn OperationIsExecuting( OperationRef ref ) = BOOLtoolbox fn OperationIsFinished( OperationRef ref ) = BOOLtoolbox fn OperationIsConcurrent( OperationRef ref ) = BOOLtoolbox fn OperationIsAsynchronous( OperationRef ref ) = BOOLtoolbox fn OperationIsReady( OperationRef ref ) = BOOLtoolbox fn OperationName( OperationRef ref ) = CFStringRef     toolbox OperationSetName( OperationRef ref, CFStringRef name ) // Dependenciestoolbox OperationAddDependency( OperationRef op1, OperationRef op2 )toolbox OperationRemoveDependency( OperationRef op1, OperationRef op2 )toolbox fn OperationDependencies( OperationRef ref ) = CFArrayRef// Execution prioritytoolbox fn OperationQualityOfService( OperationRef ref ) = NSQualityOfService    toolbox OperationSetQualityOfService( OperationRef ref, NSQualityOfService qos ) toolbox fn OperationQueuePriority( OperationRef ref ) = NSOperationQueuePrioritytoolbox OperationSetQueuePriority( OperationRef ref, NSOperationQueuePriority priority )// Waitingtoolbox OperationWaitUntilFinished( OperationRef ref )/*  OperationQueue  Inherits from: Object  NSOperationQueue - https://developer.apple.com/documentation/foundation/nsoperationqueue*/// Inittoolbox fn OperationQueueInit = OperationQueueRef// autoreleased// Get specific queuestoolbox fn OperationQueueMain = OperationQueueReftoolbox fn OperationQueueCurrent = OperationQueueRef// Managing operationstoolbox OperationQueueAddOperation( OperationQueueRef ref, OperationRef op )toolbox OperationQueueAddOperations( OperationQueueRef ref, CFArrayRef ops, BOOL waitUntilFinished )/*  OperationQueueAddOperationWithCallback  callback example:    local fn MyOperationQueueCallback( ref as OperationQueueRef, obj as CFTypeRef )    end fn*/toolbox OperationQueueAddOperationWithCallback( OperationQueueRef ref, ptr callback, CFTypeRef obj )// wrapper for addOperationWithBlock:toolbox OperationQueueAddOperationWithFunction( OperationQueueRef ref, ptr fnAddress, CFTypeRef obj )// deprecated:10.0 use:OperationQueueAddOperationWithCallbacktoolbox fn OperationQueueOperations( OperationQueueRef ref ) = CFArrayReftoolbox fn OperationQueueOperationCount( OperationQueueRef ref ) = NSUIntegertoolbox OperationQueueCancelAllOperations( OperationQueueRef ref )toolbox OperationQueueWaitUntilAllOperationsAreFinished( OperationQueueRef ref )// Managing executiontoolbox fn OperationQueueQualityOfService( OperationQueueRef ref ) = NSQualityOfService    toolbox OperationQueueSetQualityOfService( OperationQueueRef ref, NSQualityOfService qos ) toolbox fn OperationQueueMaxConcurrentOperationCount( OperationQueueRef ref ) = NSIntegertoolbox OperationQueueSetMaxConcurrentOperationCount( OperationQueueRef ref, NSInteger count )// Suspendingtoolbox fn OperationQueueIsSuspended( OperationQueueRef ref ) = BOOLtoolbox OperationQueueSetSuspended( OperationQueueRef ref, BOOL flag )// Configuretoolbox fn OperationQueueName( OperationQueueRef ref ) = CFStringReftoolbox OperationQueueSetName( OperationQueueRef ref, CFStringRef name )//toolbox fn OperationQueueUnderlyingQueue( OperationQueueRef ref ) = dispatch_queue_t//toolbox OperationQueueSetUnderlyingQueue( OperationQueueRef ref, dispatch_queue_t underlyingQueue )// Properties#if _MACOSMAXALLOWED >= 101500toolbox fn OperationQueueProgress( OperationQueueRef ref ) = ProgressRef// macOS 10.15+#endif// 101500/*  InvocationOperation  Inherits from: Operation/Object  NSInvocationOperation - https://developer.apple.com/documentation/foundation/nsinvocationoperation*/// Inittoolbox fn InvocationOperationWithTarget( CFTypeRef target, SELRef selector, CFTypeRef obj ) = InvocationOperationReftoolbox fn InvocationOperationWithTargetAndSelectorString( CFTypeRef target, CFStringRef string, CFTypeRef obj ) = InvocationOperationReftoolbox fn InvocationOperationWithInvocation( InvocationRef invocation ) = InvocationOperationRef// Attributestoolbox fn InvocationOperationInvocation( InvocationOperationRef ref ) = InvocationReftoolbox fn InvocationOperationResult( InvocationOperationRef ref ) = CFTypeRef/*  BlockOperation  Inherits from: Operation/Object  NSBlockOperation - https://developer.apple.com/documentation/foundation/nsblockoperation*/// Manage/*  BlockOperationWithCallback & BlockOperationAddCallback    callback example    void local fn MyBlockOperationCallback( userData as ptr )      // ...    end fn*/toolbox fn BlockOperationWithCallback( ptr callback, ptr userData ) = BlockOperationRef// userData can be NULLtoolbox BlockOperationAddCallback( BlockOperationRef ref, ptr callback, ptr userData )// userData can be NULLtoolbox fn BlockOperationBlocks( BlockOperationRef ref ) = CFArrayRef/*  BlockOperationWithBlock & BlockOperationAddBlock    callback example    void local fn MyBlockOperationCallback      // ...    end fn        Note: these functions are deprecated. Use BlockOperationWithCallback & BlockOperationAddCallback instead*/toolbox fn BlockOperationWithBlock( ptr callback ) = BlockOperationRef// deprecated:10.0 use:BlockOperationWithCallbacktoolbox BlockOperationAddBlock( BlockOperationRef ref, ptr callback )// deprecated:10.0 use:BlockOperationAddCallback