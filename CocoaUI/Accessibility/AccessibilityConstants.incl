/*  AccessibilityConstants  Bernie Wylde 20221027 */#if ndef _DEFINEDINCOCOA#define NSAccessibilityAttributeName as CFStringRef#endifsystem CFStringRef NSAccessibilityRoleAttribute                //(NSAccessibilityRole) - type, non-localized (e.g. radioButton)system CFStringRef NSAccessibilityRoleDescriptionAttribute     //(NSString *) - user readable role (e.g. "radio button")system CFStringRef NSAccessibilitySubroleAttribute             //(NSAccessibilitySubrole) - type, non-localized (e.g. closeButton)system CFStringRef NSAccessibilityHelpAttribute                //(NSString *) - instance description (e.g. a tool tip)system CFStringRef NSAccessibilityValueAttribute               //(id)         - element's valuesystem CFStringRef NSAccessibilityMinValueAttribute            //(id)         - element's min valuesystem CFStringRef NSAccessibilityMaxValueAttribute            //(id)         - element's max valuesystem CFStringRef NSAccessibilityEnabledAttribute             //(NSNumber *) - (boolValue) responds to user?system CFStringRef NSAccessibilityFocusedAttribute             //(NSNumber *) - (boolValue) has keyboard focus?system CFStringRef NSAccessibilityParentAttribute              //(id)         - element containing yousystem CFStringRef NSAccessibilityChildrenAttribute            //(NSArray *)  - elements you containsystem CFStringRef NSAccessibilityWindowAttribute              //(id)         - UIElement for the containing windowsystem CFStringRef NSAccessibilityTopLevelUIElementAttribute   //(id)         - UIElement for the containing top level elementsystem CFStringRef NSAccessibilitySelectedChildrenAttribute    //(NSArray *)  - child elements which are selectedsystem CFStringRef NSAccessibilityVisibleChildrenAttribute     //(NSArray *)  - child elements which are visiblesystem CFStringRef NSAccessibilityPositionAttribute            //(NSValue *)  - (pointValue) position in screen coordssystem CFStringRef NSAccessibilitySizeAttribute                //(NSValue *)  - (sizeValue) sizesystem CFStringRef NSAccessibilityContentsAttribute            //(NSArray *)  - main elementssystem CFStringRef NSAccessibilityTitleAttribute               //(NSString *) - visible text (e.g. of a push button)system CFStringRef NSAccessibilityDescriptionAttribute         //(NSString *) - instance descriptionsystem CFStringRef NSAccessibilityShownMenuAttribute           //(id)         - menu being displayedsystem CFStringRef NSAccessibilityValueDescriptionAttribute    //(NSString *)  - text description of valuesystem CFStringRef NSAccessibilitySharedFocusElementsAttribute //(NSArray *)  - elements that share focus// Misc attributessystem CFStringRef NSAccessibilityPreviousContentsAttribute         //(NSArray *)  - main elementssystem CFStringRef NSAccessibilityNextContentsAttribute             //(NSArray *)  - main elementssystem CFStringRef NSAccessibilityHeaderAttribute                   //(id)         - UIElement for header.system CFStringRef NSAccessibilityEditedAttribute                   //(NSNumber *) - (boolValue) is it dirty?system CFStringRef NSAccessibilityTabsAttribute                     //(NSArray *)  - UIElements for tabssystem CFStringRef NSAccessibilityHorizontalScrollBarAttribute      //(id)       - UIElement for the horizontal scrollersystem CFStringRef NSAccessibilityVerticalScrollBarAttribute        //(id)         - UIElement for the vertical scrollersystem CFStringRef NSAccessibilityOverflowButtonAttribute           //(id)         - UIElement for overflowsystem CFStringRef NSAccessibilityIncrementButtonAttribute          //(id)         - UIElement for incrementsystem CFStringRef NSAccessibilityDecrementButtonAttribute          //(id)         - UIElement for decrementsystem CFStringRef NSAccessibilityFilenameAttribute                 //(NSString *) - filenamesystem CFStringRef NSAccessibilityExpandedAttribute                 //(NSNumber *) - (boolValue) is expanded?system CFStringRef NSAccessibilitySelectedAttribute                 //(NSNumber *) - (boolValue) is selected?system CFStringRef NSAccessibilitySplittersAttribute                //(NSArray *)  - UIElements for splitterssystem CFStringRef NSAccessibilityDocumentAttribute                 //(NSString *) - url as string - for open documentsystem CFStringRef NSAccessibilityActivationPointAttribute          //(NSValue *)  - (pointValue)system CFStringRef NSAccessibilityURLAttribute                      //(NSURL *)    - urlsystem CFStringRef NSAccessibilityIndexAttribute                    //(NSNumber *)  - (intValue)system CFStringRef NSAccessibilityRowCountAttribute                 //(NSNumber *)  - (intValue) number of rowssystem CFStringRef NSAccessibilityColumnCountAttribute              //(NSNumber *)  - (intValue) number of columnssystem CFStringRef NSAccessibilityOrderedByRowAttribute             //(NSNumber *)  - (boolValue) is ordered by row?system CFStringRef NSAccessibilityWarningValueAttribute             //(id)  - warning value of a level indicator, typically a numbersystem CFStringRef NSAccessibilityCriticalValueAttribute            //(id)  - critical value of a level indicator, typically a numbersystem CFStringRef NSAccessibilityPlaceholderValueAttribute         //(NSString *)  - placeholder value of a control such as a text fieldsystem CFStringRef NSAccessibilityContainsProtectedContentAttribute // (NSNumber *) - (boolValue) contains protected content?system CFStringRef NSAccessibilityAlternateUIVisibleAttribute       //(NSNumber *) - (boolValue)system CFStringRef NSAccessibilityRequiredAttribute                 //(NSNumber *) - (boolValue) whether a form field is required to have content for successful submission of the form// Linkage attributessystem CFStringRef NSAccessibilityTitleUIElementAttribute             //(id)	      - UIElement for the titlesystem CFStringRef NSAccessibilityServesAsTitleForUIElementsAttribute //(NSArray *) - UIElements this titlessystem CFStringRef NSAccessibilityLinkedUIElementsAttribute           //(NSArray *) - corresponding UIElements// Text-specific attributessystem CFStringRef NSAccessibilitySelectedTextAttribute             //(NSString *) - selected textsystem CFStringRef NSAccessibilitySelectedTextRangeAttribute        //(NSValue *)  - (rangeValue) range of selected textsystem CFStringRef NSAccessibilityNumberOfCharactersAttribute       //(NSNumber *) - number of characterssystem CFStringRef NSAccessibilityVisibleCharacterRangeAttribute    //(NSValue *)  - (rangeValue) range of visible textsystem CFStringRef NSAccessibilitySharedTextUIElementsAttribute     //(NSArray *)  - text views sharing textsystem CFStringRef NSAccessibilitySharedCharacterRangeAttribute     //(NSValue *)  - (rangeValue) part of shared text in this viewsystem CFStringRef NSAccessibilityInsertionPointLineNumberAttribute //(NSNumber *) - line# containing caretsystem CFStringRef NSAccessibilitySelectedTextRangesAttribute       //(NSArray<NSValue *> *) - array of NSValue (rangeValue) ranges of selected text// Parameterized text-specific attributes#if ndef _DEFINEDINCOCOA#define NSAccessibilityParameterizedAttributeName as CFStringRef#endifsystem CFStringRef NSAccessibilityLineForIndexParameterizedAttribute             //(NSNumber *) - line# for char index param:(NSNumber *)system CFStringRef NSAccessibilityRangeForLineParameterizedAttribute             //(NSValue *)  - (rangeValue) range of line param:(NSNumber *)system CFStringRef NSAccessibilityStringForRangeParameterizedAttribute           //(NSString *) - substring param:(NSValue * - rangeValue)system CFStringRef NSAccessibilityRangeForPositionParameterizedAttribute         //(NSValue *)  - (rangeValue) composed char range param:(NSValue * - pointValue)system CFStringRef NSAccessibilityRangeForIndexParameterizedAttribute            //(NSValue *)  - (rangeValue) composed char range param:(NSNumber *)system CFStringRef NSAccessibilityBoundsForRangeParameterizedAttribute           //(NSValue *)  - (rectValue) bounds of text param:(NSValue * - rangeValue)system CFStringRef NSAccessibilityRTFForRangeParameterizedAttribute              //(NSData *)   - rtf for text param:(NSValue * - rangeValue)system CFStringRef NSAccessibilityStyleRangeForIndexParameterizedAttribute       //(NSValue *)  - (rangeValue) extent of style run param:(NSNumber *)system CFStringRef NSAccessibilityAttributedStringForRangeParameterizedAttribute //(NSAttributedString *) - does _not_ use attributes from Appkit/AttributedString.h// Text attributed string attributes and constantssystem CFStringRef NSAccessibilityFontTextAttribute               //(NSDictionary<NSAccessibilityFontAttributeKey, id> *)system CFStringRef NSAccessibilityForegroundColorTextAttribute    //CGColorRefsystem CFStringRef NSAccessibilityBackgroundColorTextAttribute    //CGColorRefsystem CFStringRef NSAccessibilityUnderlineColorTextAttribute     //CGColorRefsystem CFStringRef NSAccessibilityStrikethroughColorTextAttribute //CGColorRefsystem CFStringRef NSAccessibilityUnderlineTextAttribute          //(NSNumber *)	    - underline stylesystem CFStringRef NSAccessibilitySuperscriptTextAttribute        //(NSNumber *)	    - superscript>0, subscript<0system CFStringRef NSAccessibilityStrikethroughTextAttribute      //(NSNumber *)	    - (boolValue)system CFStringRef NSAccessibilityShadowTextAttribute             //(NSNumber *)	    - (boolValue)system CFStringRef NSAccessibilityAttachmentTextAttribute         //id - corresponding elementsystem CFStringRef NSAccessibilityLinkTextAttribute               //id - corresponding elementsystem CFStringRef NSAccessibilityAutocorrectedTextAttribute      //(NSNumber *)	    - (boolValue)system CFStringRef NSAccessibilityTextAlignmentAttribute          //(NSNumber *) - (NSTextAlignment)// Textual list attributes and constants. Examples: unordered or ordered lists in a document.system CFStringRef NSAccessibilityListItemPrefixTextAttribute // NSAttributedString, the prepended string of the list item. If the string is a common unicode character (e.g. a bullet •), return that unicode character. For lists with images before the text, return a reasonable label of the image.system CFStringRef NSAccessibilityListItemIndexTextAttribute  // NSNumber, integerValue of the line index. Each list item increments the index, even for unordered lists. The first item should have index 0.system CFStringRef NSAccessibilityListItemLevelTextAttribute  // NSNumber, integerValue of the indent level. Each sublist increments the level. The first item should have level 0.// About MisspelledText attributes for attribute strings://// NSAccessibilityMisspelledTextAttribute was the original attribute to indicate misspelled text. In OS X 10.4, the Cocoa text system added support for NSAccessibilityMarkedMisspelledTextAttribute, which was used to indicate a word that was visibly marked as misspelled (for example, with a red squiggle underneath) the original MisspelledText attribute could also be used on text that was not visibly marked as mispelled (for example, a misspelled word that was currently being edited by the user).//// Typically, a screen reader only wants to vocalize what a sighted user could see, and so the MarkedMisspelledText attribute was adopted by VoiceOver to provide feedback to the user about misspelled text. In OS X 10.9, VoiceOver has entirely stopped using the original MisspelledText attribute, and now only checks for MarkedMisspelledText.//// When implementing accessibility for a custom text-editing engine, you should generally provide the MarkedMisspelledText attribute in order to support VoiceOver, especially in OS X 10.9 and later. You may optionally also support the MisspelledText attribute for compatibility with other accessibility clients.system CFStringRef NSAccessibilityMisspelledTextAttribute       //(NSNumber *)	    - (boolValue)system CFStringRef NSAccessibilityMarkedMisspelledTextAttribute //(NSNumber *) - (boolValue)system CFStringRef NSAccessibilityLanguageTextAttribute         //(NSString *) - BCP-47 langugage code to identify the language of a segment of string// This key in attributed string allows developers to return an array of localized strings to describe custom text attributessystem CFStringRef NSAccessibilityCustomTextAttribute           //(NSArray *) - NSString per custom text attribute// NSAccessibilityAnnotationTextAttribute allows annotation information to be conveyed.  It returns an array to allow overlapping annotations.  Each annotation attribute dictionary can describe itself via the set of NSAccessibilityAnnotationAttributeKeys.//    NSAccessibilityAnnotationLabel: Describe the annotation//    NSAccessibilityAnnotationElement: Annotation UIElement.  Should return this if the element is interactive.//    NSAccessibilityAnnotationLocation: The position where the annotation applies.  Generally, this is the entire range.  But in the case where the annotation, like a comment arrow, points to a position between two characters, the range is zero.  Since NSAttributedString requires adding an attribute to string of length greater than zero, the string nearest the annotation with at least length of one needs to be returned.  So NSAccessibilityAnnotationLocation is a way to indicate exactly which end of that range the annotation is intended.system CFStringRef NSAccessibilityAnnotationTextAttribute       //(NSArray *) - (NSDictionary<NSAccessibilityAnnotationAttributeKey, id> *)#if ndef _DEFINEDINCOCOA#define NSAccessibilityAnnotationAttributeKey as CFStringRef#endifsystem CFStringRef NSAccessibilityAnnotationLabel    // required (NSString *)system CFStringRef NSAccessibilityAnnotationElement  // optional (id) - UIElement for the annotation objectsystem CFStringRef NSAccessibilityAnnotationLocation // optional (NSNumber *) - (NSAccessibilityAnnotationPosition)#if ndef _DEFINEDINCOCOA#define NSAccessibilityAnnotationPosition as NSInteger#endifsystem NSAccessibilityAnnotationPosition NSAccessibilityAnnotationPositionFullRangesystem NSAccessibilityAnnotationPosition NSAccessibilityAnnotationPositionStartsystem NSAccessibilityAnnotationPosition NSAccessibilityAnnotationPositionEnd#if ndef _DEFINEDINCOCOA#define NSAccessibilityFontAttributeKey as CFStringRef#endifsystem CFStringRef NSAccessibilityFontNameKey    // requiredsystem CFStringRef NSAccessibilityFontFamilyKey  // optionalsystem CFStringRef NSAccessibilityVisibleNameKey // optionalsystem CFStringRef NSAccessibilityFontSizeKey    // required// Window-specific attributessystem CFStringRef NSAccessibilityMainAttribute             //(NSNumber *) - (boolValue) is it the main window?system CFStringRef NSAccessibilityMinimizedAttribute        //(NSNumber *) - (boolValue) is window minimized?system CFStringRef NSAccessibilityCloseButtonAttribute      //(id) - UIElement for close box (or nil)system CFStringRef NSAccessibilityZoomButtonAttribute       //(id) - UIElement for zoom box (or nil)system CFStringRef NSAccessibilityMinimizeButtonAttribute   //(id) - UIElement for miniaturize box (or nil)system CFStringRef NSAccessibilityToolbarButtonAttribute    //(id) - UIElement for toolbar box (or nil)system CFStringRef NSAccessibilityProxyAttribute            //(id) - UIElement for title's icon (or nil)system CFStringRef NSAccessibilityGrowAreaAttribute         //(id) - UIElement for grow box (or nil)system CFStringRef NSAccessibilityModalAttribute            //(NSNumber *) - (boolValue) is the window modalsystem CFStringRef NSAccessibilityDefaultButtonAttribute    //(id) - UIElement for default buttonsystem CFStringRef NSAccessibilityCancelButtonAttribute     //(id) - UIElement for cancel buttonsystem CFStringRef NSAccessibilityFullScreenButtonAttribute //(id) - UIElement for full screen button (or nil)// Application-specific attributessystem CFStringRef NSAccessibilityMenuBarAttribute          //(id)         - UIElement for the menu barsystem CFStringRef NSAccessibilityWindowsAttribute          //(NSArray *)  - UIElements for the windowssystem CFStringRef NSAccessibilityFrontmostAttribute        //(NSNumber *) - (boolValue) is the app active?system CFStringRef NSAccessibilityHiddenAttribute           //(NSNumber *) - (boolValue) is the app hidden?system CFStringRef NSAccessibilityMainWindowAttribute       //(id)         - UIElement for the main window.system CFStringRef NSAccessibilityFocusedWindowAttribute    //(id)         - UIElement for the key window.system CFStringRef NSAccessibilityFocusedUIElementAttribute //(id)         - Currently focused UIElement.system CFStringRef NSAccessibilityExtrasMenuBarAttribute    //(id)         - UIElement for the application extras menu bar.#if ndef _DEFINEDINCOCOA#define NSAccessibilityOrientation as NSInteger#endifsystem NSAccessibilityOrientation NSAccessibilityOrientationUnknown    // = 0system NSAccessibilityOrientation NSAccessibilityOrientationVertical   // = 1system NSAccessibilityOrientation NSAccessibilityOrientationHorizontal // = 2system CFStringRef NSAccessibilityOrientationAttribute	//(NSAccessibilityOrientationValue)#if ndef _DEFINEDINCOCOA#define NSAccessibilityOrientationValue as CFStringRef#endifsystem CFStringRef NSAccessibilityVerticalOrientationValuesystem CFStringRef NSAccessibilityHorizontalOrientationValuesystem CFStringRef NSAccessibilityUnknownOrientationValuesystem CFStringRef NSAccessibilityColumnTitlesAttribute //(NSArray *)  - UIElements for titlessystem CFStringRef NSAccessibilitySearchButtonAttribute //(id)         - UIElement for search field search btnsystem CFStringRef NSAccessibilitySearchMenuAttribute   //(id)         - UIElement for search field menusystem CFStringRef NSAccessibilityClearButtonAttribute  //(id)         - UIElement for search field clear btn// Table/outline view attributessystem CFStringRef NSAccessibilityRowsAttribute            //(NSArray *)  - UIElements for rowssystem CFStringRef NSAccessibilityVisibleRowsAttribute     //(NSArray *)  - UIElements for visible rowssystem CFStringRef NSAccessibilitySelectedRowsAttribute    //(NSArray *)  - UIElements for selected rowssystem CFStringRef NSAccessibilityColumnsAttribute         //(NSArray *)  - UIElements for columnssystem CFStringRef NSAccessibilityVisibleColumnsAttribute  //(NSArray *)  - UIElements for visible columnssystem CFStringRef NSAccessibilitySelectedColumnsAttribute //(NSArray *)  - UIElements for selected columnssystem CFStringRef NSAccessibilitySortDirectionAttribute   //(NSAccessibilitySortDirectionValue)// Cell-based table attributessystem CFStringRef NSAccessibilitySelectedCellsAttribute          //(NSArray *)  - UIElements for selected cellssystem CFStringRef NSAccessibilityVisibleCellsAttribute           //(NSArray *)  - UIElements for visible cellssystem CFStringRef NSAccessibilityRowHeaderUIElementsAttribute    //(NSArray *)  - UIElements for row headerssystem CFStringRef NSAccessibilityColumnHeaderUIElementsAttribute //(NSArray *)  - UIElements for column headers// Cell-based table parameterized attributes.  The parameter for this attribute is an NSArray containing two NSNumbers, the first NSNumber specifies the column index, the second NSNumber specifies the row index.system CFStringRef NSAccessibilityCellForColumnAndRowParameterizedAttribute  // (id) - UIElement for cell at specified row and column// Cell attributes.  The index range contains both the starting index, and the index span in a table.system CFStringRef NSAccessibilityRowIndexRangeAttribute    //(NSValue *)  - (rangeValue) location and row spansystem CFStringRef NSAccessibilityColumnIndexRangeAttribute //(NSValue *)  - (rangeValue) location and column span// Layout area attributessystem CFStringRef NSAccessibilityHorizontalUnitsAttribute           //(NSAccessibilityRulerUnitValue)system CFStringRef NSAccessibilityVerticalUnitsAttribute             //(NSAccessibilityRulerUnitValue)system CFStringRef NSAccessibilityHorizontalUnitDescriptionAttribute //(NSString *)system CFStringRef NSAccessibilityVerticalUnitDescriptionAttribute   //(NSString *)// Layout area parameterized attributessystem CFStringRef NSAccessibilityLayoutPointForScreenPointParameterizedAttribute //(NSValue *)  - (pointValue) param:(NSValue * - pointValue)system CFStringRef NSAccessibilityLayoutSizeForScreenSizeParameterizedAttribute   //(NSValue *)  - (sizeValue) param:(NSValue * - sizeValue)system CFStringRef NSAccessibilityScreenPointForLayoutPointParameterizedAttribute //(NSValue *)  - (pointValue) param:(NSValue * - pointValue)system CFStringRef NSAccessibilityScreenSizeForLayoutSizeParameterizedAttribute   //(NSValue *)  - (sizeValue) param:(NSValue * - sizeValue)// Layout item attributessystem CFStringRef NSAccessibilityHandlesAttribute //(NSArray *)  - UIElements for handles// Sort direction values#if ndef _DEFINEDINCOCOA#define NSAccessibilitySortDirectionValue as CFStringRef#endifsystem CFStringRef NSAccessibilityAscendingSortDirectionValuesystem CFStringRef NSAccessibilityDescendingSortDirectionValuesystem CFStringRef NSAccessibilityUnknownSortDirectionValue#if ndef _DEFINEDINCOCOA#define NSAccessibilitySortDirection as NSInteger#endifsystem NSAccessibilitySortDirection NSAccessibilitySortDirectionUnknown    // = 0system NSAccessibilitySortDirection NSAccessibilitySortDirectionAscending  // = 1system NSAccessibilitySortDirection NSAccessibilitySortDirectionDescending // = 2// Outline attributessystem CFStringRef NSAccessibilityDisclosingAttribute      //(NSNumber *) - (boolValue) is disclosing rows?system CFStringRef NSAccessibilityDisclosedRowsAttribute   //(NSArray *)  - UIElements for disclosed rowssystem CFStringRef NSAccessibilityDisclosedByRowAttribute  //(id)         - UIElement for disclosing rowsystem CFStringRef NSAccessibilityDisclosureLevelAttribute //(NSNumber *) - indentation level/* Slider attributes */system CFStringRef NSAccessibilityAllowedValuesAttribute   //(NSArray<NSNumber *> *) - array of allowed valuessystem CFStringRef NSAccessibilityLabelUIElementsAttribute //(NSArray *) - array of label UIElementssystem CFStringRef NSAccessibilityLabelValueAttribute      //(NSNumber *) - value of a label UIElement/* Ruler view attributes */system CFStringRef NSAccessibilityMarkerUIElementsAttribute	//(NSArray *)system CFStringRef NSAccessibilityMarkerValuesAttribute		//system CFStringRef NSAccessibilityMarkerGroupUIElementAttribute	//(id)system CFStringRef NSAccessibilityUnitsAttribute			//(NSAccessibilityRulerUnitValue)system CFStringRef NSAccessibilityUnitDescriptionAttribute	//(NSString *)system CFStringRef NSAccessibilityMarkerTypeAttribute		//(NSAccessibilityRulerMarkerTypeValue)system CFStringRef NSAccessibilityMarkerTypeDescriptionAttribute	//(NSString *)// UI element identification attributessystem CFStringRef NSAccessibilityIdentifierAttribute		//(NSString *)// Ruler marker type values#if ndef _DEFINEDINCOCOA#define NSAccessibilityRulerMarkerTypeValue as CFStringRef#endifsystem CFStringRef NSAccessibilityLeftTabStopMarkerTypeValuesystem CFStringRef NSAccessibilityRightTabStopMarkerTypeValuesystem CFStringRef NSAccessibilityCenterTabStopMarkerTypeValuesystem CFStringRef NSAccessibilityDecimalTabStopMarkerTypeValuesystem CFStringRef NSAccessibilityHeadIndentMarkerTypeValuesystem CFStringRef NSAccessibilityTailIndentMarkerTypeValuesystem CFStringRef NSAccessibilityFirstLineIndentMarkerTypeValuesystem CFStringRef NSAccessibilityUnknownMarkerTypeValue#if ndef _DEFINEDINCOCOA#define NSAccessibilityRulerMarkerType as NSInteger#endifsystem NSAccessibilityRulerMarkerType NSAccessibilityRulerMarkerTypeUnknown         // = 0system NSAccessibilityRulerMarkerType NSAccessibilityRulerMarkerTypeTabStopLeft     // = 1system NSAccessibilityRulerMarkerType NSAccessibilityRulerMarkerTypeTabStopRight    // = 2system NSAccessibilityRulerMarkerType NSAccessibilityRulerMarkerTypeTabStopCenter   // = 3system NSAccessibilityRulerMarkerType NSAccessibilityRulerMarkerTypeTabStopDecimal  // = 4system NSAccessibilityRulerMarkerType NSAccessibilityRulerMarkerTypeIndentHead      // = 5system NSAccessibilityRulerMarkerType NSAccessibilityRulerMarkerTypeIndentTail      // = 6system NSAccessibilityRulerMarkerType NSAccessibilityRulerMarkerTypeIndentFirstLine // = 7// Ruler unit values#if ndef _DEFINEDINCOCOA#define NSAccessibilityRulerUnitValue as CFStringRef#endifsystem CFStringRef NSAccessibilityInchesUnitValuesystem CFStringRef NSAccessibilityCentimetersUnitValuesystem CFStringRef NSAccessibilityPointsUnitValuesystem CFStringRef NSAccessibilityPicasUnitValuesystem CFStringRef NSAccessibilityUnknownUnitValue#if ndef _DEFINEDINCOCOA#define NSAccessibilityUnits as NSInteger#endifsystem NSAccessibilityUnits NSAccessibilityUnitsUnknown     // = 0system NSAccessibilityUnits NSAccessibilityUnitsInches      // = 1system NSAccessibilityUnits NSAccessibilityUnitsCentimeters // = 2system NSAccessibilityUnits NSAccessibilityUnitsPoints      // = 3system NSAccessibilityUnits NSAccessibilityUnitsPicas       // = 4// Actions#if ndef _DEFINEDINCOCOA#define NSAccessibilityActionName as CFStringRef#endifsystem CFStringRef NSAccessibilityPressActionsystem CFStringRef NSAccessibilityIncrementActionsystem CFStringRef NSAccessibilityDecrementActionsystem CFStringRef NSAccessibilityConfirmActionsystem CFStringRef NSAccessibilityPickActionsystem CFStringRef NSAccessibilityCancelActionsystem CFStringRef NSAccessibilityRaiseActionsystem CFStringRef NSAccessibilityShowMenuActionsystem CFStringRef NSAccessibilityDeleteAction// Actions that allow the developer to present either alternative or original UI. There may be new UI elements that appear. There may be UI elements that disappear. There may be changes to existing UI elements. Or a combination of them. Currently this is typically seen during a mouse hovering event.system CFStringRef NSAccessibilityShowAlternateUIActionsystem CFStringRef NSAccessibilityShowDefaultUIAction// Notifications#if ndef _DEFINEDINCOCOA#define NSAccessibilityNotificationName as CFStringRef#endif// Focus notificationssystem CFStringRef NSAccessibilityMainWindowChangedNotificationsystem CFStringRef NSAccessibilityFocusedWindowChangedNotificationsystem CFStringRef NSAccessibilityFocusedUIElementChangedNotification// Application notificationssystem CFStringRef NSAccessibilityApplicationActivatedNotificationsystem CFStringRef NSAccessibilityApplicationDeactivatedNotificationsystem CFStringRef NSAccessibilityApplicationHiddenNotificationsystem CFStringRef NSAccessibilityApplicationShownNotification// Window notificationssystem CFStringRef NSAccessibilityWindowCreatedNotificationsystem CFStringRef NSAccessibilityWindowMovedNotificationsystem CFStringRef NSAccessibilityWindowResizedNotificationsystem CFStringRef NSAccessibilityWindowMiniaturizedNotificationsystem CFStringRef NSAccessibilityWindowDeminiaturizedNotification// Drawer & sheet notificationssystem CFStringRef NSAccessibilityDrawerCreatedNotificationsystem CFStringRef NSAccessibilitySheetCreatedNotification// Element notificationssystem CFStringRef NSAccessibilityUIElementDestroyedNotificationsystem CFStringRef NSAccessibilityValueChangedNotificationsystem CFStringRef NSAccessibilityTitleChangedNotificationsystem CFStringRef NSAccessibilityResizedNotificationsystem CFStringRef NSAccessibilityMovedNotificationsystem CFStringRef NSAccessibilityCreatedNotification// Used when UI changes require the attention of assistive application.  Pass along a user info dictionary with the key NSAccessibilityUIElementsKey and an array of elements that have been added or changed as a result of this layout change.system CFStringRef NSAccessibilityLayoutChangedNotification// Misc notificationssystem CFStringRef NSAccessibilityHelpTagCreatedNotificationsystem CFStringRef NSAccessibilitySelectedTextChangedNotificationsystem CFStringRef NSAccessibilityRowCountChangedNotificationsystem CFStringRef NSAccessibilitySelectedChildrenChangedNotificationsystem CFStringRef NSAccessibilitySelectedRowsChangedNotificationsystem CFStringRef NSAccessibilitySelectedColumnsChangedNotificationsystem CFStringRef NSAccessibilityRowExpandedNotificationsystem CFStringRef NSAccessibilityRowCollapsedNotification// Cell-table notificationssystem CFStringRef NSAccessibilitySelectedCellsChangedNotification// Layout area notificationssystem CFStringRef NSAccessibilityUnitsChangedNotificationsystem CFStringRef NSAccessibilitySelectedChildrenMovedNotification// This notification allows an application to request that an announcement be made to the user by an assistive application such as VoiceOver.  The notification requires a user info dictionary with the key NSAccessibilityAnnouncementKey and the announcement as a localized string.  In addition, the key NSAccessibilityAnnouncementPriorityKey should also be used to help an assistive application determine the importance of this announcement.  This notification should be posted for the application element.system CFStringRef NSAccessibilityAnnouncementRequestedNotification// Roles#if ndef _DEFINEDINCOCOA#define NSAccessibilityRole as CFStringRef#endifsystem CFStringRef NSAccessibilityUnknownRolesystem CFStringRef NSAccessibilityButtonRolesystem CFStringRef NSAccessibilityRadioButtonRolesystem CFStringRef NSAccessibilityCheckBoxRolesystem CFStringRef NSAccessibilitySliderRolesystem CFStringRef NSAccessibilityTabGroupRolesystem CFStringRef NSAccessibilityTextFieldRolesystem CFStringRef NSAccessibilityStaticTextRolesystem CFStringRef NSAccessibilityTextAreaRolesystem CFStringRef NSAccessibilityScrollAreaRolesystem CFStringRef NSAccessibilityPopUpButtonRolesystem CFStringRef NSAccessibilityMenuButtonRolesystem CFStringRef NSAccessibilityTableRolesystem CFStringRef NSAccessibilityApplicationRolesystem CFStringRef NSAccessibilityGroupRolesystem CFStringRef NSAccessibilityRadioGroupRolesystem CFStringRef NSAccessibilityListRolesystem CFStringRef NSAccessibilityScrollBarRolesystem CFStringRef NSAccessibilityValueIndicatorRolesystem CFStringRef NSAccessibilityImageRolesystem CFStringRef NSAccessibilityMenuBarRolesystem CFStringRef NSAccessibilityMenuBarItemRolesystem CFStringRef NSAccessibilityMenuRolesystem CFStringRef NSAccessibilityMenuItemRolesystem CFStringRef NSAccessibilityColumnRolesystem CFStringRef NSAccessibilityRowRolesystem CFStringRef NSAccessibilityToolbarRolesystem CFStringRef NSAccessibilityBusyIndicatorRolesystem CFStringRef NSAccessibilityProgressIndicatorRolesystem CFStringRef NSAccessibilityWindowRolesystem CFStringRef NSAccessibilityDrawerRolesystem CFStringRef NSAccessibilitySystemWideRolesystem CFStringRef NSAccessibilityOutlineRolesystem CFStringRef NSAccessibilityIncrementorRolesystem CFStringRef NSAccessibilityBrowserRolesystem CFStringRef NSAccessibilityComboBoxRolesystem CFStringRef NSAccessibilitySplitGroupRolesystem CFStringRef NSAccessibilitySplitterRolesystem CFStringRef NSAccessibilityColorWellRolesystem CFStringRef NSAccessibilityGrowAreaRolesystem CFStringRef NSAccessibilitySheetRolesystem CFStringRef NSAccessibilityHelpTagRolesystem CFStringRef NSAccessibilityMatteRolesystem CFStringRef NSAccessibilityRulerRolesystem CFStringRef NSAccessibilityRulerMarkerRolesystem CFStringRef NSAccessibilityLinkRolesystem CFStringRef NSAccessibilityDisclosureTriangleRolesystem CFStringRef NSAccessibilityGridRolesystem CFStringRef NSAccessibilityRelevanceIndicatorRolesystem CFStringRef NSAccessibilityLevelIndicatorRolesystem CFStringRef NSAccessibilityCellRole // As found in a cell-based tablesystem CFStringRef NSAccessibilityPopoverRolesystem CFStringRef NSAccessibilityPageRole// Layout-area rolessystem CFStringRef NSAccessibilityLayoutAreaRolesystem CFStringRef NSAccessibilityLayoutItemRolesystem CFStringRef NSAccessibilityHandleRole// Subroles#if ndef _DEFINEDINCOCOA#define NSAccessibilitySubrole as CFStringRef#endifsystem CFStringRef NSAccessibilityUnknownSubrolesystem CFStringRef NSAccessibilityCloseButtonSubrolesystem CFStringRef NSAccessibilityZoomButtonSubrolesystem CFStringRef NSAccessibilityMinimizeButtonSubrolesystem CFStringRef NSAccessibilityToolbarButtonSubrolesystem CFStringRef NSAccessibilityTableRowSubrolesystem CFStringRef NSAccessibilityOutlineRowSubrolesystem CFStringRef NSAccessibilitySecureTextFieldSubrolesystem CFStringRef NSAccessibilityStandardWindowSubrolesystem CFStringRef NSAccessibilityDialogSubrolesystem CFStringRef NSAccessibilitySystemDialogSubrolesystem CFStringRef NSAccessibilityFloatingWindowSubrolesystem CFStringRef NSAccessibilitySystemFloatingWindowSubrolesystem CFStringRef NSAccessibilityIncrementArrowSubrolesystem CFStringRef NSAccessibilityDecrementArrowSubrolesystem CFStringRef NSAccessibilityIncrementPageSubrolesystem CFStringRef NSAccessibilityDecrementPageSubrolesystem CFStringRef NSAccessibilitySearchFieldSubrolesystem CFStringRef NSAccessibilityTextAttachmentSubrolesystem CFStringRef NSAccessibilityTextLinkSubrolesystem CFStringRef NSAccessibilityTimelineSubrolesystem CFStringRef NSAccessibilitySortButtonSubrolesystem CFStringRef NSAccessibilityRatingIndicatorSubrolesystem CFStringRef NSAccessibilityContentListSubrolesystem CFStringRef NSAccessibilityDefinitionListSubrolesystem CFStringRef NSAccessibilityFullScreenButtonSubrolesystem CFStringRef NSAccessibilityToggleSubrolesystem CFStringRef NSAccessibilitySwitchSubrolesystem CFStringRef NSAccessibilityDescriptionListSubrolesystem CFStringRef NSAccessibilityTabButtonSubrolesystem CFStringRef NSAccessibilityCollectionListSubrolesystem CFStringRef NSAccessibilitySectionListSubrole// Below are keys used for the user info dictionary of the NSAccessibilityPostNotificationWithUserInfo API#if ndef _DEFINEDINCOCOA#define NSAccessibilityNotificationUserInfoKey as CFStringRef#endif// Key used in the user info dictionary for notifications.  The value is an array of elements that is associated with the notification.  For example, a NSAccessibilityLayoutChangedNotification should include an array of elements that have been added/changed using this key.system CFStringRef NSAccessibilityUIElementsKey// Key used in the user info dictionary for any relevant notification.  This gives the assistive application client an opportunity to determine how to handle the corresponding notification based on the priority.  For example, a developer should pass the priority key for NSAccessibilityAnnouncementRequestedNotification.  Then clients such as VoiceOver can decide to speak the announcement immediately or after the current speech is completed based on the priority level.  This key is required for NSAccessibilityAnnouncementRequestedNotification.  The NSAccessibilityLayoutChangedNotification is another example where priority can help assistive applications determine how to handle the UI change.system CFStringRef NSAccessibilityPriorityKey// Key used in the user info dictionary sent with the NSAccessibilityAnnouncementRequestedNotification.  The value for the announcement should be a localized string.  This should generally be used in conjunction with the NSAccessibilityPriorityKey to help assistive applications determine the importance of this announcement.system CFStringRef NSAccessibilityAnnouncementKey// This function allows an accessibility notification to be posted with a user info dictionary.  The user info dictionary can be nil.  Valid contents of the user info dictionary are limited to classes which can be returned to an accessibility client.  That list currently includes NSString, NSNumber, NSArray, NSValues of points, ranges, sizes, rects, and valid NSAccessibility objects.  Most accessibility notifications do not require a user info dictionary.toolbox NSAccessibilityPostNotificationWithUserInfo( ObjectRef element, CFStringRef notification, CFDictionaryRef userInfo )// System defined priority levels.  This priority level should be included for every NSAccessibilityAnnouncementRequestedNotification.#if ndef _DEFINEDINCOCOA#define NSAccessibilityPriorityLevel as NSInteger#endifsystem NSAccessibilityPriorityLevel NSAccessibilityPriorityLow    // = 10system NSAccessibilityPriorityLevel NSAccessibilityPriorityMedium // = 50system NSAccessibilityPriorityLevel NSAccessibilityPriorityHigh   // = 90// token type for loading search element//typedef id<NSSecureCoding, NSObject> NSAccessibilityLoadingToken#if ndef _DEFINEDINCOCOA#define NSAccessibilityLoadingToken as ObjectRef#endif// Errorsystem CFStringRef NSAccessibilityErrorCodeExceptionInfo// This key will appear in an exception's dictionary. Its value will be a CFNumberRef