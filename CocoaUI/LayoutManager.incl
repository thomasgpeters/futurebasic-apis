/*  LayoutManager.incl  Bernie Wylde 20180702  Framework: AppKit  Inherits from: Object  NSLayoutManager - https://developer.apple.com/documentation/uikit/nslayoutmanager?language=objc*/#if ndef _DEFINEDINCOCOA#define NSGlyphProperty as NSInteger#endifsystem NSGlyphProperty NSGlyphPropertyNullsystem NSGlyphProperty NSGlyphPropertyControlCharactersystem NSGlyphProperty NSGlyphPropertyElasticsystem NSGlyphProperty NSGlyphPropertyNonBaseCharacter#if ndef _DEFINEDINCOCOA#define NSTextLayoutOrientation as NSInteger#endifsystem NSTextLayoutOrientation NSTextLayoutOrientationHorizontalsystem NSTextLayoutOrientation NSTextLayoutOrientationVertical// typesetter behavior#if ndef _DEFINEDINCOCOA#define NSTypesetterBehavior as NSInteger#endifsystem NSTypesetterBehavior NSTypesetterLatestBehavior                  // -1system NSTypesetterBehavior NSTypesetterOriginalBehavior                // = 0,    // Mac OS X versions 10.0 and 10.1 (uses NSSimpleHorizontalTypesetter)system NSTypesetterBehavior NSTypesetterBehavior_10_2_WithCompatibility // = 1,    // 10.2 with backward compatibility layout (uses new ATS-based typesetter)system NSTypesetterBehavior NSTypesetterBehavior_10_2                   // = 2,system NSTypesetterBehavior NSTypesetterBehavior_10_3                   // = 3,system NSTypesetterBehavior NSTypesetterBehavior_10_4                   // = 4// Classtoolbox fn LayoutManagerClass = ClassRef// Inittoolbox fn LayoutManagerInit = LayoutManagerRef// autoreleased// Text storagetoolbox fn LayoutManagerTextStorage(  LayoutManagerRef ref ) = TextStorageReftoolbox LayoutManagerReplaceTextStorage( LayoutManagerRef ref, TextStorageRef ts )// Text containerstoolbox fn LayoutManagerTextContainers( LayoutManagerRef ref ) = CFArrayReftoolbox LayoutManagerAddTextContainer( LayoutManagerRef ref, TextContainerRef tc )toolbox LayoutManagerInsertTextContainer( LayoutManagerRef ref, TextContainerRef tc, NSUInteger index )toolbox LayoutManagerRemoveTextContainer( LayoutManagerRef ref, NSUInteger index )toolbox LayoutManagerSetTextContainer( LayoutManagerRef ref, TextContainerRef tc, CFRange glyphRange )toolbox LayoutManagerTextContainerChangedGeometry( LayoutManagerRef ref, TextContainerRef tc )toolbox LayoutManagerTextContainerChangedTextView( LayoutManagerRef ref, TextContainerRef tc )toolbox fn LayoutManagerTextContainerForGlyph( LayoutManagerRef ref, NSUInteger index, CFRange *effectiveRange ) = TextContainerReftoolbox fn LayoutManagerTextContainerForGlyphWithoutAdditionalLayout( LayoutManagerRef ref, NSUInteger index, CFRange *effectiveRange, BOOL flag ) = TextContainerReftoolbox fn LayoutManagerUsedRectForTextContainer( LayoutManagerRef ref, TextContainerRef tc ) = CGRect// Global layout manager optionstoolbox fn LayoutManagerAllowsNonContiguousLayout( LayoutManagerRef ref ) = BOOLtoolbox LayoutManagerSetAllowsNonContiguousLayout( LayoutManagerRef ref, BOOL flag )toolbox fn LayoutManagerHasNonContiguousLayout( LayoutManagerRef ref ) = BOOLtoolbox fn LayoutManagerHyphenationFactor(LayoutManagerRef ref ) = float       // deprecated: 10.15 use: LayoutManagerUsesDefaultHyphenationtoolbox LayoutManagerSetHyphenationFactor(LayoutManagerRef ref, float factor ) // deprecated: 10.15 use: LayoutManagerSetUsesDefaultHyphenationtoolbox fn LayoutManagerShowsInvisibleCharacters( LayoutManagerRef ref ) = BOOLtoolbox LayoutManagerSetShowsInvisibleCharacters( LayoutManagerRef ref, BOOL flag )toolbox fn LayoutManagerShowsControlCharacters( LayoutManagerRef ref ) = BOOLtoolbox LayoutManagerSetShowsControlCharacters( LayoutManagerRef ref, BOOL flag )toolbox fn LayoutManagerUsesFontLeading( LayoutManagerRef ref ) = BOOLtoolbox LayoutManagerSetUsesFontLeading( LayoutManagerRef ref, BOOL flag )toolbox fn LayoutManagerBackgroundLayoutEnabled( LayoutManagerRef ref ) = BOOLtoolbox LayoutManagerSetBackgroundLayoutEnabled( LayoutManagerRef ref, BOOL flag )#if _MACOSMAXALLOWED >= 101500toolbox fn LayoutManagerUsesDefaultHyphenation( LayoutManagerRef ref ) = BOOL     // macOS 10.15+toolbox LayoutManagerSetUsesDefaultHyphenation( LayoutManagerRef ref, BOOL flag ) // macOS 10.15+#endif// 101500// Invalidate glyphs and layouttoolbox LayoutManagerInvalidateDisplayForCharacterRange( LayoutManagerRef ref, CFRange range )toolbox LayoutManagerInvalidateDisplayForGlyphRange( LayoutManagerRef ref, CFRange range )toolbox LayoutManagerInvalidateGlyphsForCharacterRange( LayoutManagerRef ref, CFRange range, NSInteger delta, CFRange *actualCharacterRange )toolbox LayoutManagerInvalidateLayoutForCharacterRange( LayoutManagerRef ref, CFRange range, CFRange *actualCharacterRange )toolbox LayoutManagerProcessEditingForTextStorage( LayoutManagerRef ref, TextStorageRef textStorage, NSTextStorageEditActions edited, CFRange range, NSInteger delta, CFRange invalidatedRange )// Glyph generation and layouttoolbox LayoutManagerEnsureGlyphsForCharacterRange( LayoutManagerRef ref, CFRange range )toolbox LayoutManagerEnsureGlyphsForGlyphRange( LayoutManagerRef ref, CFRange range )toolbox LayoutManagerEnsureLayoutForBoundingRect( LayoutManagerRef ref, CGRect r, TextContainerRef tc )toolbox LayoutManagerEnsureLayoutForCharacterRange( LayoutManagerRef ref, CFRange range )toolbox LayoutManagerEnsureLayoutForGlyphRange( LayoutManagerRef ref, CFRange range )toolbox LayoutManagerEnsureLayoutForTextContainer( LayoutManagerRef ref, TextContainerRef tc )toolbox fn LayoutManagerGlyphGenerator( LayoutManagerRef ref ) = GlyphGeneratorRef// Accessing glyphs//toolbox fn LayoutManagerGetGlyphs( LayoutManagerRef ref, CFRange range, CGGlyph *glyphBuffer, NSGlyphProperty *props, NSUInteger *charIndexBuffer, unsigned char *bidiLevelsBuffer ) = NSUIntegertoolbox fn LayoutManagerGetGlyphs( LayoutManagerRef ref, CFRange range, CGGlyph *glyphBuffer, NSGlyphProperty *props, NSUInteger *charIndexBuffer, ptr bidiLevelsBuffer ) = NSUIntegertoolbox fn LayoutManagerCGGlyphAtIndex( LayoutManagerRef ref, NSUInteger glyphIndex ) = CGGlyphtoolbox fn LayoutManagerCGGlyphAtIndexIsValidIndex( LayoutManagerRef ref, NSUInteger glyphIndex, BOOL *isValidIndex ) = CGGlyphtoolbox LayoutManagerSetCGGlyphs( LayoutManagerRef ref, CGGlyph *glyphs, NSGlyphProperty *props, NSUInteger *charIndexes, FontRef font, CFRange glyphRange )toolbox fn LayoutManagerCharacterIndexForGlyphAtIndex( LayoutManagerRef ref, NSUInteger glyphIndex ) = NSUIntegertoolbox fn LayoutManagerGlyphIndexForCharacterAtIndex( LayoutManagerRef ref, NSUInteger charIndex ) = NSUIntegertoolbox fn LayoutManagerIsValidGlyphIndex( LayoutManagerRef ref, NSUInteger glyphIndex ) = BOOLtoolbox fn LayoutManagerNumberOfGlyphs( LayoutManagerRef ref ) = NSUIntegertoolbox fn LayoutManagerPropertyForGlyphAtIndex( LayoutManagerRef ref, NSUInteger glyphIndex ) = NSGlyphProperty// Set layout infotoolbox LayoutManagerSetAttachmentSize( LayoutManagerRef ref, CGSize size, CFRange glyphRange )toolbox LayoutManagerSetDrawsOutsideLineFragment( LayoutManagerRef ref, BOOL flag, NSUInteger glyphIndex )toolbox LayoutManagerSetExtraLineFragmentRect( LayoutManagerRef ref, CGRect r, CGRect usedRect, TextContainerRef textContainer )toolbox LayoutManagerSetLineFragmentRect( LayoutManagerRef ref, CGRect r, CFRange glyphRange, CGRect usedRect )toolbox LayoutManagerSetLocation( LayoutManagerRef ref, CGPoint pt, CFRange startOfGlyphRange )toolbox LayoutManagerSetNotShownAttribute( LayoutManagerRef ref, BOOL flag, NSUInteger glyphIndex )// Get layout infotoolbox fn LayoutManagerAttachmentSizeForGlyphAtIndex( LayoutManagerRef ref, NSUInteger index ) = CGSizetoolbox fn LayoutManagerDrawsOutsideLineFragmentForGlyphAtIndex( LayoutManagerRef ref, NSUInteger index ) = BOOLtoolbox fn LayoutManagerExtraLineFragmentRect( LayoutManagerRef ref ) = CGRecttoolbox fn LayoutManagerExtraLineFragmentTextContainer( LayoutManagerRef ref ) = TextContainerReftoolbox fn LayoutManagerExtraLineFragmentUsedRect( LayoutManagerRef ref ) = CGRecttoolbox fn LayoutManagerFirstUnlaidCharacterIndex( LayoutManagerRef ref ) = NSUIntegertoolbox fn LayoutManagerFirstUnlaidGlyphIndex( LayoutManagerRef ref ) = NSUIntegertoolbox LayoutManagerGetFirstUnlaidCharacterIndex( LayoutManagerRef ref, NSUInteger *charIndex, NSUInteger *glyphIndex )toolbox fn LayoutManagerLineFragmentRectForGlyphAtIndex( LayoutManagerRef ref, NSUInteger index, CFRange *effectiveRange ) = CGRecttoolbox fn LayoutManagerLineFragmentRectForGlyphAtIndexWithoutAdditionalLayout( LayoutManagerRef ref, NSUInteger index, CFRange *effectiveRange, BOOL flag ) = CGRecttoolbox fn LayoutManagerExtraLineFragmentUsedRectForGlyphAtIndex( LayoutManagerRef ref, NSUInteger index, CFRange *effectiveRange ) = CGRecttoolbox fn LayoutManagerExtraLineFragmentUsedRectForGlyphAtIndexWithoutAdditionalLayout( LayoutManagerRef ref, NSUInteger index, CFRange *effectiveRange, BOOL flag ) = CGRecttoolbox fn LayoutManagerLocationForGlyphAtIndex( LayoutManagerRef ref, NSUInteger index ) = CGPointtoolbox fn LayoutManagerNotShownAttributeForGlyphAtIndex( LayoutManagerRef ref, NSUInteger index ) = BOOLtoolbox fn LayoutManagerTruncatedGlyphRangeInLineFragmentForGlyphAtIndex( LayoutManagerRef ref, NSUInteger index ) = CFRange// Advanced layout queriestoolbox fn LayoutManagerBoundingRectForGlyphRange( LayoutManagerRef ref, CFRange glyphRange, TextContainerRef tc ) = CGRecttoolbox fn LayoutManagerCharacterIndexForPoint( LayoutManagerRef ref, CGPoint pt, TextContainerRef tc, CGFloat *partialFraction ) = NSUIntegertoolbox fn LayoutManagerCharacterRangeForGlyphRange( LayoutManagerRef ref, CFRange glyphRange, CFRange *actualGlyphRange ) = CFRange/*  LayoutManagerEnumerateEnclosingRectsForGlyphRange  handler:    void local fn MyHandler( ref as LayoutManagerRef, rect as CGRect, stp as ^BOOL, userData as ptr )      // ...    end fn*/toolbox LayoutManagerEnumerateEnclosingRectsForGlyphRange( LayoutManagerRef ref, CFRange glyphRange, CFRange selectedGlyphRange, TextContainerRef textContainer, ptr handler, ptr userData )/*  LayoutManagerEnumerateLineFragmentsForGlyphRange  handler:    void local fn MyHandler( ref as LayoutManagerRef, rect as CGRect, usedRect as CGRect, textContainer as TextContainerRef, glyphRange as CFRange, stp as ^BOOL, userData as ptr )      // ...    end fn*/toolbox LayoutManagerEnumerateLineFragmentsForGlyphRange( LayoutManagerRef ref, CFRange glyphRange, ptr handler, ptr userData )toolbox fn LayoutManagerFractionOfDistanceThroughGlyphForPoint( LayoutManagerRef ref, CGPoint pt, TextContainerRef textContainer ) = CGFloattoolbox fn LayoutManagerGetLineFragmentInsertionPointsForCharacterAtIndex( LayoutManagerRef ref, NSUInteger charIndex, BOOL alternatePositions, BOOL inDisplayOrder, CGFloat *positions, NSUInteger *charIndexes ) = NSUIntegertoolbox fn LayoutManagerGlyphIndexForPoint( LayoutManagerRef ref, CGPoint pt, TextContainerRef textContainer ) = NSUIntegertoolbox fn LayoutManagerGlyphIndexForPointFractionOfDistanceThroughGlyph( LayoutManagerRef ref, CGPoint pt, TextContainerRef textContainer, CGFloat *partialFraction ) = NSUIntegertoolbox fn LayoutManagerGlyphRangeForBoundingRect( LayoutManagerRef ref, CGRect bounds, TextContainerRef tc ) = CFRangetoolbox fn LayoutManagerGlyphRangeForBoundingRectWithoutAdditionalLayout( LayoutManagerRef ref, CGRect bounds, TextContainerRef tc ) = CFRangetoolbox fn LayoutManagerGlyphRangeForTextContainer( LayoutManagerRef ref, TextContainerRef tc ) = CFRangetoolbox fn LayoutManagerGlyphRangeForCharacterRange( LayoutManagerRef ref, CFRange charRange, CFRange *actualCharacterRange ) = CFRangetoolbox fn LayoutManagerRangeOfNominallySpacedGlyphsContainingIndex( LayoutManagerRef ref, NSUInteger glyphIndex ) = CFRange// Drawingtoolbox LayoutManagerDrawBackgroundForGlyphRange( LayoutManagerRef ref, CFRange glyphsToShow, CGPoint origin )toolbox LayoutManagerDrawGlyphsForGlyphRange( LayoutManagerRef ref, CFRange glyphsToShow, CGPoint origin )toolbox LayoutManagerDrawStrikethroughForGlyphRange( LayoutManagerRef ref, CFRange glyphRange, NSInteger strikethroughType, CGFloat baselineOffset, CGRect lineRect, CFRange lineGlyphRange, CGPoint origin )toolbox LayoutManagerDrawUnderlineForGlyphRange( LayoutManagerRef ref, CFRange glyphRange, NSInteger underlineType, CGFloat baselineOffset, CGRect lineRect, CFRange lineGlyphRange, CGPoint origin )toolbox LayoutManagerFillBackgroundRectArray( LayoutManagerRef ref, CGRect *rectArray, NSUInteger rectCount, CFRange charRange, ColorRef color )#if _MACOSMAXALLOWED >= 101500toolbox LayoutManagerShowCGGlyphs( LayoutManagerRef ref, CGGlyph *glyphs, CGPoint *positions, NSUInteger glyphCount, FontRef font, CGAffineTransform textMatrix, CFDictionaryRef attributes, CGContextRef context )// macOS 10.15+#endif// 101500toolbox LayoutManagerStrikethroughGlyphRange( LayoutManagerRef ref, CFRange glyphRange, NSInteger strikethroughType, CGRect lineRect, CFRange lineGlyphRange, CGPoint containerOrigin )toolbox LayoutManagerUnderlineGlyphRange( LayoutManagerRef ref, CFRange glyphRange, NSInteger underlineType, CGRect lineRect, CFRange lineGlyphRange, CGPoint containerOrigin )// Text blockstoolbox LayoutManagerSetLayoutRectForTextBlock( LayoutManagerRef ref, CGRect rect, TextBlockRef textBlock, CFRange glyphRange )toolbox fn LayoutManagerLayoutRectForTextBlock( LayoutManagerRef ref, TextBlockRef textBlock, CFRange glyphRange ) = CGRecttoolbox LayoutManagerSetBoundsRectForTextBlock( LayoutManagerRef ref, CGRect rect, TextBlockRef textBlock, CFRange glyphRange )toolbox fn LayoutManagerBoundsRectForTextBlock( LayoutManagerRef ref, TextBlockRef textBlock, CFRange glyphRange ) = CGRecttoolbox fn LayoutManagerLayoutRectForTextBlockAtIndex( LayoutManagerRef ref, TextBlockRef textBlock, NSUInteger glyphIndex, CFRange *effectiveGlyphRange ) = CGRecttoolbox fn LayoutManagerBoundsRectForTextBlockAtIndex( LayoutManagerRef ref, TextBlockRef textBlock, NSUInteger glyphIndex, CFRange *effectiveGlyphRange ) = CGRect// Attachmentstoolbox fn LayoutManagerDefaultAttachmentScaling( LayoutManagerRef ref ) = NSImageScalingtoolbox LayoutManagerSetDefaultAttachmentScaling( LayoutManagerRef ref, NSImageScaling scaling )toolbox LayoutManagerShowAttachmentCellInRect( LayoutManagerRef ref, CellRef cell, CGRect rect, NSUInteger characterIndex )// Rulerstoolbox fn LayoutManagerRulerAccessoryViewForTextView( LayoutManagerRef ref, NSInteger txtViewTag, ParagraphStyleRef paraStyle, RulerViewRef ruler, BOOL enabled ) = ViewReftoolbox fn LayoutManagerRulerMarkersForTextView( LayoutManagerRef ref, NSInteger txtViewTag, ParagraphStyleRef paraStyle, RulerViewRef ruler ) = CFArrayRef// Responder chaintoolbox fn LayoutManagerOwnsFirstResponderInWindow( LayoutManagerRef ref, NSInteger wndTag ) = BOOLtoolbox fn LayoutManagerFirstTextView( LayoutManagerRef ref ) = NSIntegertoolbox fn LayoutManagerTextViewForBeginningOfSelection( LayoutManagerRef ref ) = NSInteger// Typesettertoolbox fn LayoutManagerTypesetter( LayoutManagerRef ref ) = TypesetterReftoolbox LayoutManagerSetTypesetter( LayoutManagerRef ref, TypesetterRef typesetter )toolbox fn LayoutManagerTypesetterBehavior( LayoutManagerRef ref ) = NSTypesetterBehaviortoolbox LayoutManagerSetTypesetterBehavior( LayoutManagerRef ref, NSTypesetterBehavior behavior )toolbox fn LayoutManagerDefaultLineHeightForFont( LayoutManagerRef ref, FontRef font ) = CGFloattoolbox fn LayoutManagerDefaultBaselineOffsetForFont( LayoutManagerRef ref, FontRef font ) = CGFloat// Temporary attribute supporttoolbox LayoutManagerAddTemporaryAttributes( LayoutManagerRef ref, CFDictionaryRef attrs, CFRange charRange )toolbox LayoutManagerAddTemporaryAttribute( LayoutManagerRef ref, CFStringRef name, ObjectRef value, CFRange charRange )toolbox LayoutManagerSetTemporaryAttributes( LayoutManagerRef ref, CFDictionaryRef attrs, CFRange charRange )toolbox LayoutManagerRemoveTemporaryAttribute( LayoutManagerRef ref, CFStringRef name, CFRange charRange )toolbox fn LayoutManagerTemporaryAttribute( LayoutManagerRef ref, CFStringRef name, NSUInteger charIndex, CFRange *effectiveRange ) = ObjectReftoolbox fn LayoutManagerTemporaryAttributeInRange( LayoutManagerRef ref, CFStringRef name, NSUInteger charIndex, CFRange *longestEffectiveRange, CFRange range ) = ObjectReftoolbox fn LayoutManagerTemporaryAttributes( LayoutManagerRef ref, NSUInteger charIndex, CFRange *effectiveRange ) = CFDictionaryReftoolbox fn LayoutManagerTemporaryAttributesInRange( LayoutManagerRef ref, NSUInteger charIndex, CFRange *longestEffectiveRange, CFRange range ) = CFDictionaryRef