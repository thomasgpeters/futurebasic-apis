/*  ProcessInfo.incl  Bernie Wylde 20180430  Framework: Foundation  Inherits from: Object  NSProcessInfo - https://developer.apple.com/documentation/foundation/nsprocessinfo?language=objc*/// system version#if ndef _DEFINEDINCOCOAbegin record NSOperatingSystemVersionNSInteger majorVersionNSInteger minorVersionNSInteger patchVersionend record#endif// thermal state#if ndef _DEFINEDINCOCOA#define NSProcessInfoThermalState as NSInteger#endifsystem NSProcessInfoThermalState NSProcessInfoThermalStateNominalsystem NSProcessInfoThermalState NSProcessInfoThermalStateFairsystem NSProcessInfoThermalState NSProcessInfoThermalStateSerioussystem NSProcessInfoThermalState NSProcessInfoThermalStateCritical// activity options#if ndef _DEFINEDINCOCOA#define NSActivityOptions as NSUInteger#endifsystem NSActivityOptions NSActivityIdleDisplaySleepDisabledsystem NSActivityOptions NSActivityIdleSystemSleepDisabledsystem NSActivityOptions NSActivitySuddenTerminationDisabledsystem NSActivityOptions NSActivityAutomaticTerminationDisabledsystem NSActivityOptions NSActivityAnimationTrackingEnabled       // macOS 13.0+system NSActivityOptions NSActivityTrackingEnabled                // macOS 13.0+system NSActivityOptions NSActivityUserInitiatedsystem NSActivityOptions NSActivityUserInitiatedAllowingIdleSystemSleepsystem NSActivityOptions NSActivityBackgroundsystem NSActivityOptions NSActivityLatencyCriticalsystem NSActivityOptions NSActivityUserInteractive                // macOS 13.0+// notificationssystem CFStringRef NSProcessInfoThermalStateDidChangeNotificationsystem CFStringRef NSProcessInfoPowerStateDidChangeNotification   // macOS 12.0+// Classtoolbox fn ProcessInfoClass = ClassRef// Get process info agenttoolbox fn ProcessInfoInit = ProcessInfoRef// autoreleased// Accessing process infotoolbox fn ProcessInfoArguments = CFArrayReftoolbox fn ProcessInfoEnvironment = CFDictionaryReftoolbox fn ProcessInfoGloballyUniqueString = CFStringReftoolbox fn ProcessInfoProcessIdentifier = longtoolbox fn ProcessInfoProcessName = CFStringRef// User infotoolbox fn ProcessInfoUserName = CFStringReftoolbox fn ProcessInfoFullUserName = CFStringRef// Sudden app terminationtoolbox ProcessInfoDisableSuddenTerminationtoolbox ProcessInfoEnableSuddenTermination// Control auto terminationtoolbox ProcessInfoDisableAutomaticTermination( CFStringRef reason )toolbox ProcessInfoEnableAutomaticTermination( CFStringRef reason )toolbox fn ProcessInfoAutomaticTerminationSupportEnabled = BOOL// Host infotoolbox fn ProcessInfoHostName = CFStringReftoolbox fn ProcessInfoOperatingSystemVersionString = CFStringReftoolbox fn ProcessInfoOperatingSystemVersion = NSOperatingSystemVersion                         toolbox fn ProcessInfoIsOperatingSystemAtLeastVersion( NSOperatingSystemVersion version) = BOOL// Computer infotoolbox fn ProcessInfoProcessorCount = NSUIntegertoolbox fn ProcessInfoActiveProcessorCount = NSUIntegertoolbox fn ProcessInfoPhysicalMemory = UInt64toolbox fn ProcessInfoSystemUptime = CFTimeInterval// Activitiestoolbox fn ProcessInfoBeginActivity( NSActivityOptions options, CFStringRef reason ) = ptrtoolbox ProcessInfoEndActivity( ptr obj )/*  ProcessInfoPerformActivity  callback example:    void local fn PerformActivityCallback( userData as ptr )      // ...    end fn*/toolbox ProcessInfoPerformActivity( NSActivityOptions options, CFStringRef reason, ptr callback, ptr userData )// Thermal statetoolbox fn ProcessInfoThermalState = NSProcessInfoThermalState// Power state#if _MACOSMAXALLOWED >= 120000toolbox fn ProcessInfoIsLowPowerModeEnabled = BOOL// macOS 12.0+#endif// 120000// Platform#if _MACOSMAXALLOWED >= 101500toolbox fn ProcessInfoIsMacCatalystApp = BOOL// macOS 10.15+#endif// 101500#if _MACOSMAXALLOWED >= 110000toolbox fn ProcessInfoIsiOSAppOnMac = BOOL// macOS 11.0+#endif// 110000