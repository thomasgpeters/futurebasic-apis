/*  String.incl  Bernie Wylde 20140424  Framework: Foundation  Inherits from: Object  NSString - https://developer.apple.com/documentation/foundation/nsstring?language=objc*/// encodings#if ndef _DEFINEDINCOCOA#define NSStringEncoding as NSUInteger#endifsystem NSStringEncoding NSASCIIStringEncodingsystem NSStringEncoding NSNEXTSTEPStringEncodingsystem NSStringEncoding NSJapaneseEUCStringEncodingsystem NSStringEncoding NSUTF8StringEncodingsystem NSStringEncoding NSISOLatin1StringEncodingsystem NSStringEncoding NSSymbolStringEncodingsystem NSStringEncoding NSNonLossyASCIIStringEncodingsystem NSStringEncoding NSShiftJISStringEncodingsystem NSStringEncoding NSISOLatin2StringEncodingsystem NSStringEncoding NSUnicodeStringEncodingsystem NSStringEncoding NSWindowsCP1251StringEncodingsystem NSStringEncoding NSWindowsCP1252StringEncodingsystem NSStringEncoding NSWindowsCP1253StringEncodingsystem NSStringEncoding NSWindowsCP1254StringEncodingsystem NSStringEncoding NSWindowsCP1250StringEncodingsystem NSStringEncoding NSISO2022JPStringEncodingsystem NSStringEncoding NSMacOSRomanStringEncodingsystem NSStringEncoding NSUTF16StringEncodingsystem NSStringEncoding NSUTF16BigEndianStringEncodingsystem NSStringEncoding NSUTF16LittleEndianStringEncodingsystem NSStringEncoding NSUTF32StringEncodingsystem NSStringEncoding NSUTF32BigEndianStringEncodingsystem NSStringEncoding NSUTF32LittleEndianStringEncoding// encoding conversion options#if ndef _DEFINEDINCOCOA#define NSStringEncodingConversionOptions as NSUInteger#endifsystem NSStringEncodingConversionOptions NSAllowLossyEncodingConversionsystem NSStringEncodingConversionOptions NSExternalRepresentationEncodingConversion// compare options#if ndef _DEFINEDINCOCOA#define NSStringCompareOptions as NSUInteger#endifsystem NSStringCompareOptions NSCaseInsensitiveSearchsystem NSStringCompareOptions NSLiteralSearchsystem NSStringCompareOptions NSBackwardsSearchsystem NSStringCompareOptions NSAnchoredSearchsystem NSStringCompareOptions NSNumericSearchsystem NSStringCompareOptions NSDiacriticInsensitiveSearchsystem NSStringCompareOptions NSWidthInsensitiveSearchsystem NSStringCompareOptions NSForcedOrderingSearchsystem NSStringCompareOptions NSRegularExpressionSearch// transforms#if ndef _DEFINEDINCOCOA#define NSStringTransform as CFStringRef#endifsystem CFStringRef NSStringTransformLatinToKatakanasystem CFStringRef NSStringTransformLatinToHiraganasystem CFStringRef NSStringTransformLatinToHangulsystem CFStringRef NSStringTransformLatinToArabicsystem CFStringRef NSStringTransformLatinToHebrewsystem CFStringRef NSStringTransformLatinToThaisystem CFStringRef NSStringTransformLatinToCyrillicsystem CFStringRef NSStringTransformToLatinsystem CFStringRef NSStringTransformMandarinToLatinsystem CFStringRef NSStringTransformHiraganaToKatakanasystem CFStringRef NSStringTransformFullwidthToHalfwidthsystem CFStringRef NSStringTransformToXMLHexsystem CFStringRef NSStringTransformToUnicodeNamesystem CFStringRef NSStringTransformStripCombiningMarkssystem CFStringRef NSStringTransformStripDiacritics// enumeration options#if ndef _DEFINEDINCOCOA#define NSStringEnumerationOptions as NSUInteger#endifsystem NSStringEnumerationOptions NSStringEnumerationByLinessystem NSStringEnumerationOptions NSStringEnumerationByParagraphssystem NSStringEnumerationOptions NSStringEnumerationByComposedCharacterSequencessystem NSStringEnumerationOptions NSStringEnumerationByWordssystem NSStringEnumerationOptions NSStringEnumerationBySentencessystem NSStringEnumerationOptions NSStringEnumerationByCaretPositions   // macOS 11.0+system NSStringEnumerationOptions NSStringEnumerationByDeletionClusters // macOS 11.0+system NSStringEnumerationOptions NSStringEnumerationReversesystem NSStringEnumerationOptions NSStringEnumerationSubstringNotRequiredsystem NSStringEnumerationOptions NSStringEnumerationLocalized// exception namessystem CFStringRef NSCharacterConversionExceptionsystem CFStringRef NSParseErrorException// Classtoolbox fn StringClass = ClassRef// Inittoolbox fn StringWithBytes( ptr bytes, NSUInteger length, NSStringEncoding encoding ) = CFStringReftoolbox fn StringWithCharacters( unichar *characters, NSUInteger length ) = CFStringReftoolbox fn StringWithData( CFDataRef dta, NSStringEncoding encoding ) = CFStringReftoolbox fn StringWithFormat( CFStringRef format, ... ) = CFStringReftoolbox fn StringWithString( CFStringRef string ) = CFStringReftoolbox fn StringWithCString( ptr cString, NSStringEncoding encoding ) = CFStringReftoolbox fn StringWithUTF8String( ptr cString ) = CFStringRef// Init from URLtoolbox fn StringWithContentsOfURL( CFURLRef url, NSStringEncoding enc, ErrorRef *err ) = CFStringReftoolbox fn StringWithContentsOfURLUsedEncoding( CFURLRef url, NSStringEncoding *enc, ErrorRef *err ) = CFStringRef// Lengthtoolbox fn StringLength( CFStringRef string ) = NSUIntegertoolbox fn StringLengthOfBytes( CFStringRef string, NSStringEncoding enc ) = NSUIntegertoolbox fn StringMaximumLengthOfBytes( CFStringRef string, NSStringEncoding enc ) = NSUInteger// Characters and bytestoolbox fn StringCharacterAtIndex( CFStringRef string, NSUInteger index ) = unichartoolbox StringGetCharacters( CFStringRef string, unichar *buffer, CFRange range )toolbox fn StringGetBytes( CFStringRef string, ptr bytes, NSUInteger maxLength, NSUInteger *usedLength, NSStringEncoding enc, NSStringEncodingConversionOptions options, CFRange range, CFRange *remainingRange ) = BOOL// Getting c stringstoolbox fn StringCStringUsingEncoding( CFStringRef string, NSStringEncoding enc ) = ptrtoolbox fn StringGetCString( CFStringRef string, ptr buffer, NSUInteger maxLength, NSStringEncoding enc ) = BOOLtoolbox fn StringUTF8String( CFStringRef string ) = ptr// Identify and comparetoolbox fn StringCaseInsensitiveCompare( CFStringRef string, CFStringRef otherString ) = NSComparisonResulttoolbox fn StringLocalizedCaseInsensitiveCompare( CFStringRef string, CFStringRef otherString ) = NSComparisonResulttoolbox fn StringCompare( CFStringRef string, CFStringRef otherString ) = NSComparisonResulttoolbox fn StringLocalizedCompare( CFStringRef string, CFStringRef otherString ) = NSComparisonResulttoolbox fn StringCompareWithOptions( CFStringRef string, CFStringRef otherString, NSStringCompareOptions options ) = NSComparisonResulttoolbox fn StringCompareWithOptionsInRange( CFStringRef string, CFStringRef otherString, NSStringCompareOptions options, CFRange range ) = NSComparisonResulttoolbox fn StringCompareWithOptionsInRangeWithLocale( CFStringRef string, CFStringRef otherString, NSStringCompareOptions options, CFRange range, CFLocaleRef locale ) = NSComparisonResulttoolbox fn StringLocalizedStandardCompare( CFStringRef string, CFStringRef otherString ) = NSComparisonResulttoolbox fn StringHasPrefix( CFStringRef string, CFStringRef prefix ) = BOOLtoolbox fn StringHasSuffix( CFStringRef string, CFStringRef suffix ) = BOOLtoolbox fn StringIsEqual( CFStringRef string, CFStringRef otherString ) = BOOLtoolbox fn StringHash( CFStringRef string ) = NSUInteger// Combinetoolbox fn StringByAppendingFormat( CFStringRef string, CFStringRef format, ... ) = CFStringReftoolbox fn StringByAppendingString( CFStringRef string1, CFStringRef string2 ) = CFStringReftoolbox fn StringByPaddingToLength( CFStringRef string, NSUInteger newLength, CFStringRef padString, NSUInteger padIndex ) = CFStringRef// Casetoolbox fn StringLowercaseString( CFStringRef string ) = CFStringReftoolbox fn StringLocalizedLowercaseString( CFStringRef string ) = CFStringReftoolbox fn StringLowercaseStringWithLocale( CFStringRef string, CFLocaleRef locale ) = CFStringReftoolbox fn StringUppercaseString( CFStringRef string ) = CFStringReftoolbox fn StringLocalizedUppercaseString( CFStringRef string ) = CFStringReftoolbox fn StringUppercaseStringWithLocale( CFStringRef string, CFLocaleRef locale ) = CFStringReftoolbox fn StringCapitalizedString( CFStringRef string ) = CFStringReftoolbox fn StringLocalizedCapitalizedString( CFStringRef string ) = CFStringReftoolbox fn StringCapitalizedStringWithLocale( CFStringRef string, CFLocaleRef locale ) = CFStringRef// Dividetoolbox fn StringComponentsSeparatedByString( CFStringRef string, CFStringRef separator ) = CFArrayReftoolbox fn StringComponentsSeparatedByCharactersInSet( CFStringRef string, CFCharacterSetRef set ) = CFArrayReftoolbox fn StringByTrimmingCharactersInSet( CFStringRef string, CFCharacterSetRef set ) = CFStringReftoolbox fn StringSubstringFromIndex( CFStringRef string, CFIndex index ) = CFStringReftoolbox fn StringSubstringWithRange( CFStringRef string, CFRange range ) = CFStringReftoolbox fn StringSubstringToIndex( CFStringRef string, CFIndex index ) = CFStringRef// Normalizetoolbox fn StringDecomposedStringWithCanonicalMapping( CFStringRef string ) = CFStringReftoolbox fn StringDecomposedStringWithCompatibilityMapping( CFStringRef string ) = CFStringReftoolbox fn StringPrecomposedStringWithCanonicalMapping( CFStringRef string ) = CFStringReftoolbox fn StringPrecomposedStringWithCompatibilityMapping( CFStringRef string ) = CFStringRef// Foldtoolbox fn StringByFolding( CFStringRef string, NSStringCompareOptions options, CFLocaleRef locale ) = CFStringRef// Transformtoolbox fn StringByApplyingTransform( CFStringRef string, CFStringRef transform, BOOL reverse ) = CFStringRef// Findtoolbox fn StringContainsString( CFStringRef string1, CFStringRef string2 ) = BOOLtoolbox fn StringLocalizedCaseInsensitiveContainsString( CFStringRef string1, CFStringRef string2 ) = BOOLtoolbox fn StringLocalizedStandardContainsString( CFStringRef string1, CFStringRef string2 ) = BOOLtoolbox fn StringRangeOfCharacterFromSet( CFStringRef string, CFCharacterSetRef set ) = CFRangetoolbox fn StringRangeOfCharacterFromSetWithOptions( CFStringRef string, CFCharacterSetRef set, NSStringCompareOptions options ) = CFRangetoolbox fn StringRangeOfCharacterFromSetWithOptionsInRange( CFStringRef string, CFCharacterSetRef set, NSStringCompareOptions options, CFRange range ) = CFRangetoolbox fn StringRangeOfString( CFStringRef string, CFStringRef searchString ) = CFRangetoolbox fn StringRangeOfStringWithOptions( CFStringRef string, CFStringRef searchString, NSStringCompareOptions options ) = CFRangetoolbox fn StringRangeOfStringWithOptionsInRange( CFStringRef string, CFStringRef searchString, NSStringCompareOptions options, CFRange range ) = CFRangetoolbox fn StringRangeOfStringWithOptionsInRangeAndLocale( CFStringRef string, CFStringRef searchString, NSStringCompareOptions options, CFRange range, CFLocaleRef locale ) = CFRangetoolbox fn StringLocalizedStandardRangeOfString( CFStringRef string1, CFStringRef string2 ) = CFRange/*  StringEnumerateLines  callback:    void local fn MyEnumerateLinesCallback( string as CFStringRef, theLine as CFStringRef, stp as ^BOOL, userData as ptr )       //*stp = YES// stop enumeration    end fn*/toolbox StringEnumerateLines( CFStringRef string, ptr callback, ptr userData )/*  StringEnumerateSubstringsInRange  callback:    void local fn MyEnumerateSubstringsCallback( string as CFStringRef, substring as CFStringRef, substringRange as CFRange, enclosingRange as CFRange, stp as ^BOOL, userData as ptr )       //*stp = YES// stop enumeration    end fn*/toolbox StringEnumerateSubstringsInRange( CFStringRef string, CFRange range, NSUInteger options, ptr callback, ptr userData )// Replace substringstoolbox fn StringByReplacingOccurrencesOfString( CFStringRef string, CFStringRef target, CFStringRef replacement ) = CFStringReftoolbox fn StringByReplacingOccurrencesOfStringWithOptions( CFStringRef string, CFStringRef target, CFStringRef replacement, NSStringCompareOptions options, CFRange range ) = CFStringReftoolbox fn StringByReplacingCharactersInRange( CFStringRef string, CFRange range, CFStringRef replacement ) = CFStringRef// Shared prefixtoolbox fn StringCommonPrefixWithString( CFStringRef string1, CFStringRef string2, NSStringCompareOptions options ) = CFStringRef// Linguistic analysis/*  StringEnumerateLinguisticTags  callback:    void local fn MyLinguisticTaggerCallback( string as CFStringRef, tag as CFStringRef, tokenRange as CFRange, sentenceRange as CFRange, stp as ^BOOL, userData as ptr )       //*stp = YES// stop enumeration    end fn*/toolbox StringEnumerateLinguisticTags( CFStringRef string, CFRange range, CFStringRef scheme, NSLinguisticTaggerOptions options, OrthographyRef orthRef, ptr callback, ptr userData )// deprecated: 11.0 use: NaturalLanguagetoolbox fn StringLinguisticTagsInRange( CFStringRef string, CFRange range, CFStringRef scheme, NSLinguisticTaggerOptions options, OrthographyRef orthRef, CFArrayRef *tokenRanges ) = CFArrayRef// deprecated: 11.0  use: NaturalLanguage// Line and paragraph rangestoolbox StringGetLineStartEnd( CFStringRef string, NSUInteger *startPtr, NSUInteger *lineEndPtr, NSUInteger *contentsEndPtr, CFRange range )toolbox fn StringLineRange( CFStringRef string, CFRange range ) = CFRangetoolbox StringGetParagraphStartEnd( CFStringRef string, NSUInteger *startPtr, NSUInteger *parEndPtr, NSUInteger *contentsEndPtr, CFRange range )toolbox fn StringParagraphRange( CFStringRef string, CFRange range ) = CFRange// Composed char sequencestoolbox fn StringRangeOfComposedCharacterSequenceAtIndex( CFStringRef string, NSUInteger index ) = CFRangetoolbox fn StringRangeOfComposedCharacterSequencesForRange( CFStringRef string, CFRange range ) = CFRange// Write to URLtoolbox fn StringWriteToURL( CFStringRef string, CFURLRef url, BOOL atomically, NSStringEncoding enc, ErrorRef *err ) = BOOL// Property listtoolbox fn StringPropertyList( CFStringRef string ) = CFTypeReftoolbox fn StringPropertyListFromStringsFileFormat( CFStringRef string ) = CFDictionaryRef// Sizing and drawingtoolbox StringDrawAtPoint( CFStringRef string, CGPoint pt, CFDictionaryRef attributes )toolbox StringDrawInRect( CFStringRef string, CGRect rect, CFDictionaryRef attributes )toolbox StringDrawWithRect( CFStringRef string, CGRect rect, NSStringDrawingOptions options, CFDictionaryRef attributes, StringDrawingContextRef context )toolbox fn StringBoundingRectWithSize( CFStringRef string, CGSize size, NSStringDrawingOptions options, CFDictionaryRef attributes, StringDrawingContextRef context ) = CGRecttoolbox fn StringSizeWithAttributes( CFStringRef string, CFDictionaryRef attributes ) = CGSize// Numeric valuestoolbox fn StringDoubleValue( CFStringRef string ) = doubletoolbox fn StringFloatValue( CFStringRef string ) = floattoolbox fn StringIntValue( CFStringRef string ) = SInt32toolbox fn StringIntegerValue( CFStringRef string ) = NSIntegertoolbox fn StringLongLongValue( CFStringRef string ) = SInt64toolbox fn StringBoolValue( CFStringRef string ) = BOOL// Working with encodingstoolbox fn StringAvailableStringEncodings = ptr // zero-terminated list of encodings (NSStringEncoding)toolbox fn StringDefaultCStringEncoding = NSStringEncodingtoolbox fn StringEncodingForData( CFDataRef dta, CFDictionaryRef encodingOptions, CFStringRef *convertedString, BOOL *usedLossyConversion ) = NSStringEncodingtoolbox fn StringLocalizedNameOfStringEncoding( NSStringEncoding encoding ) = CFStringReftoolbox fn StringCanBeConvertedToEncoding( CFStringRef string, NSStringEncoding encoding ) = BOOLtoolbox fn StringData( CFStringRef string, NSStringEncoding encoding ) = CFDataReftoolbox fn StringDataAllowLossyConversion( CFStringRef string, NSStringEncoding encoding, BOOL lossy ) = CFDataReftoolbox fn StringDescription( CFStringRef string ) = CFStringReftoolbox fn StringFastestEncoding( CFStringRef string ) = NSStringEncodingtoolbox fn StringSmallestEncoding( CFStringRef string ) = NSStringEncoding// Pathstoolbox fn StringPathWithComponents( CFArrayRef array ) = CFStringReftoolbox fn StringPathComponents( CFStringRef string ) = CFArrayReftoolbox fn StringCompletePathIntoString( CFStringRef string, CFStringRef outputName, BOOL caseSensitive, CFArrayRef *outputArray, CFArrayRef filterTypes ) = NSUIntegertoolbox fn StringFileStystemRepresentation( CFStringRef string ) = ptr // returns C stringtoolbox fn StringIsAbsolutePath( CFStringRef string ) = BOOLtoolbox fn StringLastPathComponent( CFStringRef string ) = CFStringReftoolbox fn StringPathExtension( CFStringRef string ) = CFStringReftoolbox fn StringByAbbreviatingWithTildeInPath( CFStringRef string ) = CFStringReftoolbox fn StringByAppendingPathComponent( CFStringRef string, CFStringRef component ) = CFStringReftoolbox fn StringByAppendingPathExtension( CFStringRef string, CFStringRef extension ) = CFStringReftoolbox fn StringByDeletingLastPathComponent( CFStringRef string ) = CFStringReftoolbox fn StringByDeletingPathExtension( CFStringRef string ) = CFStringReftoolbox fn StringByExpandingTildeInPath( CFStringRef string ) = CFStringReftoolbox fn StringByResolvingSymlinksInPath( CFStringRef string ) = CFStringReftoolbox fn StringByStandardizingPath( CFStringRef string ) = CFStringReftoolbox fn StringStringsByAppendingPaths( CFStringRef string, CFArrayRef paths ) = CFArrayRef// Working with URL stringstoolbox fn StringByAddingPercentEncodingWithAllowedCharacters( CFStringRef string, CFCharacterSetRef allowedCharacters ) = CFStringReftoolbox fn StringByRemovingPercentEncoding( CFStringRef string ) = CFStringRef// -- these two functions are declared in UniformTypeIdentifiers/UTAdditions.incl//toolbox fn StringByAppendingPathComponentConformingToType( CFStringRef string, CFStringRef partialName, UTTypeRef contentType ) = CFStringRef//toolbox fn StringByAppendingPathExtensionForType( CFStringRef string, UTTypeRef contentType ) = CFStringRef// Instance methodstoolbox fn StringWithValidatedFormat( CFStringRef format, CFStringRef specifiers, ErrorRef *err, ... ) = CFStringReftoolbox fn StringWithValidatedFormatArguments( CFStringRef format, CFStringRef specifiers, va_list args, ErrorRef *err ) = CFStringReftoolbox fn StringWithValidatedFormatLocaleArguments( CFStringRef format, CFStringRef specifiers, CFLocaleRef locale, va_list args, ErrorRef *err ) = CFStringReftoolbox fn StringWithValidatedFormatLocale( CFStringRef format, CFStringRef specifiers, CFLocaleRef locale, ErrorRef *err, ... ) = CFStringRef// Type methods#if _MACOSMAXALLOWED >= 101400toolbox fn StringDeferredLocalizedIntentsStringWithFormat( CFStringRef format, ... ) = CFStringRef                                               // macOS 10.14+toolbox fn StringDeferredLocalizedIntentsStringWithFormatFromTable( CFStringRef format, CFStringRef table, ... ) = CFStringRef                   // macOS 10.14+toolbox fn StringDeferredLocalizedIntentsStringWithFormatFromTableArguments( CFStringRef format, CFStringRef table, va_list args ) = CFStringRef // macOS 10.14+#endif// 101400//toolbox fn StringLocalizedWithValidatedFormat( CFStringRef format, CFStringRef specifiers, ErrorRef *err, ... ) = CFStringRef// CF wrapperstoolbox fn StringIsSurrogateHighCharacter( UniChar chr ) = Booleantoolbox fn StringIsSurrogateLowCharacter( UniChar chr ) = Boolean/*  ScriptWhoseTests functions*/toolbox fn StringIsCaseInsensitiveLike( CFStringRef string, CFStringRef object ) = BOOLtoolbox fn StringIsLike( CFStringRef string, CFStringRef object ) = BOOL/*  Pascal string conversion*/local fn StringWithPascalString( s as Str255 ) as CFStringRefend fn = fn StringWithFormat( @"%.*s", s[0], @s[1] )local fn StringPascalString( string as CFStringRef ) as Str255Str255 s : s[0] = 0fn CFStringGetPascalString( string, @s, 256, _kCFStringEncodingMacRoman )end fn = s/*  Convenience*/// CF equivalent of the C string function strtol()toolbox fn StringToLong( CFStringRef string, CFStringRef *chr, long base ) = longtoolbox fn StringConcatenate( CFStringRef string, ... ) = CFStringRef // must be NULL terminated/*  Unicode utilities*//*  StringUnicodeLength  ------------------  Returns the "true character count" of the string, where each grapheme cluster (user-perceived character) is counted as one.  This includes surrogate pairs, emoji sequences, accented letters, and combined character sequences using ZWJ (Zero Width Joiner).  Suitable for modern Unicode handling where visual characters may consist of multiple code points.*/toolbox fn StringUnicodeLength( CFStringRef string ) = NSUInteger/*  StringUnicodeCharacterAtIndex  -----------------------------  Returns the Unicode code point (UTF-32) at the specified grapheme index.  This is identical to FB's 'ucc' function. See FutureBasic Reference for details.  Note: Use grapheme cluster index, not byte or UTF-16 unit index.*/toolbox fn StringUnicodeCharacterAtIndex( CFStringRef string, NSUInteger charIndex ) = UInt32/*  StringUnicodeWithCodePoint  --------------------------  Returns a CFStringRef containing a single Unicode character represented by the specified code point (UTF-32).  This is identical to FB's 'ucs' function. See FutureBasic Reference for details.*/toolbox fn StringUnicodeWithCodePoint( UInt64 codePoint ) = CFStringRef/*  StringUnicodeWithCodePoints  ---------------------------  Builds and returns a CFStringRef from a NULL-terminated list of of Unicode code points (UTF-32).  The sequence can form a single grapheme cluster, such as combined emoji or accented characters.  Useful for assembling displayable Unicode sequences from individual code points.  This is identical to FB's 'ucs' function. See FutureBasic Reference for details.*/toolbox fn StringUnicodeWithCodePoints( UInt64 codePoint, ... ) = CFStringRef // must be NULL terminated/*  StringUnicodeWithCodePointsArray  --------------------------------  Builds and returns a CFStringRef from an array of Unicode code points (as CFNumber objects).  The sequence can form a single grapheme cluster, such as combined emoji or accented characters.  Useful for assembling displayable Unicode sequences from individual code points.*/toolbox fn StringUnicodeWithCodePointsArray( CFArrayRef codePoints ) = CFStringRef/*  StringUnicodeCodePoints  -----------------------  Returns an array of Unicode code points (as CFNumber objects) that make up  the grapheme cluster at the specified index in the string.  This allows analysis or manipulation of complex characters, including emoji with modifiers, flags, and combined sequences.*/toolbox fn StringUnicodeCodePoints( CFStringRef string, NSUInteger graphemeIndex ) = CFArrayRef/*  StringUnicodeIsSingleGraphemeCluster  ------------------------------------  Returns YES if the string contains exactly one grapheme cluster.*/toolbox fn StringUnicodeIsSingleGraphemeCluster( CFStringRef string ) = BOOL/*  StringUnicodeNormalize  ----------------------  Normalizes the string to the specified Unicode normalization form.  Pass form as CFStringRef (e.g., "NFC", "NFD", "NFKC", "NFKD").*/toolbox fn StringUnicodeNormalize( CFStringRef string, CFStringRef form ) = CFStringRef/*  StringUnicodeEnumerateGraphemeClusters  --------------------------------------  Iterates through each grapheme cluster in the string, calling the handler block.  The handler receives the grapheme cluster string and its index.  callback function:    void local fn MyEnumerateCallback( substring as CFStringRef, index as NSUInteger, stp as ^BOOL, userData as ptr )      // ...      // *stp = YES // YES to stop enumeration    end fn*/toolbox StringUnicodeEnumerateGraphemeClusters( CFStringRef string, ptr callback, ptr userData )/*  StringUnicodeGraphemeClusters  ------------------------------------  Splits the string into an array where each element is a grapheme cluster as CFStringRef.*/toolbox fn StringUnicodeGraphemeClusters( CFStringRef string ) = CFArrayRef/*  StringUnicodeContainsEmoji  --------------------------  Returns YES if the string contains at least one emoji character.*/toolbox fn StringUnicodeContainsEmoji( CFStringRef string ) = BOOL/*  StringUnicodeCodePointAtByteOffset  ----------------------------------  Returns the Unicode code point at the specified byte or UTF-16 unit offset in the string.  For low-level access; index is not grapheme-based.*/toolbox fn StringUnicodeCodePointAtByteOffset( CFStringRef string, NSUInteger offset ) = UInt32/*  MutableString  Inherits from String/Object  NSMutableString - https://developer.apple.com/documentation/foundation/nsmutablestring?language=objc*/// Classtoolbox fn MutableStringClass = ClassRef// Createtoolbox fn MutableStringNew = CFMutableStringRef// autoreleasedtoolbox fn MutableStringWithCapacity( NSUInteger capacity ) = CFMutableStringReftoolbox fn MutableStringWithBytes( ptr bytes, NSUInteger length, NSStringEncoding encoding ) = CFMutableStringReftoolbox fn MutableStringWithCharacters( unichar *characters, NSUInteger length ) = CFMutableStringReftoolbox fn MutableStringWithData( CFDataRef dta, NSStringEncoding encoding ) = CFMutableStringReftoolbox fn MutableStringWithFormat( CFStringRef format, ... ) = CFMutableStringReftoolbox fn MutableStringWithString( CFStringRef string ) = CFMutableStringReftoolbox fn MutableStringWithCString( ptr cString, NSStringEncoding encoding ) = CFMutableStringReftoolbox fn MutableStringWithUTF8String( ptr cString ) = CFMutableStringReftoolbox fn MutableStringWithContentsOfURL( CFURLRef url, NSStringEncoding enc, ErrorRef *err ) = CFMutableStringReftoolbox fn MutableStringWithContentsOfURLUsedEncoding( CFURLRef url, NSStringEncoding *enc, ErrorRef *err ) = CFMutableStringRef// Modifytoolbox MutableStringAppendFormat( CFMutableStringRef string, CFStringRef format, ... )toolbox MutableStringAppendString( CFMutableStringRef string, CFStringRef otherString )toolbox MutableStringApplyTransform( CFMutableStringRef string, CFStringRef transform, BOOL reverse, CFRange range, CFRange *resultingRange )toolbox MutableStringDeleteCharacters( CFMutableStringRef string, CFRange range )toolbox MutableStringInsertString( CFMutableStringRef string, CFStringRef otherString, NSUInteger index )toolbox MutableStringReplaceCharacters( CFMutableStringRef string, CFStringRef otherString, CFRange range )toolbox MutableStringReplaceOccurrencesOfString( CFMutableStringRef string, CFStringRef targetString, CFStringRef replacementString, NSStringCompareOptions options, CFRange range )toolbox MutableStringSetString( CFMutableStringRef string, CFStringRef otherString )/*  Convenience*/toolbox MutableStringReplaceAllOccurrencesOfString( CFMutableStringRef string, CFStringRef targetString, CFStringRef replacementString )toolbox MutableStringPad( CFMutableStringRef string, CFStringRef padString, NSInteger length, NSInteger indexIntoPad )toolbox MutableStringTrim( CFMutableStringRef string, CFStringRef trimString )toolbox MutableStringTrimWhitespace( CFMutableStringRef string )toolbox MutableStringCapitalize( CFMutableStringRef string )toolbox MutableStringCapitalizeWithLocale( CFMutableStringRef string, CFLocaleRef locale )toolbox MutableStringLowercase( CFMutableStringRef string )toolbox MutableStringLowercaseWithLocale( CFMutableStringRef string, CFLocaleRef locale )toolbox MutableStringUppercase( CFMutableStringRef string )toolbox MutableStringUppercaseWithLocale( CFMutableStringRef string, CFLocaleRef locale )