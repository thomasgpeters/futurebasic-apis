/*  Data.incl  Bernie Wylde 20180502  Framework: Foundation  Inherits from: Object  NSData - https://developer.apple.com/documentation/foundation/nsdata?language=objc*/// reading options#if ndef _DEFINEDINCOCOA#define NSDataReadingOptions as NSUInteger#endifsystem NSDataReadingOptions NSDataReadingMappedIfSafesystem NSDataReadingOptions NSDataReadingUncachedsystem NSDataReadingOptions NSDataReadingMappedAlwayssystem NSDataReadingOptions NSDataReadingMapped // deprecated: 10.15 use: NSDataReadingMappedIfSafesystem NSDataReadingOptions NSMappedRead        // deprecated: 10.15 use: NSDataReadingMappedsystem NSDataReadingOptions NSUncachedRead      // deprecated: 10.15 use: NSDataReadingUncached// writing options#if ndef _DEFINEDINCOCOA#define NSDataWritingOptions as NSUInteger#endifsystem NSDataWritingOptions NSDataWritingAtomicsystem NSDataWritingOptions NSDataWritingWithoutOverwritingsystem NSDataWritingOptions NSAtomicWrite                                                   // deprecated: 10.15 use: NSDataWritingAtomicsystem NSDataWritingOptions NSDataWritingFileProtectionNone															   // = 0x10000000,	// macOS 11.0+system NSDataWritingOptions NSDataWritingFileProtectionComplete														 // = 0x20000000,	// macOS 11.0+system NSDataWritingOptions NSDataWritingFileProtectionCompleteUnlessOpen									 // = 0x30000000,	// macOS 11.0+system NSDataWritingOptions NSDataWritingFileProtectionCompleteUntilFirstUserAuthentication	 // = 0x40000000,	// macOS 11.0+system NSDataWritingOptions NSDataWritingFileProtectionMask															   // = 0xf0000000,	// macOS 11.0+// Base64 encoding options#if ndef _DEFINEDINCOCOA#define NSDataBase64EncodingOptions as NSUInteger#endifsystem NSDataBase64EncodingOptions NSDataBase64Encoding64CharacterLineLengthsystem NSDataBase64EncodingOptions NSDataBase64Encoding76CharacterLineLengthsystem NSDataBase64EncodingOptions NSDataBase64EncodingEndLineWithCarriageReturnsystem NSDataBase64EncodingOptions NSDataBase64EncodingEndLineWithLineFeed// Base64 decoding options#if ndef _DEFINEDINCOCOA#define NSDataBase64DecodingOptions as NSUInteger#endifsystem NSDataBase64DecodingOptions NSDataBase64DecodingIgnoreUnknownCharacters// search options#if ndef _DEFINEDINCOCOA#define NSDataSearchOptions as NSUInteger#endifsystem NSDataSearchOptions NSDataSearchBackwardssystem NSDataSearchOptions NSDataSearchAnchored// compression#if _MACOSMAXALLOWED >= 101500#if ndef _DEFINEDINCOCOA#define NSDataCompressionAlgorithm as NSInteger                   // macOS 10.15+#endifsystem NSDataCompressionAlgorithm NSDataCompressionAlgorithmLZ4   // macOS 10.15+system NSDataCompressionAlgorithm NSDataCompressionAlgorithmLZFSE // macOS 10.15+system NSDataCompressionAlgorithm NSDataCompressionAlgorithmLZMA  // macOS 10.15+system NSDataCompressionAlgorithm NSDataCompressionAlgorithmZlib  // macOS 10.15+#endif // 101500// Classtoolbox fn DataClass = ClassRef// Createtoolbox fn DataWithBytes( ptr bytes, NSUInteger length ) = CFDataRef// Readingtoolbox fn DataWithContentsOfURL( CFURLRef url, NSDataReadingOptions options, ErrorRef *err ) = CFDataRef// Writingtoolbox fn DataWriteToURL( CFDataRef ref, CFURLRef url, NSDataWritingOptions options, ErrorRef *err ) = BOOL// Encoding/decoding Base64 representationtoolbox fn DataWithBase64EncodedString( CFStringRef string, NSDataBase64DecodingOptions options ) = CFDataReftoolbox fn DataBase64EncodedData( CFDataRef ref, NSDataBase64EncodingOptions options ) = CFDataReftoolbox fn DataBase64EncodedString( CFDataRef ref, NSDataBase64EncodingOptions options ) = CFStringRef// Accessing bytestoolbox fn DataBytes( CFDataRef ref ) = ptr/*  DataEnumerateByteRanges    callback example:    void local fn MyCallback( ref as CFDataRef, bytes as ptr, byteRange as CFRange, stp as ^BOOL, userData as ptr )            //*stp = YES// stop enumeration    end fn*/toolbox DataEnumerateByteRanges( CFDataRef ref, ptr callback, ptr userData )toolbox DataGetBytes( CFDataRef ref, ptr buffer, NSUInteger length )toolbox DataGetBytesInRange( CFDataRef ref, ptr buffer, CFRange range )// Findingtoolbox fn DataSubdata( CFDataRef ref, CFRange range ) = CFDataReftoolbox fn DataRangeOfData( CFDataRef ref, CFDataRef dataToFind, NSDataSearchOptions searchOptions, CFRange searchRange ) = CFRange// Testingtoolbox fn DataIsEqual( CFDataRef ref1, CFDataRef ref2 ) = BOOLtoolbox fn DataLength( CFDataRef ref ) = NSUInteger// Describingtoolbox fn DataDescription( CFDataRef ref ) = CFStringRef// Compress and decompress#if _MACOSMAXALLOWED >= 101500toolbox fn DataCompressedDataUsingAlgorithm( CFDataRef ref, NSDataCompressionAlgorithm algorithm, ErrorRef *err ) = CFDataRef   // macOS 10.15+toolbox fn DataDecompressedDataUsingAlgorithm( CFDataRef ref, NSDataCompressionAlgorithm algorithm, ErrorRef *err ) = CFDataRef // macOS 10.15+#endif// 101500/*  MutableData  Inherits from: Data/Object  NSMutableData - https://developer.apple.com/documentation/foundation/nsmutabledata?language=objc*/// Classtoolbox fn MutableDataClass = ClassRef// Createtoolbox fn MutableDataNew = CFMutableDataRef// autoreleasedtoolbox fn MutableDataWithCapacity( NSUInteger size ) = CFMutableDataReftoolbox fn MutableDataWithLength( NSUInteger length ) = CFMutableDataReftoolbox fn MutableDataWithBytes( ptr bytes, NSUInteger length ) = CFMutableDataReftoolbox fn MutableDataWithContentsOfURL( CFURLRef url, NSDataReadingOptions options, ErrorRef *err ) = CFMutableDataRef// Accesstoolbox fn MutableDataBytes( CFMutableDataRef dta ) = ptr// Lengthtoolbox MutableDataSetLength( CFMutableDataRef dta, NSUInteger length )// Addtoolbox MutableDataAppendBytes( CFMutableDataRef dta, ptr bytes, NSUInteger length )toolbox MutableDataAppendData( CFMutableDataRef dta1, CFDataRef ref2 )toolbox MutableDataIncreaseLengthBy( CFMutableDataRef dta, NSUInteger extraLength )// Modifytoolbox MutableDataReplaceBytesInRange( CFMutableDataRef dta, ptr replacementBytes, CFRange range )toolbox MutableDataReplaceBytesWithLength( CFMutableDataRef dta, ptr replacementBytes, CFRange range, NSUInteger length )toolbox MutableDataResetBytesInRange( CFMutableDataRef dta, CFRange range )toolbox MutableDataSetData( CFMutableDataRef dta1, CFDataRef ref2 )// Compress and decompress#if _MACOSMAXALLOWED >= 101500toolbox fn MutableDataCompressUsingAlgorithm( CFMutableDataRef ref, NSDataCompressionAlgorithm algorithm, ErrorRef *err ) = BOOL   // macOS 10.15+toolbox fn MutableDataDecompressUsingAlgorithm( CFMutableDataRef ref, NSDataCompressionAlgorithm algorithm, ErrorRef *err ) = BOOL // macOS 10.15+#endif// 101500