/*  Array  Bernie Wylde 20170414  Framework: Foundation  Inherits from: Object  NSArray - https://developer.apple.com/documentation/foundation/nsarray?language=objc  Literal syntax:    array = @[@"Alpha",@"Bravo",@"Charlie",@"Delta"]  Getter syntax:    obj = array[10]*/#if ndef _DEFINEDINCOCOA#define NSBinarySearchingOptions as NSUInteger#endifsystem NSBinarySearchingOptions NSBinarySearchingFirstEqualsystem NSBinarySearchingOptions NSBinarySearchingLastEqualsystem NSBinarySearchingOptions NSBinarySearchingInsertionIndex// Classtoolbox fn ArrayClass = ClassRef// Createtoolbox fn ArrayWithArray( CFArrayRef ref ) = CFArrayReftoolbox fn ArrayWithObject( CFTypeRef obj ) = CFArrayReftoolbox fn ArrayWithObjects( CFTypeRef obj, ... ) = CFArrayRef// a comma-separated list of objects, ending with NULL//toolbox fn ArrayWithContentsOfURL( CFURLRef url ) = CFArrayReftoolbox fn ArrayWithContentsOfURL( CFURLRef url, ErrorRef *err ) = CFArrayRef// err can be NULL.// Querytoolbox fn ArrayContainsObject( CFArrayRef ref, CFTypeRef obj ) = BOOLtoolbox fn ArrayCount( CFArrayRef ref ) = NSUIntegertoolbox fn ArrayFirstObject( CFArrayRef ref ) = CFTypeReftoolbox fn ArrayLastObject( CFArrayRef ref ) = CFTypeReftoolbox fn ArrayObjectAtIndex( CFArrayRef ref, NSUInteger index ) = CFTypeRef					// shorthand equivalent: obj = array[index]toolbox fn ArrayObjectsAtIndexes( CFArrayRef ref, IndexSetRef indexes ) = CFArrayReftoolbox fn ArrayObjectEnumerator( CFArrayRef ref ) = EnumeratorReftoolbox fn ArrayReverseObjectEnumerator( CFArrayRef ref ) = EnumeratorRef// Findtoolbox fn ArrayIndexOfObject( CFArrayRef ref, CFTypeRef obj ) = NSUIntegertoolbox fn ArrayIndexOfObjectInRange( CFArrayRef ref, CFTypeRef obj, CFRange range ) = NSUIntegertoolbox fn ArrayIndexOfObjectIdenticalTo( CFArrayRef ref, CFTypeRef obj ) = NSUInteger/*  ArrayXxxxPassingTest  testFn:    local fn MyTestFn( array as CFArrayRef, obj as CFTypeRef, index as NSUInteger, stp as ^BOOL, userData as ptr )      BOOL flag : flag = YES      //*stp = YES  // stop enumeration    end fn = flag// return NO to ignore object*/toolbox fn ArrayIndexOfObjectPassingTest( CFArrayRef ref, ptr testFn, ptr userData ) = NSUIntegertoolbox fn ArrayIndexOfObjectWithOptionsPassingTest( CFArrayRef ref, NSEnumerationOptions options, ptr testFn, ptr userData ) = NSUIntegertoolbox fn ArrayIndexOfObjectAtIndexesPassingTest( CFArrayRef ref, IndexSetRef indexSet, NSEnumerationOptions options, ptr testFn, ptr userData ) = NSUIntegertoolbox fn ArrayIndexesOfObjectsPassingTest( CFArrayRef ref, ptr testFn, ptr userData ) = IndexSetReftoolbox fn ArrayIndexesOfObjectsWithOptionsPassingTest( CFArrayRef ref, NSEnumerationOptions options, ptr testFn, ptr userData ) = IndexSetReftoolbox fn ArrayIndexesOfObjectsAtIndexesPassingTest( CFArrayRef ref, IndexSetRef indexSet, NSEnumerationOptions options, ptr testFn, ptr userData ) = IndexSetRef/*  ArrayIndexOfObjectInSortedRange  comparatorFn:    local fn MyComparatorFn( obj1 as CFTypeRef, obj2 as CFTypeRef, userData as ptr ) as NSComparisonResult      NSComparisonResult result      result = NSOrderedAscending			// NSOrderedSame // NSOrderedDescending    end fn = result*/toolbox fn ArrayIndexOfObjectInSortedRange( CFArrayRef ref, CFTypeRef obj, CFRange range, NSBinarySearchingOptions options, ptr comparatorFn, ptr userData ) = NSUIntegertoolbox fn ArrayIndexOfObjectInSortedRangeUsingComparator( CFArrayRef ref, CFTypeRef obj, CFRange range, NSBinarySearchingOptions options, ptr comparatorFn, ptr userData ) = NSUInteger // deprecated: 10.0 use: ArrayIndexOfObjectInSortedRange// Sending message to elementstoolbox ArrayMakeObjectsPerformSelector( CFArrayRef ref, CFStringRef selector )//toolbox ArrayMakeObjectsPerformSelectorString( CFArrayRef ref, CFStringRef string )toolbox ArrayMakeObjectsPerformSelectorWithObject( CFArrayRef ref, CFStringRef selector, CFTypeRef object )//toolbox ArrayMakeObjectsPerformSelectorWithObject( CFArrayRef ref, CFStringRef string, CFTypeRef object )/*  ArrayEnumerateObjects, ArrayEnumerateObjectsWithOptions, ArrayEnumerateObjectsAtIndexes  callback:    void local fn MyCallback( array as CFArrayRef, obj as CFTypeRef, index as NSUInteger, stp as ^BOOL, userData as ptr )      //*stp = YES// stop enumeration    end fn*/toolbox ArrayEnumerateObjects( CFArrayRef ref, ptr callback, ptr userData )toolbox ArrayEnumerateObjectsWithOptions( CFArrayRef ref, NSEnumerationOptions options, ptr callback, ptr userData )toolbox ArrayEnumerateObjectsAtIndexes( CFArrayRef ref, IndexSetRef indexSet, NSEnumerationOptions options, ptr callback, ptr userData )// Comparetoolbox fn ArrayFirstObjectCommonWithArray( CFArrayRef array1, CFArrayRef array2 ) = CFTypeReftoolbox fn ArrayIsEqual( CFArrayRef array1, CFArrayRef array2 ) = BOOL// Deriving new arraystoolbox fn ArrayByAddingObject( CFArrayRef ref, CFTypeRef obj ) = CFArrayReftoolbox fn ArrayByAddingObjectsFromArray( CFArrayRef array1, CFArrayRef array2 ) = CFArrayReftoolbox fn ArrayFilteredArrayUsingPredicate( CFArrayRef ref, PredicateRef pred ) = CFArrayReftoolbox fn ArraySubarrayWithRange( CFArrayRef ref, CFRange range ) = CFArrayRef// Sorttoolbox fn ArraySortedArrayHint( CFArrayRef ref ) = CFDataRef/*  ArraySortedArrayUsingFunction, ArraySortedArrayUsingFunctionHint  comparatorFn:    local fn MyComparatorFn( obj1 as CFTypeRef, obj2 as CFTypeRef, context as ptr ) as NSComparisonResult      NSComparisonResult result            result = NSOrderedAscending			// NSOrderedSame // NSOrderedDescending    end fn = result*/toolbox fn ArraySortedArrayUsingFunction( CFArrayRef ref, ptr comparatorFn, ptr context ) = CFArrayReftoolbox fn ArraySortedArrayUsingFunctionHint( CFArrayRef ref, ptr comparatorFn, ptr context, CFDataRef hint ) = CFArrayReftoolbox fn ArraySortedArrayUsingDescriptors( CFArrayRef ref, CFArrayRef descriptors ) = CFArrayReftoolbox fn ArraySortedArrayUsingSelector( CFArrayRef ref, CFStringRef selector ) = CFArrayRef// Working with string elementstoolbox fn ArrayComponentsJoinedByString( CFArrayRef ref, CFStringRef separator ) = CFStringRef// Descriptiontoolbox fn ArrayDescription( CFArrayRef ref ) = CFStringReftoolbox fn ArrayDescriptionWithLocale( CFArrayRef ref, CFLocaleRef locale ) = CFStringReftoolbox fn ArrayDescriptionWithLocaleIndent( CFArrayRef ref, CFLocaleRef locale, NSUInteger indentLevel ) = CFStringRef// Collecting pathstoolbox fn ArrayPathsMatchingExtensions( CFArrayRef ref, CFArrayRef extensions ) = CFArrayRef// Key-value observing// addObserver// removeObserver// Key-value codingtoolbox ArraySetValueForKey( CFArrayRef ref, CFTypeRef value, CFStringRef key )toolbox fn ArrayValueForKey( CFArrayRef ref, CFStringRef key ) = CFTypeRef// Shuffle// declared in GameplayKit/GKRandomSource.incl//toolbox fn ArrayShuffledArray( CFArrayRef ref ) = CFArrayRef// (requires Tlbx GameplayKit.incl header)//toolbox fn ArrayShuffledArrayWithRandomSource( CFArrayRef ref, GKRandomSourceRef randomSource ) = CFArrayRef// (requires Tlbx GameplayKit.incl header)// Instance methods#if _MACOSMAXALLOWED >= 101500toolbox fn ArrayByApplyingDifference( CFArrayRef ref, OrderedCollectionDifferenceRef diff ) = CFArrayRef                                                                                               // macOS 10.15+toolbox fn ArrayDifferenceFromArray( CFArrayRef ref, CFArrayRef otherArray ) = OrderedCollectionDifferenceRef                                                                                          // macOS 10.15+toolbox fn ArrayDifferenceFromArrayWithOptions( CFArrayRef ref, CFArrayRef otherArray, NSOrderedCollectionDifferenceCalculationOptions options ) = OrderedCollectionDifferenceRef                      // macOS 10.15+toolbox fn ArrayDifferenceFromArrayUsingEquivalenceTest( CFArrayRef ref, CFArrayRef otherArray, NSOrderedCollectionDifferenceCalculationOptions options, ptr testFn ) = OrderedCollectionDifferenceRef // macOS 10.15+#endif// 101500//toolbox fn ArrayWriteToURLAtomically( CFArrayRef ref, CFURLRef url, BOOL atomically ) = BOOLtoolbox fn ArrayWriteToURL( CFArrayRef ref, CFURLRef url, ErrorRef *err ) = BOOL/*  NScriptWhoseTests functions*/toolbox fn ArrayDoesContain( CFArrayRef ref, ObjectRef obj ) = BOOL/*  JSON convenience functions*/toolbox fn ArrayWithJSONString( CFStringRef string, ErrorRef *err ) = CFArrayRef/*  MutableArray  Inherits from: Array/Object  NSMutableArray - https://developer.apple.com/documentation/foundation/nsmutablearray?language=objc*/// Classtoolbox fn MutableArrayClass = ClassRef// Createtoolbox fn MutableArrayNew = CFMutableArrayRef// autoreleasedtoolbox fn MutableArrayWithCapacity( NSUInteger numItems ) = CFMutableArrayReftoolbox fn MutableArrayWithContentsOfURL( CFURLRef url ) = CFMutableArrayReftoolbox fn MutableArrayWithArray( CFArrayRef array ) = CFMutableArrayReftoolbox fn MutableArrayWithObject( CFTypeRef obj ) = CFMutableArrayReftoolbox fn MutableArrayWithObjects( CFTypeRef obj, ... ) = CFMutableArrayRef// Add objectstoolbox MutableArrayAddObject( CFMutableArrayRef ref, CFTypeRef obj )toolbox MutableArrayAddObjectsFromArray( CFMutableArrayRef ref, CFArrayRef otherArray )toolbox MutableArrayInsertObjectAtIndex( CFMutableArrayRef ref, CFTypeRef obj, NSUInteger index )toolbox MutableArrayInsertObjectsAtIndexes( CFMutableArrayRef ref, CFArrayRef objects, IndexSetRef indexes )// Remove objectstoolbox MutableArrayRemoveAllObjects( CFMutableArrayRef ref )toolbox MutableArrayRemoveLastObject( CFMutableArrayRef ref )toolbox MutableArrayRemoveObject( CFMutableArrayRef ref, CFTypeRef obj )toolbox MutableArrayRemoveObjectInRange( CFMutableArrayRef ref, CFTypeRef obj, CFRange range )toolbox MutableArrayRemoveObjectAtIndex( CFMutableArrayRef ref, NSUInteger index )toolbox MutableArrayRemoveObjectsAtIndexes( CFMutableArrayRef ref, IndexSetRef indexes )toolbox MutableArrayRemoveObjectsInArray( CFMutableArrayRef ref, CFArrayRef objects )toolbox MutableArrayRemoveObjectsInRange( CFMutableArrayRef ref, CFRange range )// Replace objectstoolbox MutableArrayReplaceObjectAtIndex( CFMutableArrayRef ref, CFTypeRef obj, NSUInteger index )toolbox MutableArrayReplaceObjectsAtIndexes( CFMutableArrayRef ref, CFArrayRef objects, IndexSetRef indexes )toolbox MutableArraySetArray( CFMutableArrayRef ref, CFArrayRef otherArray )// Filter contenttoolbox MutableArrayFilterUsingPredicate( CFMutableArrayRef ref, PredicateRef predicate )// Rearrange contenttoolbox MutableArrayExchangeObjects( CFMutableArrayRef ref, NSUInteger index1, NSUInteger index2 )toolbox MutableArraySortUsingDescriptors( CFMutableArrayRef ref, CFArrayRef descriptors )/*  MutableArraySortUsingFunction  comparatorFn:    local fn MyComparatorFn( obj1 as CFTypeRef, obj2 as CFTypeRef, context as ptr ) as NSComparisonResult      NSComparisonResult result      // result = NSOrderedAscending, NSOrderedSame, NSOrderedDescending    end fn = result*/toolbox MutableArraySortUsingFunction( CFMutableArrayRef ref, ptr comparator, ptr context )toolbox MutableArraySortUsingSelector( CFMutableArrayRef ref, CFStringRef selector )// Instance methods#if _MACOSMAXALLOWED >= 101500toolbox MutableArrayApplyDifference( CFMutableArrayRef ref, OrderedCollectionDifferenceRef diff ) // macOS 10.15+#endif// 101500// Conveniencetoolbox MutableArrayAddObjects( CFMutableArrayRef ref, CFTypeRef obj, ... )// a NULL-terminated list of objects/*  JSON convenience function*/toolbox fn MutableArrayWithJSONString( CFStringRef string, ErrorRef *err ) = CFMutableArrayRef