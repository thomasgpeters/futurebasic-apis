/*  CMFormatDescription.incl  Bernie Wylde 20210715  Framework: CoreMedia*/// video dimensions#if ndef _DEFINEDINCOCOAbegin record CMVideoDimensionsSInt32 widthSInt32 heightend record#endif // _DEFINEDINCOCOA// media type#if ndef _DEFINEDINCOCOA#define CMMediaType as FourCharCode#endif // _DEFINEDINCOCOAsystem CMMediaType kCMMediaType_Video             // = 'vide',system CMMediaType kCMMediaType_Audio             // = 'soun',system CMMediaType kCMMediaType_Muxed             // = 'muxx',system CMMediaType kCMMediaType_Text              // = 'text',system CMMediaType kCMMediaType_ClosedCaption     // = 'clcp',system CMMediaType kCMMediaType_Subtitle          // = 'sbtl',system CMMediaType kCMMediaType_TimeCode          // = 'tmcd',system CMMediaType kCMMediaType_Metadata          // = 'meta',system CMMediaType kCMMediaType_TaggedBufferGroup //	= 'tbgr',system CMMediaType kCMMediaType_AuxiliaryPicture  // = 'auxv'// format description mask#if ndef _DEFINEDINCOCOA#define CMAudioFormatDescriptionMask as UInt32#endif // _DEFINEDINCOCOAsystem CMAudioFormatDescriptionMask kCMAudioFormatDescriptionMask_StreamBasicDescription //	= (1<<0),system CMAudioFormatDescriptionMask kCMAudioFormatDescriptionMask_MagicCookie            // = (1<<1),system CMAudioFormatDescriptionMask kCMAudioFormatDescriptionMask_ChannelLayout          // = (1<<2),system CMAudioFormatDescriptionMask kCMAudioFormatDescriptionMask_Extensions             // = (1<<3),system CMAudioFormatDescriptionMask kCMAudioFormatDescriptionMask_All                    // = kCMAudioFormatDescriptionMask_StreamBasicDescription | kCMAudioFormatDescriptionMask_MagicCookie | kCMAudioFormatDescriptionMask_ChannelLayout | kCMAudioFormatDescriptionMask_Extensions// video codec type#if ndef _DEFINEDINCOCOA#define CMVideoCodecType as FourCharCode#endif // _DEFINEDINCOCOAsystem CMVideoCodecType kCMVideoCodecType_422YpCbCr8          // = kCMPixelFormat_422YpCbCr8,system CMVideoCodecType kCMVideoCodecType_Animation           // = 'rle ',system CMVideoCodecType kCMVideoCodecType_Cinepak             // = 'cvid',system CMVideoCodecType kCMVideoCodecType_JPEG                // = 'jpeg',system CMVideoCodecType kCMVideoCodecType_JPEG_OpenDML        // = 'dmb1',system CMVideoCodecType kCMVideoCodecType_JPEG_XL             // = 'jxlc',system CMVideoCodecType kCMVideoCodecType_SorensonVideo       // = 'SVQ1',system CMVideoCodecType kCMVideoCodecType_SorensonVideo3      // = 'SVQ3',system CMVideoCodecType kCMVideoCodecType_H263                // = 'h263',system CMVideoCodecType kCMVideoCodecType_H264                // = 'avc1',system CMVideoCodecType kCMVideoCodecType_HEVC                // = 'hvc1',system CMVideoCodecType kCMVideoCodecType_HEVCWithAlpha       // = 'muxa',system CMVideoCodecType kCMVideoCodecType_DolbyVisionHEVC     // = 'dvh1',system CMVideoCodecType kCMVideoCodecType_MPEG4Video          // = 'mp4v',system CMVideoCodecType kCMVideoCodecType_MPEG2Video          // = 'mp2v',system CMVideoCodecType kCMVideoCodecType_MPEG1Video          // = 'mp1v',system CMVideoCodecType kCMVideoCodecType_VP9                 // = 'vp09',system CMVideoCodecType kCMVideoCodecType_DVCNTSC             // = 'dvc ',system CMVideoCodecType kCMVideoCodecType_DVCPAL              // = 'dvcp',system CMVideoCodecType kCMVideoCodecType_DVCProPAL           // = 'dvpp',system CMVideoCodecType kCMVideoCodecType_DVCPro50NTSC        // = 'dv5n',system CMVideoCodecType kCMVideoCodecType_DVCPro50PAL         // = 'dv5p',system CMVideoCodecType kCMVideoCodecType_DVCPROHD720p60      // = 'dvhp',system CMVideoCodecType kCMVideoCodecType_DVCPROHD720p50      // = 'dvhq',system CMVideoCodecType kCMVideoCodecType_DVCPROHD1080i60     // = 'dvh6',system CMVideoCodecType kCMVideoCodecType_DVCPROHD1080i50     // = 'dvh5',system CMVideoCodecType kCMVideoCodecType_DVCPROHD1080p30     // = 'dvh3',system CMVideoCodecType kCMVideoCodecType_DVCPROHD1080p25     // = 'dvh2',system CMVideoCodecType kCMVideoCodecType_AppleProRes4444XQ   // = 'ap4x',system CMVideoCodecType kCMVideoCodecType_AppleProRes4444     // = 'ap4h',system CMVideoCodecType kCMVideoCodecType_AppleProRes422HQ    // = 'apch',system CMVideoCodecType kCMVideoCodecType_AppleProRes422      // = 'apcn',system CMVideoCodecType kCMVideoCodecType_AppleProRes422LT    // = 'apcs',system CMVideoCodecType kCMVideoCodecType_AppleProRes422Proxy // = 'apco',system CMVideoCodecType kCMVideoCodecType_AppleProResRAW      // = 'aprn',system CMVideoCodecType kCMVideoCodecType_AppleProResRAWHQ    // = 'aprh',system CMVideoCodecType kCMVideoCodecType_DisparityHEVC       // = 'dish', // encodes kCVPixelFormatType_DisparityFloat16 in 10-bit monochrome HEVCsystem CMVideoCodecType kCMVideoCodecType_DepthHEVC           // = 'deph', // encodes kCVPixelFormatType_DepthFloat16 in 10-bit monochrome HEVCsystem CMVideoCodecType kCMVideoCodecType_AV1                 // = 'av01',// muxed stream type#if ndef _DEFINEDINCOCOA#define CMMuxedStreamType as FourCharCode#endif // _DEFINEDINCOCOAsystem CMMuxedStreamType kCMMuxedStreamType_MPEG1System                   //= 'mp1s',system CMMuxedStreamType kCMMuxedStreamType_MPEG2Transport                //	= 'mp2t',system CMMuxedStreamType kCMMuxedStreamType_MPEG2Program                  // = 'mp2p',system CMMuxedStreamType kCMMuxedStreamType_DV                            // = 'dv  ',#if _MACOSMAXALLOWED >= 140000system CMMuxedStreamType kCMMuxedStreamType_EmbeddedDeviceScreenRecording // = 'isr ' // macOS 14.0+#endif // 140000// metadata format type#if ndef _DEFINEDINCOCOA#define CMMetadataFormatType as FourCharCode#endif // _DEFINEDINCOCOAsystem CMMetadataFormatType kCMMetadataFormatType_ICY   // = 'icy ',system CMMetadataFormatType kCMMetadataFormatType_ID3   // = 'id3 ',system CMMetadataFormatType kCMMetadataFormatType_Boxed // = 'mebx',system CMMetadataFormatType kCMMetadataFormatType_EMSG  // 	= 'emsg',// time code format type#if ndef _DEFINEDINCOCOA#define CMTimeCodeFormatType as FourCharCode#endif // _DEFINEDINCOCOAsystem CMTimeCodeFormatType kCMTimeCodeFormatType_TimeCode32 // = 'tmcd',system CMTimeCodeFormatType kCMTimeCodeFormatType_TimeCode64 // = 'tc64',system CMTimeCodeFormatType kCMTimeCodeFormatType_Counter32  // = 'cn32',system CMTimeCodeFormatType kCMTimeCodeFormatType_Counter64  // = 'cn64'// text justification value#if ndef _DEFINEDINCOCOA#define CMTextJustificationValue as SInt8#endif // _DEFINEDINCOCOAsystem CMTextJustificationValue kCMTextJustification_left_top     // =  0,system CMTextJustificationValue kCMTextJustification_centered     // =  1,system CMTextJustificationValue kCMTextJustification_bottom_right //	= -1// text display flags#if ndef _DEFINEDINCOCOA#define CMTextDisplayFlags as UInt32#endif // _DEFINEDINCOCOAsystem CMTextDisplayFlags kCMTextDisplayFlag_scrollIn                    // = 0x00000020,system CMTextDisplayFlags kCMTextDisplayFlag_scrollOut                   // = 0x00000040,system CMTextDisplayFlags kCMTextDisplayFlag_scrollDirectionMask         // = 0x00000180,system CMTextDisplayFlags kCMTextDisplayFlag_scrollDirection_bottomToTop // = 0x00000000,system CMTextDisplayFlags kCMTextDisplayFlag_scrollDirection_rightToLeft // = 0x00000080,system CMTextDisplayFlags kCMTextDisplayFlag_scrollDirection_topToBottom // = 0x00000100,system CMTextDisplayFlags kCMTextDisplayFlag_scrollDirection_leftToRight // = 0x00000180,system CMTextDisplayFlags kCMTextDisplayFlag_continuousKaraoke           // = 0x00000800,system CMTextDisplayFlags kCMTextDisplayFlag_writeTextVertically         // = 0x00020000,system CMTextDisplayFlags kCMTextDisplayFlag_fillTextRegion              // = 0x00040000,system CMTextDisplayFlags kCMTextDisplayFlag_obeySubtitleFormatting      // = 0x20000000,system CMTextDisplayFlags kCMTextDisplayFlag_forcedSubtitlesPresent      // = 0x40000000,system CMTextDisplayFlags kCMTextDisplayFlag_allSubtitlesForced          // = 0x80000000,// Createtoolbox fn CMFormatDescriptionCreate( CFAllocatorRef allocator, CMMediaType mediaType, FourCharCode mediaSubType, CFDictionaryRef extensions, CMFormatDescriptionRef *formatDescriptionOut ) = OSStatus// Comparetoolbox fn CMFormatDescriptionEqual( CMFormatDescriptionRef formatDescription, CMFormatDescriptionRef otherFormatDescription ) = Booleantoolbox fn CMFormatDescriptionEqualIgnoringExtensionKeys( CMFormatDescriptionRef formatDescription, CMFormatDescriptionRef otherFormatDescription, CFTypeRef formatDescriptionExtensionKeysToIgnore, CFTypeRef sampleDescriptionExtensionAtomKeysToIgnore ) = Boolean// Inspecttoolbox fn CMFormatDescriptionGetMediaType( CMFormatDescriptionRef desc ) = CMMediaTypetoolbox fn CMFormatDescriptionGetMediaSubType( CMFormatDescriptionRef desc ) = FourCharCodetoolbox fn CMFormatDescriptionGetExtension( CMFormatDescriptionRef desc, CFStringRef extensionKey ) = CFPropertyListReftoolbox fn CMFormatDescriptionGetExtensions( CMFormatDescriptionRef desc ) = CFDictionaryReftoolbox fn CMFormatDescriptionGetTypeID = CFTypeID// Audio descriptorstoolbox fn CMAudioFormatDescriptionCreateSummary( CFAllocatorRef allocator, CFArrayRef formatDescriptionArray, UInt32 flags, CMAudioFormatDescriptionRef *formatDescriptionOut ) = OSStatus//toolbox fn CMAudioFormatDescriptionCreate( CFAllocatorRef allocator, AudioStreamBasicDescription *asbd, long layoutSize, AudioChannelLayout *layout, long magicCookieSize, ptr magicCookie, CFDictionaryRef extensions, CMAudioFormatDescriptionRef *formatDescriptionOut ) = OSStatustoolbox fn CMAudioFormatDescriptionEqual( CMAudioFormatDescriptionRef formatDescription, CMAudioFormatDescriptionRef otherFormatDescription, CMAudioFormatDescriptionMask equalityMask, CMAudioFormatDescriptionMask *equalityMaskOut ) = Boolean//toolbox fn CMAudioFormatDescriptionGetChannelLayout( CMAudioFormatDescriptionRef desc, lont *sizeOut ) = AudioChannelLayout//toolbox fn CMAudioFormatDescriptionGetFormatList( CMAudioFormatDescriptionRef desc, long *sizeOut ) = AudioFormatListItemtoolbox fn CMAudioFormatDescriptionGetMagicCookie( CMAudioFormatDescriptionRef desc, long *sizeOut ) = ptr//toolbox fn CMAudioFormatDescriptionGetMostCompatibleFormat( CMAudioFormatDescriptionRef desc ) = AudioFormatListItem//toolbox fn CMAudioFormatDescriptionGetRichestDecodableFormat( CMAudioFormatDescriptionRef desc ) = AudioFormatListItemtoolbox fn CMAudioFormatDescriptionGetStreamBasicDescription( CMAudioFormatDescriptionRef desc ) = AudioStreamBasicDescriptiontoolbox fn CMDoesBigEndianSoundDescriptionRequireLegacyCBRSampleTableLayout( CMBlockBufferRef soundDescriptionBlockBuffer, CMSoundDescriptionFlavor flavor ) = Booleantoolbox fn CMSwapBigEndianSoundDescriptionToHost( UInt8 *soundDescriptionData, long soundDescriptionSize ) = OSStatustoolbox fn CMSwapHostEndianSoundDescriptionToBig( UInt8 *soundDescriptionData, long soundDescriptionSize ) = OSStatustoolbox fn CMAudioFormatDescriptionCreateFromBigEndianSoundDescriptionData( CFAllocatorRef allocator, UInt8 *soundDescriptionData, long size, CMSoundDescriptionFlavor flavor, CMAudioFormatDescriptionRef *formatDescriptionOut ) = OSStatustoolbox fn CMAudioFormatDescriptionCreateFromBigEndianSoundDescriptionBlockBuffer( CFAllocatorRef allocator, CMBlockBufferRef soundDescriptionBlockBuffer, CMSoundDescriptionFlavor flavor, CMAudioFormatDescriptionRef *formatDescriptionOut ) = OSStatustoolbox fn CMAudioFormatDescriptionCopyAsBigEndianSoundDescriptionBlockBuffer( CFAllocatorRef allocator, CMAudioFormatDescriptionRef audioFormatDescription, CMSoundDescriptionFlavor flavor, CMBlockBufferRef *blockBufferOut ) = OSStatus// Video descriptionstoolbox fn CMVideoFormatDescriptionCreate( CFAllocatorRef allocator, CMVideoCodecType codecType, UInt32 width, UInt32 height, CFDictionaryRef extensions, CMVideoFormatDescriptionRef *formatDescriptionOut ) = OSStatus//toolbox fn CMVideoFormatDescriptionCreateForImageBuffer( CFAllocatorRef allocator, CVImageBufferRef imageBuffer, CMVideoFormatDescriptionRef *formatDescriptionOut ) = OSStatustoolbox fn CMVideoFormatDescriptionGetCleanAperture( CMVideoFormatDescriptionRef videoDesc, Boolean originIsAtTopLeft ) = CGRecttoolbox fn CMVideoFormatDescriptionGetDimensions( CMVideoFormatDescriptionRef videoDesc ) = CMVideoDimensionstoolbox fn CMVideoFormatDescriptionGetExtensionKeysCommonWithImageBuffers = CFArrayReftoolbox fn CMVideoFormatDescriptionGetPresentationDimensions( CMVideoFormatDescriptionRef videoDesc, Boolean usePixelAspectRatio, Boolean useCleanAperture ) = CGSize//toolbox fn CMVideoFormatDescriptionMatchesImageBuffer( CMVideoFormatDescriptionRef desc, CVImageBufferRef imageBuffer ) = Booleantoolbox fn CMVideoFormatDescriptionCreateFromH264ParameterSets( CFAllocatorRef allocator, long parameterSetCount, UInt8 *parameterSetPointers, long *parameterSetSizes, int NALUnitHeaderLength, CMFormatDescriptionRef *formatDescriptionOut ) = OSStatustoolbox fn CMVideoFormatDescriptionCreateFromHEVCParameterSets( CFAllocatorRef allocator, long parameterSetCount, UInt8 *parameterSetPointers, long *parameterSetSizes, int NALUnitHeaderLength, CFDictionaryRef extensions, CMFormatDescriptionRef *formatDescriptionOut ) = OSStatustoolbox fn CMVideoFormatDescriptionGetH264ParameterSetAtIndex( CMFormatDescriptionRef videoDesc, long parameterSetIndex, UInt8 *parameterSetPointerOut, long *parameterSetSizeOut, long *parameterSetCountOut, int *NALUnitHeaderLengthOut ) = OSStatustoolbox fn CMVideoFormatDescriptionCopyTagCollectionArray( CMVideoFormatDescriptionRef formatDescription, CFArrayRef *tagCollectionsOut ) = OSStatustoolbox fn CMVideoFormatDescriptionCopyAsBigEndianImageDescriptionBlockBuffer( CFAllocatorRef allocator, CMVideoFormatDescriptionRef videoFormatDescription, CFStringEncoding stringEncoding, CMImageDescriptionFlavor flavor, CMBlockBufferRef *blockBufferOut ) = OSStatustoolbox fn CMVideoFormatDescriptionCreateFromBigEndianImageDescriptionBlockBuffer( CFAllocatorRef allocator, CMBlockBufferRef imageDescriptionBlockBuffer, CFStringEncoding stringEncoding, CMImageDescriptionFlavor flavor, CMVideoFormatDescriptionRef *formatDescriptionOut ) = OSStatustoolbox fn CMVideoFormatDescriptionCreateFromBigEndianImageDescriptionData( CFAllocatorRef allocator, UInt8 *imageDescriptionData, long size, CFStringEncoding stringEncoding, CMImageDescriptionFlavor flavor, CMVideoFormatDescriptionRef *formatDescriptionOut ) = OSStatustoolbox fn CMSwapBigEndianImageDescriptionToHost( UInt8 *imageDescriptionData, long imageDescriptionSize ) = OSStatustoolbox fn CMSwapHostEndianImageDescriptionToBig( UInt8 *imageDescriptionData, long imageDescriptionSize ) = OSStatus// Muxed descriptionstoolbox fn CMMuxedFormatDescriptionCreate( CFAllocatorRef allocator, CMMuxedStreamType muxType, CFDictionaryRef extensions, CMMuxedFormatDescriptionRef *formatDescriptionOut ) = OSStatus// Metadata descriptionstoolbox fn CMMetadataFormatDescriptionCreateWithKeys( CFAllocatorRef allocator, CMMetadataFormatType metadataType, CFArrayRef keys, CMMetadataFormatDescriptionRef *formatDescriptionOut ) = OSStatustoolbox fn CMMetadataFormatDescriptionGetKeyWithLocalID( CMMetadataFormatDescriptionRef desc, OSType localKeyID ) = CFDictionaryReftoolbox fn CMMetadataFormatDescriptionCopyAsBigEndianMetadataDescriptionBlockBuffer( CFAllocatorRef allocator, CMMetadataFormatDescriptionRef metadataFormatDescription, CMMetadataDescriptionFlavor flavor, CMBlockBufferRef *blockBufferOut ) = OSStatustoolbox fn CMMetadataFormatDescriptionCreateByMergingMetadataFormatDescriptions( CFAllocatorRef allocator, CMMetadataFormatDescriptionRef sourceDescription, CMMetadataFormatDescriptionRef otherSourceDescription, CMMetadataFormatDescriptionRef *formatDescriptionOut ) = OSStatustoolbox fn CMMetadataFormatDescriptionCreateFromBigEndianMetadataDescriptionBlockBuffer( CFAllocatorRef allocator, CMBlockBufferRef metadataDescriptionBlockBuffer, CMMetadataDescriptionFlavor flavor, CMMetadataFormatDescriptionRef *formatDescriptionOut ) = OSStatustoolbox fn CMMetadataFormatDescriptionCreateFromBigEndianMetadataDescriptionData( CFAllocatorRef allocator, UInt8 *metadataDescriptionData, long size, CMMetadataDescriptionFlavor flavor, CMMetadataFormatDescriptionRef *formatDescriptionOut ) = OSStatustoolbox fn CMMetadataFormatDescriptionCreateWithMetadataFormatDescriptionAndMetadataSpecifications( CFAllocatorRef allocator, CMMetadataFormatDescriptionRef sourceDescription, CFArrayRef metadataSpecifications, CMMetadataFormatDescriptionRef *formatDescriptionOut ) = OSStatustoolbox fn CMMetadataFormatDescriptionCreateWithMetadataSpecifications( CFAllocatorRef allocator, CMMetadataFormatType metadataType, CFArrayRef metadataSpecifications, CMMetadataFormatDescriptionRef *formatDescriptionOut ) = OSStatustoolbox fn CMSwapBigEndianMetadataDescriptionToHost( UInt8 *metadataDescriptionData, long metadataDescriptionSize ) = OSStatustoolbox fn CMSwapHostEndianMetadataDescriptionToBig( UInt8 *metadataDescriptionData, long metadataDescriptionSize ) = OSStatustoolbox fn CMMetadataFormatDescriptionGetIdentifiers( CMMetadataFormatDescriptionRef desc ) = CFArrayRef// Text descriptionstoolbox fn CMTextFormatDescriptionGetDefaultStyle( CMFormatDescriptionRef desc, UInt16 *localFontIDOut, Boolean *boldOut, Boolean *italicOut, Boolean *underlineOut, CGFloat *fontSizeOut, CGFloat *colorComponentsOut ) = OSStatustoolbox fn CMTextFormatDescriptionGetDefaultTextBox( CMFormatDescriptionRef desc, Boolean originIsAtTopLeft, CGFloat heightOfTextTrack, CGRect *defaultTextBoxOut ) = OSStatustoolbox fn CMTextFormatDescriptionGetDisplayFlags( CMFormatDescriptionRef desc, CMTextDisplayFlags *displayFlagsOut ) = OSStatustoolbox fn CMTextFormatDescriptionGetFontName( CMFormatDescriptionRef desc, UInt16 localFontID, CFStringRef *fontNameOut ) = OSStatustoolbox fn CMTextFormatDescriptionGetJustification( CMFormatDescriptionRef desc, CMTextJustificationValue *horizontaJustificationlOut, CMTextJustificationValue *verticalJustificationOut ) = OSStatustoolbox fn CMTextFormatDescriptionCopyAsBigEndianTextDescriptionBlockBuffer( CFAllocatorRef allocator, CMTextFormatDescriptionRef textFormatDescription, CMTextDescriptionFlavor flavor, CMBlockBufferRef *blockBufferOut ) = OSStatustoolbox fn CMTextFormatDescriptionCreateFromBigEndianTextDescriptionBlockBuffer( CFAllocatorRef allocator, CMBlockBufferRef textDescriptionBlockBuffer, CMTextDescriptionFlavor flavor, CMMediaType mediaType, CMTextFormatDescriptionRef *formatDescriptionOut ) = OSStatustoolbox fn CMTextFormatDescriptionCreateFromBigEndianTextDescriptionData( CFAllocatorRef allocator, UInt8 *textDescriptionData, long size, CMTextDescriptionFlavor flavor, CMMediaType mediaType, CMTextFormatDescriptionRef *formatDescriptionOut ) = OSStatustoolbox fn CMSwapBigEndianTextDescriptionToHost( UInt8 *textDescriptionData, long textDescriptionSize ) = OSStatustoolbox fn CMSwapHostEndianTextDescriptionToBig( UInt8 *textDescriptionData, long textDescriptionSize ) = OSStatus// Time code descriptionstoolbox fn CMTimeCodeFormatDescriptionCreate( CFAllocatorRef allocator, CMTimeCodeFormatType timeCodeFormatType, CMTime frameDuration, UInt32 frameQuanta, UInt32 flags, CFDictionaryRef extensions, CMTimeCodeFormatDescriptionRef *formatDescriptionOut ) = OSStatustoolbox fn CMTimeCodeFormatDescriptionGetFrameDuration( CMTimeCodeFormatDescriptionRef timeCodeFormatDescription ) = CMTimetoolbox fn CMTimeCodeFormatDescriptionGetFrameQuanta( CMTimeCodeFormatDescriptionRef timeCodeFormatDescription ) = UInt32toolbox fn CMTimeCodeFormatDescriptionGetTimeCodeFlags( CMTimeCodeFormatDescriptionRef desc ) = UInt32toolbox fn CMTimeCodeFormatDescriptionCopyAsBigEndianTimeCodeDescriptionBlockBuffer( CFAllocatorRef allocator, CMTimeCodeFormatDescriptionRef timeCodeFormatDescription, CMTimeCodeDescriptionFlavor flavor, CMBlockBufferRef *blockBufferOut ) = OSStatustoolbox fn CMTimeCodeFormatDescriptionCreateFromBigEndianTimeCodeDescriptionBlockBuffer( CFAllocatorRef allocator, CMBlockBufferRef timeCodeDescriptionBlockBuffer, CMTimeCodeDescriptionFlavor flavor, CMTimeCodeFormatDescriptionRef *formatDescriptionOut ) = OSStatustoolbox fn CMTimeCodeFormatDescriptionCreateFromBigEndianTimeCodeDescriptionData( CFAllocatorRef allocator, UInt8 *timeCodeDescriptionData, long size, CMTimeCodeDescriptionFlavor flavor, CMTimeCodeFormatDescriptionRef *formatDescriptionOut ) = OSStatustoolbox fn CMSwapBigEndianTimeCodeDescriptionToHost( UInt8 *timeCodeDescriptionData, long timeCodeDescriptionSize ) = OSStatustoolbox fn CMSwapHostEndianTimeCodeDescriptionToBig( UInt8 *timeCodeDescriptionData, long timeCodeDescriptionSize ) = OSStatus// Closed captioning descriptionstoolbox fn CMClosedCaptionFormatDescriptionCopyAsBigEndianClosedCaptionDescriptionBlockBuffer( CFAllocatorRef allocator, CMClosedCaptionFormatDescriptionRef closedCaptionFormatDescription, CMClosedCaptionDescriptionFlavor flavor, CMBlockBufferRef *blockBufferOut ) = OSStatustoolbox fn CMClosedCaptionFormatDescriptionCreateFromBigEndianClosedCaptionDescriptionBlockBuffer( CFAllocatorRef allocator, CMBlockBufferRef closedCaptionDescriptionBlockBuffer, CMClosedCaptionDescriptionFlavor flavor, CMClosedCaptionFormatDescriptionRef *formatDescriptionOut ) = OSStatustoolbox fn CMClosedCaptionFormatDescriptionCreateFromBigEndianClosedCaptionDescriptionData( CFAllocatorRef allocator, UInt8 *closedCaptionDescriptionData, long size, CMClosedCaptionDescriptionFlavor flavor, CMClosedCaptionFormatDescriptionRef *formatDescriptionOut ) = OSStatustoolbox fn CMSwapHostEndianClosedCaptionDescriptionToBig( UInt8 *closedCaptionDescriptionData, long closedCaptionDescriptionSize ) = OSStatustoolbox fn CMSwapBigEndianClosedCaptionDescriptionToHost( UInt8 *closedCaptionDescriptionData, long closedCaptionDescriptionSize ) = OSStatus