/*  Value.incl  Bernie Wylde 20171121  Framework: Foundation  Inherits from: Object  NSValue - https://developer.apple.com/documentation/foundation/nsvalue?language=objc*/// Classtoolbox fn ValueClass = ClassRef// Raw valuestoolbox fn ValueWithBytes( ptr p, CFStringRef objCType ) = ValueReftoolbox fn ValueObjCType( ValueRef ref ) = CFStringRef// Pointer and objecttoolbox fn ValueWithPointer( ptr p ) = ValueReftoolbox fn ValuePointer( ValueRef ref ) = ptrtoolbox fn ValueWithNonretainedObject( CFTypeRef obj ) = ValueReftoolbox fn ValueNonretainedObject( ValueRef ref ) = CFTypeRef// Comparetoolbox fn ValueIsEqual( ValueRef val1, ValueRef val2 ) = BOOL// Instance methodstoolbox ValueGetValue( ValueRef ref, ptr value, NSUInteger size )// range                              - declared in Range.incl// point, size, rect, edgeInsets      - declared in Geometry.incl// CATransform3D                      - declared in CoreAnimation/CATransform3D.incl// SCNVector3, SCNVector4, SCNMatrix4 - declared in SceneKitTypes.incl// CMTime, CMTimeRange, CMTimeMapping - declared in AVTime.incl// MKCoordinate, MKCoordinateSpan     - declared in MKGeometry.incl// CMVideoDimensions                  - declared in AVGeometry.incl/*  Number  Bernie Wylde 20140424  Inherits from: Value/Object  NSNumber - https://developer.apple.com/documentation/foundation/nsnumber?language=objc  Literal syntax:    number = @23    number = @12.34    number = @(11 * 3 + 6)      // parens required    number = @(YES)             // parens required    number = @(myNumVar)        // parens required    number = @(_myConst)        // parens required    number = @(myNumVar + 56)   // parens required*/// Classtoolbox fn NumberClass = ClassRef// Createtoolbox fn NumberWithBool( BOOL value ) = CFNumberReftoolbox fn NumberWithChar( char value ) = CFNumberReftoolbox fn NumberWithDouble( double value ) = CFNumberReftoolbox fn NumberWithFloat( float value ) = CFNumberReftoolbox fn NumberWithInt( SInt32 value ) = CFNumberReftoolbox fn NumberWithInteger( NSInteger value ) = CFNumberReftoolbox fn NumberWithLong( long value ) = CFNumberRef// same as NumberWithIntegertoolbox fn NumberWithLongLong( SInt64 value ) = CFNumberReftoolbox fn NumberWithShort( short value ) = CFNumberReftoolbox fn NumberWithUnsignedChar( unsigned char value ) = CFNumberReftoolbox fn NumberWithUnsignedInt( SInt32 value ) = CFNumberReftoolbox fn NumberWithUnsignedInteger( NSUInteger value ) = CFNumberReftoolbox fn NumberWithUnsignedLong( unsigned long value ) = CFNumberRef// same as NumberWithUnsignedIntegertoolbox fn NumberWithUnsignedLongLong( UInt64 value ) = CFNumberReftoolbox fn NumberWithUnsignedShort( unsigned short value ) = CFNumberRef// Numeric valuestoolbox fn NumberBoolValue( CFNumberRef ref ) = BOOLtoolbox fn NumberCharValue( CFNumberRef ref ) = chartoolbox fn NumberDecimalValue( CFNumberRef ref ) = NSDecimaltoolbox fn NumberDoubleValue( CFNumberRef ref ) = double// note: FB's val() function can also be used to get the double valuetoolbox fn NumberFloatValue( CFNumberRef ref ) = floattoolbox fn NumberIntValue( CFNumberRef ref ) = SInt32toolbox fn NumberIntegerValue( CFNumberRef ref ) = NSInteger// note: FB's val&() function can also be used to get the integer valuetoolbox fn NumberLongLongValue( CFNumberRef ref ) = SInt64toolbox fn NumberLongValue( CFNumberRef ref ) = long// same as NumberIntegerValuetoolbox fn NumberShortValue( CFNumberRef ref ) = shorttoolbox fn NumberUnsignedCharValue( CFNumberRef ref ) = unsigned chartoolbox fn NumberUnsignedIntegerValue( CFNumberRef ref ) = NSUIntegertoolbox fn NumberUnsignedIntValue( CFNumberRef ref ) = UInt32toolbox fn NumberUnsignedLongLongValue( CFNumberRef ref ) = UInt64toolbox fn NumberUnsignedLongValue( CFNumberRef ref ) = unsigned long// same as NumberUnsignedIntegerValuetoolbox fn NumberUnsignedShortValue( CFNumberRef ref ) = unsigned short// String representationtoolbox fn NumberDescriptionWithLocale( CFNumberRef ref, CFLocaleRef locale ) = CFStringReftoolbox fn NumberStringValue( CFNumberRef ref ) = CFStringRef// Comparetoolbox fn NumberCompare( CFNumberRef ref1, CFNumberRef ref2 ) = NSComparisonResulttoolbox fn NumberIsEqual( CFNumberRef ref1, CFNumberRef ref2 ) = BOOL// Type informationtoolbox fn NumberObjCType( CFNumberRef ref ) = CFStringRef// Conveniencetoolbox fn NumberOrdinalString( CFNumberRef ref ) = CFStringReftoolbox fn NumberSpellOutString( CFNumberRef ref ) = CFStringReftoolbox fn NumberCurrencyString( CFNumberRef ref ) = CFStringReftoolbox fn BoolString( BOOL flag ) = CFStringRef// returns "YES" or "NO"toolbox fn BooleanString( Boolean flag ) = CFStringRef// returns "true" or "false"