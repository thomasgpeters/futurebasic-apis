/*  Document.incl  Bernie Wylde 20181211  Framework: AppKit  Inherits from: Object  NSDocument - https://developer.apple.com/documentation/appkit/nsdocument?language=objc*/#if ndef _DEFINEDINCOCOA#define DocumentRef as ObjectRef#define DocumentControllerRef as ObjectRef#endifinclude "Document.h"include "Document.m"include "CocoaUI/Document/DocumentController.incl"// save operation type#if ndef _DEFINEDINCOCOA#define NSSaveOperationType as NSUInteger#endif // _DEFINEDINCOCOA// The overwriting of a document's file or file package with the document's current contents because the user explicitly commanded it.system NSSaveOperationType NSSaveOperation              // = 0,// The writing of a document's current contents to a new file or file package, and then making the just-written file or file package the document's current one.system NSSaveOperationType NSSaveAsOperation            // = 1,// The writing of a document's current contents to a new file or file package without changing the document's current one.system NSSaveOperationType NSSaveToOperation            // = 2,// The overwriting of a document's file or file package with the document's current contents even though the user has not explicitly commanded it.system NSSaveOperationType NSAutosaveInPlaceOperation   // = 4,// The writing of a document's current contents to a file or file package that is separate from the document's current one, without changing the document's current one. For an NSDocument subclass that overrides Mac OS 10.7's +autosavesInPlaces to return YES this is only used during autosaving of documents that have never been saved and therefore do not yet have a document file that can be overwritten during autosaving.system NSSaveOperationType NSAutosaveElsewhereOperation // = 3,// The writing of a document's current contents to new file or file package even though the user has not explicitly commanded it, and then making the just-written file or file package the document's current one.system NSSaveOperationType NSAutosaveAsOperation        // = 5,// change type#if ndef _DEFINEDINCOCOA#define NSDocumentChangeType as NSUInteger#endif // _DEFINEDINCOCOA// The value to pass to -updateChangeCount: to indicate that a single change has been done. For example, NSDocument's built-in undo support uses this whenever a document receives an NSUndoManagerWillCloseUndoGroupNotification from its own undo manager.system NSDocumentChangeType NSChangeDone              // = 0,// The value to pass to indicate that a single change has been undone. For example, NSDocument's built-in undo support uses this whenever a document receives an NSUndoManagerDidUndoChangeNotification from its own undo manager.system NSDocumentChangeType NSChangeUndone            // = 1,// The value to pass to indicate that a single change has been redone. For example, NSDocument's built-in undo support uses this whenever a document receives an NSUndoManagerDidRedoChangeNotification from its own undo manager.system NSDocumentChangeType NSChangeRedone            // = 5,// The value to pass to indicate that the document has been synchronized with its file or file package. For example, both -revertToContentsOfURL:ofType:error: and -saveToURL:ofType:forSaveOperation:completionHandler: may use this when they invoke -updateChangeCount:.system NSDocumentChangeType NSChangeCleared           // = 2,// The value to pass to indicate that the document has been initialized with the contents of a file or file package other than the one whose location would be returned by -fileURL, and therefore can't possibly be synchronized with its persistent representation. For example, -initForURL:withContentsOfURL:ofType:error: uses this when the two passed-in URLs are not equal to indicate that an autosaved document is being reopened.system NSDocumentChangeType NSChangeReadOtherContents // = 3,// The value to pass to indicate that the document's contents have been autosaved. For example, -saveToURL:ofType:forSaveOperation:completionHandler: may use this when it invokes -updateChangeCount:.system NSDocumentChangeType NSChangeAutosaved         // = 4,// Use this mask to indicate that a discardable change has been done. Discardable changes cause the document to be edited. In a locked document, for example, discardable changes may be thrown away instead of prompting the user to save them. Bitwise-or this value with the appropriate kind of change, NSChangeDone, NSChangeUndone, or NSChangeRedone. For example, a discardable change is "NSChangeDone | NSChangeDiscardable".system NSDocumentChangeType NSChangeDiscardable       // = 256// Classtoolbox fn DocumentClass = ClassRef// Createtoolbox fn DocumentInit = DocumentRef // autoreleasedtoolbox fn DocumentWithContentsOfURL( CFURLRef url, CFStringRef type, ErrorRef *err ) = DocumentReftoolbox fn DocumentForURL( CFURLRef forURL, CFURLRef contentsURL, CFStringRef type, ErrorRef *err ) = DocumentReftoolbox fn DocumentWithType( CFStringRef type, ErrorRef *err ) = DocumentRef// Readtoolbox fn DocumentCanConcurrentlyReadDocumentsOfType( CFStringRef type ) = BOOLtoolbox fn DocumentReadFromURL( DocumentRef ref, CFURLRef url, CFStringRef type, ErrorRef *err ) = BOOLtoolbox fn DocumentReadFromFileWrapper( DocumentRef ref, FileWrapperRef wrapper, CFStringRef type, ErrorRef *err ) = BOOLtoolbox fn DocumentReadFromData( DocumentRef ref, CFDataRef dta, CFStringRef type, ErrorRef *err ) = BOOL// Writetoolbox fn DocumentCanAsynchronouslyWriteToURL( DocumentRef ref, CFURLRef url, CFStringRef type, NSSaveOperationType saveOperation ) = BOOLtoolbox DocumentUnblockUserInteraction( DocumentRef ref )toolbox fn DocumentWriteToURL( DocumentRef ref, CFURLRef url, CFStringRef type, ErrorRef *err ) = BOOLtoolbox fn DocumentWriteSafelyToURL( DocumentRef ref, CFURLRef url, CFStringRef type, NSSaveOperationType saveOperation, ErrorRef *err ) = BOOLtoolbox fn DocumentFileWrapperOfType( DocumentRef ref, CFStringRef type, ErrorRef *err ) = FileWrapperReftoolbox fn DocumentDataOfType( DocumentRef ref, CFStringRef type, ErrorRef *err ) = CFDataReftoolbox fn DocumentWriteToURLForSaveOperation( DocumentRef ref, CFURLRef url, CFStringRef type, NSSaveOperationType saveOperation, CFURLRef originalContentsURL, ErrorRef *err ) = BOOLtoolbox DocumentSaveToURLWithSelector( DocumentRef ref, CFURLRef url, CFStringRef type, NSSaveOperationType saveOperation, ObjectRef delegate, SELRef selector, ptr contextInfo )/*  DocumentSaveToURLWithCompletionHandler  completion handler:    void local fn MyHandler( ref as DocumentRef, err as ErrorRef, userData as ptr )      // ...    end fn*/toolbox DocumentSaveToURLWithCompletionHandler( DocumentRef ref, CFURLRef url, CFStringRef type, NSSaveOperationType saveOperation, ptr completionHandler, ptr userData )toolbox fn DocumentFileAttributesToWriteToURL( DocumentRef ref, CFURLRef url, CFStringRef type, NSSaveOperationType saveOperation, CFURLRef contentsURL, ErrorRef *err ) = CFDictionaryRef// Metadatatoolbox fn DocumentFileURL( DocumentRef ref ) = CFURLReftoolbox DocumentSetFileURL( DocumentRef ref, CFURLRef url )toolbox fn DocumentIsEntireFileLoaded( DocumentRef ref ) = BOOLtoolbox fn DocumentFileModificationDate( DocumentRef ref ) = CFDateReftoolbox DocumentSetFileModificationDate( DocumentRef ref, CFDateRef dt )toolbox fn DocumentKeepBackupFile( DocumentRef ref ) = BOOLtoolbox fn DocumentIsDraft( DocumentRef ref ) = BOOLtoolbox DocumentSetDraft( DocumentRef ref, BOOL flag )toolbox fn DocumentFileType( DocumentRef ref ) = CFStringReftoolbox DocumentSetFileType( DocumentRef ref, CFStringRef type )toolbox fn DocumentIsDocumentEdited( DocumentRef ref ) = BOOLtoolbox fn DocumentIsInViewingMode( DocumentRef ref ) = BOOL// File type infotoolbox fn DocumentReadableTypes = CFArrayReftoolbox fn DocumentWritableTypes = CFArrayReftoolbox fn DocumentIsNativeType( CFStringRef type ) = BOOLtoolbox fn DocumentWritableTypesForSaveOperation( DocumentRef ref, NSSaveOperationType saveOperation ) = CFArrayReftoolbox fn DocumentFileNameExtensionForType( DocumentRef ref, CFStringRef type, NSSaveOperationType saveOperation ) = CFStringRef// Window controllerstoolbox DocumentMakeWindowControllers( DocumentRef ref )toolbox DocumentAddWindowController( DocumentRef ref, WindowControllerRef controller )toolbox DocumentRemoveWindowController( DocumentRef ref, WindowControllerRef controller )toolbox fn DocumentWindowControllers( DocumentRef ref ) = CFArrayReftoolbox fn DocumentWindowNibName( DocumentRef ref ) = CFStringReftoolbox DocumentWindowControllerDidLoadNib( DocumentRef ref, WindowControllerRef controller )toolbox DocumentWindowControllerWillLoadNib( DocumentRef ref, WindowControllerRef controller )toolbox DocumentShouldCloseWindowController( DocumentRef ref, WindowControllerRef controller, ObjectRef delegate, SELRef shouldCloseSelector, ptr contextInfo )// Windowstoolbox DocumentShowWindows( DocumentRef ref )toolbox DocumentSetWindow( DocumentRef ref, WindowRef wnd )toolbox fn DocumentWindowForSheet( DocumentRef ref ) = WindowReftoolbox fn DocumentDisplayName( DocumentRef ref ) = CFStringReftoolbox DocumentSetDisplayName( DocumentRef ref, CFStringRef name )toolbox fn DocumentDefaultDraftName( DocumentRef ref ) = CFStringReftoolbox DocumentEncodeRestorableStateWithCoderAndBackgroundQueue( DocumentRef ref, CoderRef coder, OperationQueueRef backgroundQueue )// Autosave behaviortoolbox fn DocumentAutosavesInPlace = BOOLtoolbox fn DocumentAutosavesDrafts = BOOLtoolbox fn DocumentPreservesVersions = BOOLtoolbox fn DocumentAutosavedContentsFileURL( DocumentRef ref ) = CFURLReftoolbox DocumentSetAutosavedContentsFileURL( DocumentRef ref, CFURLRef url )toolbox fn DocumentAutosavingFileType( DocumentRef ref ) = CFStringReftoolbox fn DocumentAutosavingIsImplicitlyCancellable( DocumentRef ref ) = BOOL// Autosave documenttoolbox fn DocumentCheckAutosavingSafety( DocumentRef ref, ErrorRef *err ) = BOOLtoolbox fn DocumentHasUnautosavedChanges( DocumentRef ref ) = BOOLtoolbox DocumentScheduleAutosaving( DocumentRef ref )toolbox DocumentAutosaveWithDelegate( DocumentRef ref, ObjectRef delegate, SELRef didAutosaveSelector, ptr contextInfo )/*  DocumentAutosaveWithImplicitCancellability  completion handler:    void local fn MyHandler( ref as DocumentRef, err as ErrorRef, userData as ptr )      // ...    end fn*/toolbox DocumentAutosaveWithImplicitCancellability( DocumentRef ref, BOOL cancellable, ptr completionHandler, ptr userData )toolbox fn DocumentBackupFileURL( DocumentRef ref ) = CFURLRef// Document versionstoolbox DocumentBrowseDocumentVersions( DocumentRef ref, ObjectRef sender )toolbox fn DocumentIsBrowsingVersions( DocumentRef ref ) = BOOL/*  DocumentStopBrowsingVersions  completion handler:    void local fn MyHandler( ref as DocumentRef, userData as ptr )      // ...    end fn*/toolbox DocumentStopBrowsingVersions( DocumentRef ref, ptr completionHandler, ptr userData )// Store documents in iCloudtoolbox DocumentMoveDocumentToUbiquityContainer( DocumentRef ref, ObjectRef sender )toolbox fn DocumentUsesUbiquitousStorage = BOOL// Undo and redotoolbox fn DocumentUndoManager( DocumentRef ref ) = UndoManagerReftoolbox DocumentSetUndoManager( DocumentRef ref, UndoManagerRef undoManager )toolbox fn DocumentHasUndoManager( DocumentRef ref ) = BOOLtoolbox DocumentSetHasUndoManager( DocumentRef ref, BOOL flag )// Change counttoolbox DocumentUpdateChangeCountWithToken( DocumentRef ref, ObjectRef changeCountToken, NSSaveOperationType saveOperation )toolbox DocumentUpdateChangeCount( DocumentRef ref, NSDocumentChangeType type )toolbox fn DocumentChangeCountTokenForSaveOperation( DocumentRef ref, NSSaveOperationType saveOperation ) = ObjectRef// Window restoration#if _MACOSMAXALLOWED >= 120000toolbox fn DocumentAllowedClassesForRestorableStateKeyPath( CFStringRef keyPath ) = CFArrayRef // macOS 12.0+#endif // 120000toolbox DocumentEncodeRestorableStateWithCoder( DocumentRef ref, CoderRef coder )toolbox DocumentRestoreStateWithCoder( DocumentRef ref, CoderRef coder )toolbox fn DocumentRestorableStateKeyPaths = CFArrayReftoolbox DocumentInvalidateRestorableState( DocumentRef ref )/*  DocumentRestoreDocumentWindowWithIdentifier  completion handler:    void local fn MyHandler( ref as DocumentRef, wnd as WindowRef, err as ErrorRef, userData as ptr )      // ...    end fn*/toolbox DocumentRestoreDocumentWindowWithIdentifier( DocumentRef ref, CFStringRef identifier, CoderRef state, ptr completionHandler, ptr userData )// Present save paneltoolbox DocumentRunModalSavePanelForSaveOperation( DocumentRef ref, NSSaveOperationType saveOperation, ObjectRef delegate, SELRef selector, ptr contextInfo )toolbox fn DocumentPrepareSavePanel( DocumentRef ref, SavePanelRef svPanel ) = BOOLtoolbox fn DocumentFileTypeFromLastRunSavePanel( DocumentRef ref ) = CFStringReftoolbox fn DocumentFileNameExtensionWasHiddenInLastRunSavePanel( DocumentRef ref ) = BOOL// User activitiestoolbox fn DocumentUserActivity( DocumentRef ref ) = UserActivityReftoolbox DocumentSetUserActivity( DocumentRef ref, UserActivityRef userActivity )toolbox DocumentUpdateUserActivityState( DocumentRef ref, UserActivityRef userActivity )// User interface itemstoolbox fn DocumentValidateUserInterfaceItem( DocumentRef ref, ValidatedUserInterfaceItemRef interfaceItem ) = BOOL// Perform tasks serially/*  DocumentPerformSynchronousFileAccess  DocumentPerformAsynchronousFileAccess  DocumentPerformActivityWithSynchronousWaiting  DocumentContinueActivity  DocumentContinueAsynchronousWorkOnMainThread  callback:    void local fn MyCallback( ref as DocumentRef, userData as ptr )      // ...    end fn*/toolbox DocumentPerformSynchronousFileAccess( DocumentRef ref, ptr callback, ptr userData )toolbox DocumentPerformAsynchronousFileAccess( DocumentRef ref, ptr callback, ptr userData )toolbox DocumentPerformActivityWithSynchronousWaiting( DocumentRef ref, BOOL waitSynchronously, ptr callback, ptr userData )toolbox DocumentContinueActivity( DocumentRef ref, ptr callback, ptr userData )toolbox DocumentContinueAsynchronousWorkOnMainThread( DocumentRef ref, ptr callback, ptr userData )// User actionstoolbox DocumentPrintDocument( DocumentRef ref )toolbox DocumentRunPageLayout( DocumentRef ref )toolbox DocumentRevertDocumentToSaved( DocumentRef ref )toolbox DocumentSaveDocument( DocumentRef ref )toolbox DocumentSaveDocumentAs( DocumentRef ref )toolbox DocumentSaveDocumentTo( DocumentRef ref )toolbox DocumentSaveDocumentWithDelegate( DocumentRef ref, ObjectRef delegate, SELRef shouldCloseSelector, ptr contextInfo  )// Closetoolbox DocumentCanCloseDocumentWithDelegate( DocumentRef ref, ObjectRef delegate, SELRef shouldCloseSelector, ptr contextInfo )toolbox DocumentClose(  DocumentRef ref )// Revert contentstoolbox fn DocumentRevertToContentsOfURL( DocumentRef ref, CFURLRef url, CFStringRef type, ErrorRef *err ) = BOOL// Duplicatetoolbox fn DocumentDuplicateDocument( DocumentRef ref, ErrorRef *err ) = DocumentRef//toolbox DocumentDuplicate( DocumentRef ref )toolbox DocumentDuplicateDocumentWithDelegate( DocumentRef ref, ObjectRef delegate, SELRef didDuplicateSelector, ptr contextInfo )// Remame//toolbox fn DocumentRenameDocument( DocumentRef ref )// Move//toolbox fn DocumentMoveDocument( DocumentRef ref )/*  DocumentMoveDocumentWithCompletionHandler  completion handler:    void local fn MyHandler( ref as DocumentRef, didMove as BOOL, uesrData as ptr )      // ...    end fn*/toolbox DocumentMoveDocumentWithCompletionHandler( DocumentRef ref, ptr completionHandler, ptr userData )/*  DocumentMoveToURL  completion handler:    void local fn MyHandler( ref as DocumentRef, err as ErrorRef, uesrData as ptr )      // ...    end fn*/toolbox DocumentMoveToURL( DocumentRef ref, CFURLRef url, ptr completionHandler, ptr userData )// Locktoolbox DocumentLockDocument( DocumentRef ref )toolbox DocumentUnlockDocument( DocumentRef ref )/*  DocumentLockDocumentWithCompletionHandler  completion handler:    void local fn MyHandler( ref as DocumentRef, didLock as BOOL, userData as ptr )      // ...    end fn*/toolbox DocumentLockDocumentWithCompletionHandler( DocumentRef ref, ptr completionHandler, ptr userData )/*  DocumentLockWithCompletionHandler  completion handler:    void local fn MyHandler( ref as DocumentRef, err as ErrorRef, userData as ptr )      // ...    end fn*/toolbox DocumentLockWithCompletionHandler( DocumentRef ref, ptr completionHandler, ptr userData )/*  DocumentUnlockDocumentWithCompletionHandler  completion handler:    void local fn MyHandler( ref as DocumentRef, didUnlock as BOOL, userData as ptr )      // ...    end fn*/toolbox DocumentUnlockDocumentWithCompletionHandler( DocumentRef ref, ptr completionHandler, ptr userData )/*  DocumentUnlockWithCompletionHandler  completion handler:    void local fn MyHandler( ref as DocumentRef, err as ErrorRef, userData as ptr )      // ...    end fn*/toolbox DocumentUnlockWithCompletionHandler( DocumentRef ref, ptr completionHandler, ptr userData )toolbox fn DocumentIsLocked( DocumentRef ref ) = BOOL// Print// ...// Share// Script commands// Display errors// Instance properties// Instance methods